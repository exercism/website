name: Deploy to Amazon ECS

env:
  aws_region: eu-west-2
  webservers_task_definition_name: webservers
  webservers_service_name: webservers
  webservers_cluster_name: webservers

  sidekiq_task_definition_name: sidekiq
  sidekiq_service_name: sidekiq
  sidekiq_cluster_name: sidekiq

  ecr_repository_rails: "webserver-rails"
  dockerfile_rails: "docker/rails.Dockerfile"

  ecr_repository_nginx: "webserver-nginx"
  dockerfile_nginx: "docker/nginx.Dockerfile"

  ecr_repository_anycable_go: "anycable-go"
  dockerfile_anycable_go: "docker/anycable-go.Dockerfile"

  # TODO: (Required) Move this to be a secret
  s3_bucket: "exercism-v3-assets"

on:
  push:
    branches:
      - main

jobs:
  deploy:
    if: github.repository == 'exercism/website-deployer'

    name: Upload images to ECR, assets to S3, and definition to ECS
    runs-on: self-hosted

    steps:
      ###############
      ###############
      # Setup Steps #
      ###############
      ###############
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEPLOY_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEPLOY_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.aws_region }}

      - name: Login to Amazon ECR
        id: login_to_ecr
        uses: aws-actions/amazon-ecr-login@v1

      #########################
      #########################
      # Build the Rails image #
      #########################
      #########################
      - name: Build and Push Rails Docker
        id: build_rails
        env:
          ECR_REGISTRY: ${{ steps.login_to_ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ecr_repository_rails }}
          IMAGE_NAME: "${{ steps.login_to_ecr.outputs.registry}}/${{ env.ecr_repository_rails }}:${{ github.sha }}"
          DOCKERFILE: ${{ env.dockerfile_rails }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $IMAGE_NAME -f $DOCKERFILE .
          docker push $IMAGE_NAME

          # Retag this as the latest
          docker tag $IMAGE_NAME $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Retag it as website below because the `:` hurts us otherwise
          docker tag $IMAGE_NAME website

          # Save the output for writing to the task definiton
          echo "::set-output name=image::$IMAGE_NAME"

      ##################################
      ##################################
      # Extact and upload assets to s3 #
      ##################################
      ##################################
      - name: Copy assets from Dockerfile
        run: |
          container_id=$(docker create website)
          docker cp ${container_id}:/opt/exercism/website/current/public/packs packs
          docker rm ${container_id}

      - name: Upload assets to s3
        run: |
          aws s3 sync packs s3://${{ env.s3_bucket }}/packs/ --acl public-read --no-progress --cache-control max-age=31536000

      #########################
      #########################
      # Build the Nginx image #
      #########################
      #########################
      - name: Build and Push Nginx Docker
        id: build_nginx
        env:
          ECR_REGISTRY: ${{ steps.login_to_ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ecr_repository_nginx }}
          IMAGE_NAME: "${{ steps.login_to_ecr.outputs.registry}}/${{ env.ecr_repository_nginx }}:${{ github.sha }}"
          DOCKERFILE: ${{ env.dockerfile_nginx }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $IMAGE_NAME -f $DOCKERFILE .
          docker push $IMAGE_NAME

          # Retag this as the latest
          docker tag $IMAGE_NAME $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Save the output for writing to the task definiton
          echo "::set-output name=image::$IMAGE_NAME"

      ############################
      ############################
      # Build the AnyCable image #
      ############################
      ############################
      - name: Build and Push Anycable Go Docker
        id: build_anycable_go
        env:
          ECR_REGISTRY: ${{ steps.login_to_ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ecr_repository_anycable_go }}
          IMAGE_NAME: "${{ steps.login_to_ecr.outputs.registry}}/${{ env.ecr_repository_anycable_go }}:${{ github.sha }}"
          DOCKERFILE: ${{ env.dockerfile_anycable_go }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $IMAGE_NAME -f $DOCKERFILE .
          docker push $IMAGE_NAME

          # Retag this as the latest
          docker tag $IMAGE_NAME $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Save the output for writing to the task definiton
          echo "::set-output name=image::$IMAGE_NAME"

      ##############################
      ##############################
      # Update the task definition #
      ##############################
      ##############################

      # We get the existing task definition to update
      # Note that this is passed into the first update action
      # but then chained from action to action for the others.
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.webservers_task_definition_name }} --query taskdefinition > task-definition.json

      # Set puma to rails
      - name: Update the definition for puma
        id: update_definition_for_puma
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: puma
          image: "${{ steps.build_rails.outputs.image }}"

      # Set anycable_ruby to rails
      - name: Update the definition for anycable_ruby
        id: update_definition_for_anycable_ruby
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.update_definition_for_puma.outputs.task-definition }}
          container-name: anycable_ruby
          image: "${{ steps.build_rails.outputs.image }}"

      # Set nginx to nginx
      - name: Update the definition for nginx
        id: update_definition_for_nginx
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.update_definition_for_anycable_ruby.outputs.task-definition }}
          container-name: nginx
          image: "${{ steps.build_nginx.outputs.image }}"

      # Set anycable_go to anycable_go
      - name: Update the definition for anycable_go
        id: update_definition_for_anycable_go
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.update_definition_for_nginx.outputs.task-definition }}
          container-name: anycable_go
          image: "${{ steps.build_anycable_go.outputs.image }}"

      ##############################
      ##############################
      # Deploy the task definition #
      ##############################
      ##############################

      # Push the new definition up to ECS and deploy a new service from it.
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          # Ensure this is the final step in the daisy-chain above
          task-definition: ${{ steps.update_definition_for_anycable_go.outputs.task-definition }}
          service: ${{ env.webservers_service_name }}
          cluster: ${{ env.webservers_cluster_name }}
          wait-for-service-stability: false

      ##############################
      ##############################
      # Update Sidekiq Task definition #
      ##############################
      ##############################

      # We get the existing task definition to update
      # Note that this is passed into the first update action
      # but then chained from action to action for the others.
      - name: Download sidekiq task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.sidekiq_task_definition_name }} --query taskdefinition > sidekiq-task-definition.json

      # Set puma to rails
      - name: Update the sidekiq definition
        id: update_definition_for_sidekiq
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: sidekiq-task-definition.json
          container-name: sidekiq
          image: "${{ steps.build_rails.outputs.image }}"

      # Push the new definition up to ECS and deploy a new service from it.
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          # Ensure this is the final step in the daisy-chain above
          task-definition: ${{ steps.update_definition_for_sidekiq.outputs.task-definition }}
          service: ${{ env.sidekiq_service_name }}
          cluster: ${{ env.sidekiq_cluster_name }}
          wait-for-service-stability: true
