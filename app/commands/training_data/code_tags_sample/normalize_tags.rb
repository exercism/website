class TrainingData::CodeTagsSample::NormalizeTags
  include Mandate

  initialize_with :tags

  def call
    return nil if tags.nil?

    tags.flat_map { |tag| MAPPING.fetch(tag, tag) }.uniq
  end

  MAPPING = {
    'construct:global-variables' => ['construct:global-variable'],
    'concept:global-variable' => ['construct:global-variable'],
    'construct:generator-expression' => ['construct:generator'],
    'technique:regular-expressions' => ['technique:regular-expression'],
    'techinique:regular-expressions' => ['technique:regular-expression'],
    'construct:double-precision:floating-point-number' => ['construct:double'],
    'construct:unsigned-int' => ['construct:uint'],
    'construct:unsigned-integral' => ['construct:uint'],
    'construct:nil' => ['construct:null'],
    'construct:none' => ['construct:null'],
    'construct:python-None' => ['construct:null'],
    'construct:nullptr' => ['construct:null', 'construct:pointer'],
    'construct:python-raw-string' => ['construct:verbatim-string'],
    'construct:verbatim' => ['construct:verbatim-string'],
    'construct:long-double' => ['construct:double'],
    'construct:long-long' => ['construct:long'],
    'construct:long-long-int' => ['construct:long'],
    'construct:elif' => ['construct:else'],
    'construct:elif-statement' => ['construct:else'],
    'construct:else-statement' => ['construct:else'],
    'construct:elseif' => ['construct:else'],
    'construct:if-else' => ['construct:if', 'construct:else'],
    'construct:if-statement' => ['construct:if', 'construct:else'],
    'construct:if-then-else' => ['construct:if', 'construct:else'],
    'construct:identity-test' => ['construct:type-test'],
    'construct:identity-comparison' => ['construct:equality'],
    'construct:setmetatable' => ['construct:metatable'],
    'construct:positional-parameter' => [],
    'construct:positional-arguments' => [],
    'uses.math.cosin' => 'uses:math.cosin',
    'uses.math.sin' => 'uses:math.sin',
    'construct:meta-table' => ['construct:metatable'],
    'construct:uint64_t' => ['construct:ulong'],
    'construct:addition-assignment' => ['construct:add-assignment'],
    'construct:algorithm' => [],
    'construct:attributes' => ['construct:attribute'],
    'construct:call' => ['construct:invocation'],
    'construct:calls' => ['construct:invocation'],
    'construct:do-loop' => ["construct:do-while-loop"],
    'construct:do-until-loop' => ["construct:do-while-loop"],
    'construct:equality-comparison' => ['construct:equality'],
    'construct:equality-test' => ['construct:equality'],
    'construct:dict' => ["construct:dictionary"],
    'technique: laziness' => ["technique:laziness"],
    'construct:value-comparision' => ['construct:comparison'],
    'construct:value-comparison' => ['construct:comparison'],
    'construct:value-test' => ['construct:equality'],
    'paradigm:higher-order-functions' => [],
    'paradigm:looping' => [],
    'paradigm:template-metaprogramming' => ["paradigm:meta"],
    'technique:async' => ['technique:concurrency'],
    'technique:closure' => [],
    'technique:copy-empty-series' => [],
    'technique:functional-composition' => ['technique:function-composition'],
    'technique:logic-function' => [],
    'technique:minimal-header' => [],
    'technique:multiprocessing' => [],
    'technique:performance' => [],
    'technique:search' => [],
    'technique:set-algebra' => [],
    'construct:right-shift' => ['construct:bitwise-right-shift'],
    'construct:single-quoted-string' => ['construct:string'],
    'construct:sort' => ['technique:sorting'],
    'construct:static-method' => ["construct:static-method"],
    'construct:negation' => ['construct:logical-not'],
    'construct:nested-conditional' => ['construct:nesting'],
    'construct:nested-dict' => ['construct:dictionary', 'construct:nesting'],
    'construct:nested-if' => ['construct:if', 'construct:nesting'],
    'construct:nested-loop' => ['construct:loop', 'construct:nesting'],
    'construct:nested-tuple' => ['construct:tuple', 'construct:nesting'],
    'construct:char-literal' => ['construct:char'],
    'construct:const' => ['construct:constant'],
    'construct:inheritance' => ['technique:inheritance'],
    'construct:write-host' => [],
    'construct:typedef' => ['construct:type-alias'],
    'construct:true' => ['construct:boolean'],
    'construct:ternary' => ['construct:conditional-operator'],
    'construct:then' => ['construct:else'],
    'construct:def' => ['construct:function'],
    'construct:boolean-logic' => ['technique:boolean-logic'],
    'construct:c' => [],
    'construct:clear-host' => [],
    'construct:context-manager' => [],
    'construct:echo' => ['construct:print'],
    'construct:printf' => ['construct:print'],
    'construct:read-host' => [],
    'construct:raise' => ['construct:throw'],
    'construct:ranges' => ['construct:range'],
    'construct:word' => ['construct:short'],
    'construct:usize' => ['construct:nuint'],
    'construct:value' => [],
    'construct:year' => [],
    'constuct:lambda' => ['construct:lambda'],
    'construct:unordered-map' => ['construct:dictionary'],
    'construct:underscore' => ['construct:discard'],
    'construct:modulus' => ['construct:modulo'],
    'construct:named-arguments' => ['construct:named-argument'],
    'construct:named-parameter' => [],
    'construct:let' => ['construct:variable'],
    'construct:library' => [],
    'construct:length' => [],
    'construct:box' => ['construct:boxing'],
    'construct:mul' => ['construct:multiply'],
    'construct:multiline-comment' => ['construct:comment'],
    'construct:comparisons' => ['construct:comparison'],
    'construct:composition' => ['technique:composition'],
    'construct:table-insertation' => [],
    'construct:table-insertion' => [],
    'construct:tail-call' => ["technique:tail-call-optimization", "technique:recursion"],
    'construct:throw-expression' => ['construct:throw'],
    'construct:throwable' => ['construct:throw'],
    'construct:string-concatenation' => ['construct:concatenation', 'construct:string'],
    'construct:switch-expression' => ['construct:switch'],
    'construct:refinement' => [],
    'construct:recursion' => ['technique:recursion'],
    'construct:keep' => [],
    'construct:make' => [],
    'construct:map' => [],
    'construct:method-invocation' => ['construct:invocation'],
    'construct:reduce' => [],
    'construct:transform' => [],
    'construct:optional-type' => ['construct:option'],
    'construct:by-convention' => [],
    'construct:back_inserter' => [],
    'construct:default-argument' => ['construct:default'],
    'construct:equals' => ['construct:equality'],
    'construct:error-handling' => ['technique:error-handling'],
    'construct:except' => [],
    'construct:remainder' => ['construct:modulo'],
    'construct:take' => [],
    'construct:rejoin' => [],
    'construct:trinary' => [],
    'construct:reverse' => [],
    'construct:set-difference' => [],
    'construct:left-shift' => ['construct:bitwise-left-shift'],
    'construct:exit' => [],
    'construct:integer' => ['construct:int'],
    'construct:integral-type' => ['construct:integral-number'],
    'construct:either' => ['construct:result'],
    'construct:expression' => [],
    'construct:and' => ['construct:logical-and'],
    'construct:or' => ['construct:logical-or'],
    'construct:subtraction-assignment' => ['construct:subtract-assignment'],
    'construct:repeat' => ['construct:do-while-loop'],
    'construct:unless' => ['construct:while-loop'],
    'construct:using-declaration' => ['construct:using-directive'],
    'construct:unpacking' => ['construct:destructuring'],
    'construct:iterable' => ['construct:iterator'],
    'construct:iteration' => ['technique:enumeration'],
    'construct:bitset' => ['construct:bit-array'],
    'construct:case' => ['construct:switch'],
    'construct:annotation' => ['construct:attribute'],
    'construct:checked' => ['construct:checked-arithmetic'],
    'construct:checked-expression' => ['construct:checked-arithmetic'],
    'construct:foldl' => [],
    'construct:position' => [],
    'construct:patterns' => ['construct:pattern'],
    'construct:power' => ['construct:exponentiation'],
    'construct:sqrt' => [],
    'construct:path' => [],
    'construct:constructor-initializer' => ['construct:object-initializer'],
    'construct:logical-operator' => ['technique:boolean-logic'],
    'construct:object' => ['construct:instance'],
    'construct:overloading' => ['construct:function-overloading'],
    'construct:parameter-type' => ['construct:parameter'],
    'construct:parenthesized' => ['construct:parenthesized-expression'],
    'construct:pragma' => [],
    'construct:private-attribute' => [],
    'construct:auto' => ['construct:type-inference'],
    'construct:function-definition' => ['construct:function'],
    'construct:imaginary-number' => ['construct:complex-number'],
    'construct:definition' => [],
    'construct:format' => ['construct:string-formatting'],
    'construct:impl' => ['construct:type-extension'],
    'construct:infix-operators' => ['construct:infix-operator'],
    'construct:local' => [],
    'construct:literal' => [],
    'construct:is-cast' => ['construct:type-test'],
    'construct:as-cast' => ['construct:type-conversion'],
    'construct:template-template-parameter' => ['construct:template-parameter'],
    'construct:inline-docs' => ['construct:comment'],
    'construct:infinite-iterator' => ["construct:iterator"],
    'construct:include' => ['construct:import'],
    'construct:index' => ['construct:indexing'],
    'construct:indexed-access' => ['construct:indexing'],
    'construct:define' => ['construct:macro'],
    'construct:get-word' => [],
    'construct:back-tick' => [],
    'construct:backtick-escape' => [],
    'construct:from-import' => ['construct:explicit-import']
  }.freeze
  private_constant :MAPPING
end
