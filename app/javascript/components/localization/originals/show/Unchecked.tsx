import React, { useCallback, useContext, useState } from 'react'
import { nameForLocale } from '@/utils/name-for-locale'
import { flagForLocale } from '@/utils/flag-for-locale'
import { sendRequest } from '@/utils/send-request'
import { OriginalsShowContext } from '.'
import { redirectTo } from '@/utils'

export function Unchecked({ translation }: { translation: Translation }) {
  const { links } = useContext(OriginalsShowContext)
  const [editMode, setEditMode] = useState(false)
  const [copy, setCopy] = useState(translation.value)
  const [textEditorValue, setTextEditorValue] = useState(translation.value)

  const updateCopy = useCallback(() => {
    if (textEditorValue !== copy) {
      setCopy(textEditorValue)
    }
    setEditMode(false)
  }, [textEditorValue, copy])

  const createProposal = useCallback(async () => {
    try {
      const { fetch } = sendRequest({
        method: 'POST',
        endpoint: links.createProposal.replace(
          'TRANSLATION_ID',
          translation.uuid
        ),
        body: JSON.stringify({ value: copy }),
      })

      await fetch
      redirectTo(links.originalsListPage)
    } catch (err) {
      console.error(err)
    }
  }, [links.createProposal, translation.uuid, copy, links.originalsListPage])

  const cancelEditing = useCallback(() => {
    setTextEditorValue(copy)
    setEditMode(false)
  }, [copy])

  const resetChanges = useCallback(() => {
    setCopy(translation.value)
    setTextEditorValue(translation.value)
  }, [])

  return (
    <div className="locale unchecked">
      <div className="header">
        <div className="text-h4">
          {nameForLocale(translation.locale)} ({translation.locale})
        </div>
        <div className="status">Needs Checking</div>

        <div className="flag">{flagForLocale(translation.locale)}</div>
      </div>
      <div className="body">
        <p className="text-16 leading-140 mb-10">
          This is the locale version of the English text on the right. It was
          generated by an LLM. Please compare it to the original and check it
          for weirdnesses or inaccuracies then either edit it or approve it.
        </p>

        {editMode ? (
          <textarea
            className="local-value mb-12 w-full"
            rows={12}
            value={textEditorValue}
            onChange={(e) => setTextEditorValue(e.target.value)}
          />
        ) : (
          <div className="locale-value mb-12">{copy}</div>
        )}

        {editMode ? (
          <div className="buttons flex gap-8">
            <button onClick={updateCopy} className="btn-s btn-default">
              Update
            </button>
            <button onClick={cancelEditing} className="btn-s btn-default">
              Cancel
            </button>
          </div>
        ) : (
          <div className="buttons flex justify-between">
            <div className="buttons flex gap-8">
              <button
                onClick={() => setEditMode(true)}
                className="btn-s btn-default"
              >
                Edit Translation
              </button>
              {copy !== translation.value && (
                <button onClick={resetChanges} className="btn-s btn-default">
                  Reset changes
                </button>
              )}
            </div>
            <button onClick={createProposal} className="btn-s btn-primary">
              Submit proposal
            </button>
          </div>
        )}
      </div>
    </div>
  )
}
