```ts
// i18n
export default {
  "info.titleInTrack": "in <trackIcon/> <trackTitle>{{trackTitle}}</trackTitle>",
  "info.outdated.solutionWasSolved": "This solution was solved against an older version of this exercise",
  "solutionStatusTag.published": "Published",
  "solutionStatusTag.completed": "Completed",
  "solutionStatusTag.inProgress": "In-progress",
  "exerciseStatusTag.recommended": "Recommended",
  "exerciseStatusTag.available": "Available",
  "exerciseStatusTag.locked": "Locked",
  "difficulty.easy": "Easy",
  "difficulty.medium": "Medium",
  "difficulty.hard": "Hard",
  "exerciseTypeTag.learningExercise": "Learning Exercise",
  "exerciseTypeTag.tutorialExercise": "Tutorial Exercise"
}

// modified_files
// === file: ../components/common/exercise-widget/Info.tsx ===
// i18n-key-prefix: info
// i18n-namespace: components/common/exercise-widget
import React from 'react'
import pluralize from 'pluralize'
import { TrackIcon } from '../TrackIcon'
import { Exercise, Track, SolutionForStudent } from '../../types'
import { Icon, GraphicalIcon } from '../../common'
import { SolutionStatusTag } from './SolutionStatusTag'
import { ExerciseStatusTag } from './ExerciseStatusTag'
import { ExerciseTypeTag } from './ExerciseTypeTag'
import { Difficulty } from './Difficulty'
import { Outdated } from './info/Outdated'

export const Info = ({
  exercise,
  track,
  solution,
  renderBlurb,
  isSkinny,
}: {
  exercise: Exercise
  track?: Track
  solution?: SolutionForStudent
  renderBlurb: boolean
  isSkinny: boolean
}): JSX.Element => {
  return (
    <div className="--info">
      <div className="--title">
        {exercise.title}
        {track && !isSkinny ? (
          <div className="--track">
            {t('info.titleInTrack', {
              trackTitle: track.title,
            })} <TrackIcon iconUrl={track.iconUrl} title={track.title} />
            <div className="--track-title">{track.title}</div>
          </div>
        ) : null}
        {solution && solution.hasNotifications ? (
          <div className="c-notification-dot">
            <span className="sr-only">has notifications</span>
          </div>
        ) : null}

        {solution && solution.isOutOfDate ? <Outdated /> : null}
      </div>
      {isSkinny ? null : (
        <div className="--data">
          {solution ? (
            <SolutionStatusTag status={solution.status} size="small" />
          ) : (
            <ExerciseStatusTag exercise={exercise} size="small" />
          )}
          {solution ? null : exercise.type == 'practice' ? (
            <Difficulty difficulty={exercise.difficulty} size="small" />
          ) : (
            <ExerciseTypeTag type={exercise.type} size="small" />
          )}

          {solution && solution.mentoringStatus == 'requested' ? (
            <Icon
              icon="mentoring-status-requested"
              alt="Mentoring requested"
              className="--mentoring-status"
            />
          ) : solution && solution.mentoringStatus == 'in_progress' ? (
            <Icon
              icon="mentoring-status-in-progress"
              alt="Mentoring in progress"
              className="--mentoring-status"
            />
          ) : solution && solution.mentoringStatus == 'finished' ? (
            <Icon
              icon="mentoring-status-finished"
              alt="Mentoring finished"
              className="--mentoring-status"
            />
          ) : null}

          {solution && solution.numIterations > 0 ? (
            <div className="--iterations-count">
              <GraphicalIcon icon="iteration" />
              {solution.numIterations}{' '}
              {pluralize('iteration', solution.numIterations)}
            </div>
          ) : null}
        </div>
      )}
      {renderBlurb && !isSkinny ? (
        <div className="--blurb">{exercise.blurb}</div>
      ) : null}
    </div>
  )
}
import { useTranslation } from 'react-i18next'
const { t } = useTranslation('components/common/exercise-widget')

// === end file ===

// === file: ../components/common/exercise-widget/SolutionStatusTag.tsx ===
// i18n-key-prefix: solutionStatusTag
// i18n-namespace: components/common/exercise-widget
import React from 'react'
import { SolutionStatus, Size } from '../../types'
import { useTranslation } from 'react-i18next'
const { t } = useTranslation('components/common/exercise-widget')

export const SolutionStatusTag = ({
  status,
  size,
}: {
  status: SolutionStatus
  size: Size
}): JSX.Element => {
  const sizeClassName = size ? `--${size}` : ''

  switch (status) {
    case 'published':
      return (
        <div className={`c-exercise-status-tag --published ${sizeClassName}`}>
          {t('solutionStatusTag.published')}
        </div>
      )
    case 'completed':
      return (
        <div className={`c-exercise-status-tag --completed ${sizeClassName}`}>
          {t('solutionStatusTag.completed')}
        </div>
      )
    case 'started':
    case 'iterated':
      return (
        <div className={`c-exercise-status-tag --in-progress ${sizeClassName}`}>
          {t('solutionStatusTag.inProgress')}
        </div>
      )
  }
}

// === end file ===

// === file: ../components/common/exercise-widget/info/Outdated.tsx ===
// i18n-key-prefix: info.outdated
// i18n-namespace: components/common/exercise-widget
import React from 'react'
import { Icon } from '../..'
import { useTranslation } from 'react-i18next'
const { t } = useTranslation('components/common/exercise-widget')

export const Outdated = (): JSX.Element => {
  return (
    <Icon
      className="--out-of-date"
      icon="warning"
      alt={t('info.outdated.solutionWasSolved')}
    />
  )
}

// === end file ===

// === file: ../components/common/exercise-widget/ExerciseStatusTag.tsx ===
// i18n-key-prefix: exerciseStatusTag
// i18n-namespace: components/common/exercise-widget
import React from 'react'
import { Exercise, Size } from '../../types'
import { useTranslation } from 'react-i18next'
const { t } = useTranslation('components/common/exercise-widget')

export const ExerciseStatusTag = ({
  exercise,
  size,
}: {
  exercise: Exercise
  size?: Size
}): JSX.Element => {
  if (exercise.isExternal) {
    return <></>
  }

  const sizeClassName = size ? `--${size}` : ''

  if (exercise.isRecommended) {
    return (
      <div className={`c-exercise-status-tag --recommended ${sizeClassName}`}>
        {t('exerciseStatusTag.recommended')}
      </div>
    )
  } else if (exercise.isUnlocked) {
    return (
      <div className={`c-exercise-status-tag --available ${sizeClassName}`}>
        {t('exerciseStatusTag.available')}
      </div>
    )
  } else {
    return (
      <div className={`c-exercise-status-tag --locked ${sizeClassName}`}>
        {t('exerciseStatusTag.locked')}
      </div>
    )
  }
}

// === end file ===

// === file: ../components/common/exercise-widget/Difficulty.tsx ===
// i18n-key-prefix: difficulty
// i18n-namespace: components/common/exercise-widget
import React from 'react'
import { ExerciseDifficulty, Size } from '../../types'
import { useTranslation } from 'react-i18next'
const { t } = useTranslation('components/common/exercise-widget')

export const Difficulty = ({
  difficulty,
  size,
}: {
  difficulty: ExerciseDifficulty
  size?: Size
}): JSX.Element => {
  const sizeClassName = size ? `--${size}` : ''

  switch (difficulty) {
    case 'easy':
      return (
        <div className={`c-difficulty-tag --easy ${sizeClassName}`}>
          <div className="icon"></div>{t('difficulty.easy')}
        </div>
      )
    case 'medium':
      return (
        <div className={`c-difficulty-tag --medium ${sizeClassName}`}>
          <div className="icon"></div>Medium
        </div>
      )
    case 'hard':
      return (
        <div className={`c-difficulty-tag --hard ${sizeClassName}`}>
          <div className="icon"></div>{t('difficulty.hard')}
        </div>
      )
  }
}

// === end file ===

// === file: ../components/common/exercise-widget/ExerciseTypeTag.tsx ===
// i18n-key-prefix: exerciseTypeTag
// i18n-namespace: components/common/exercise-widget
import React from 'react'
import { GraphicalIcon } from '../../common'
import { Size, ExerciseType } from '../../types'
import { useTranslation } from 'react-i18next'
const { t } = useTranslation('components/common/exercise-widget')

export const ExerciseTypeTag = ({
  type,
  size,
}: {
  type: ExerciseType
  size?: Size
}): JSX.Element => {
  const sizeClassName = size ? `--${size}` : ''

  switch (type) {
    case 'concept':
      return (
        <div className={`c-exercise-type-tag --concept ${sizeClassName}`}>
          <GraphicalIcon icon="concept-exercise" /> {t('exerciseTypeTag.learningExercise')}
        </div>
      )
    case 'tutorial':
      return (
        <div className={`c-exercise-type-tag --tutorial ${sizeClassName}`}>
          {t('exerciseTypeTag.tutorialExercise')}
        </div>
      )
    default:
      return <></>
  }
}

// === end file ===
```