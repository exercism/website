```ts
// i18n
export default {
  "tasksList.showingTasks": "Showing {{totalCount}} {{task}}",
  "tasksList.outOfPossibleTasks": "out of {{unscopedTotal}} possible {{unscopedTask}}",
  "tasksList.resetFilters": "Reset Filters",
  "contributorsList.thisWeek": "This week",
  "contributorsList.last30Days": "Last 30 days",
  "contributorsList.lastYear": "Last year",
  "contributorsList.allTime": "All time",
  "contributorsList.categorySwitcher.authoring": "Authoring",
  "contributorsList.categorySwitcher.building": "Building",
  "contributorsList.categorySwitcher.maintaining": "Maintaining",
  "contributorsList.categorySwitcher.mentoring": "Mentoring",
  "contributorsList.categorySwitcher.allCategories": "All categories",
  "tasksList.actionSwitcher.create": "Create",
  "tasksList.actionSwitcher.sync": "Sync",
  "tasksList.actionSwitcher.improve": "Improve",
  "tasksList.actionSwitcher.proofread": "Proofread",
  "tasksList.actionSwitcher.fix": "Fix",
  "tasksList.actionSwitcher.all": "All",
  "tasksList.typeSwitcher.docs": "Docs",
  "tasksList.typeSwitcher.ci": "CI",
  "tasksList.typeSwitcher.coding": "Coding",
  "tasksList.typeSwitcher.docker": "Docker",
  "tasksList.typeSwitcher.content": "Content",
  "tasksList.typeSwitcher.allTypes": "All types",
  "tasksList.knowledgeSwitcher.none": "None",
  "tasksList.knowledgeSwitcher.elementary": "Elementary",
  "tasksList.knowledgeSwitcher.intermediate": "Intermediate",
  "tasksList.knowledgeSwitcher.advanced": "Advanced",
  "tasksList.knowledgeSwitcher.anyKnowledge": "Any knowledge",
  "tasksList.sizeSwitcher.tiny": "Tiny",
  "tasksList.sizeSwitcher.small": "Small",
  "tasksList.sizeSwitcher.medium": "Medium",
  "tasksList.sizeSwitcher.large": "Large",
  "tasksList.sizeSwitcher.massive": "Massive",
  "tasksList.sizeSwitcher.allSizes": "All sizes",
  "tasksList.moduleSwitcher.generator": "Generator",
  "tasksList.moduleSwitcher.learningExercise": "Learning Exercise",
  "tasksList.moduleSwitcher.practiceExercise": "Practice Exercise",
  "tasksList.moduleSwitcher.concept": "Concept",
  "tasksList.moduleSwitcher.testRunner": "Test Runner",
  "tasksList.moduleSwitcher.representer": "Representer",
  "tasksList.moduleSwitcher.analyzer": "Analyzer",
  "tasksList.moduleSwitcher.allModules": "All modules",
  "tasksList.sorter.sortByMostRecent": "Sort by most recent",
  "tasksList.sorter.sortByOldest": "Sort by oldest",
  "tasksList.sorter.sortByTrack": "Sort by track",
  "tasksList.task.new": "New"
}

// modified_files
// === file: ../components/contributing/TasksList.tsx ===
// i18n-key-prefix: tasksList
// i18n-namespace: components/contributing
import React, { useCallback } from 'react'
import pluralize from 'pluralize'
import { Pagination } from '@/components/common'
import { useDeepMemo } from '@/hooks/use-deep-memo'
import {
  usePaginatedRequestQuery,
  type Request as BaseRequest,
} from '@/hooks/request-query'
import { useHistory, removeEmpty } from '@/hooks/use-history'
import { useList } from '@/hooks/use-list'
import { ResultsZone } from '@/components/ResultsZone'
import { FetchingBoundary } from '@/components/FetchingBoundary'
import { TrackSelect } from '@/components/common/TrackSelect'
import {
  ActionSwitcher,
  TypeSwitcher,
  SizeSwitcher,
  KnowledgeSwitcher,
  ModuleSwitcher,
  ResetButton,
  Sorter,
  Task,
} from './tasks-list'
import type {
  Task as TaskProps,
  Track,
  TaskAction,
  TaskType,
  TaskSize,
  TaskKnowledge,
  TaskModule,
  PaginatedResult,
} from '@/components/types'
import { scrollToTop } from '@/utils/scroll-to-top'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const DEFAULT_ERROR = new Error('Unable to pull tasks')
const DEFAULT_ORDER = 'newest'

type QueryValueTypes = {
  trackSlug: string
  actions: TaskAction[]
  types: TaskType[]
  sizes: TaskSize[]
  knowledge: TaskKnowledge[]
  areas: TaskModule[]
}
export type TasksListOrder = 'newest' | 'oldest' | 'track'

export type Request = BaseRequest<{
  page: number
  actions: string[]
  knowledge: string[]
  areas: string[]
  sizes: string[]
  types: string[]
  repoUrl: string
  trackSlug: string
  order: string
}>

export default function TasksList({
  request: initialRequest,
  tracks,
}: {
  request: Request
  tracks: readonly Track[]
}): JSX.Element {
  const { t } = useAppTranslation('components/contributing')
  const { request, setPage, setQuery, setOrder } = useList(initialRequest)
  const {
    status,
    data: resolvedData,
    isFetching,
    error,
  } = usePaginatedRequestQuery<PaginatedResult<TaskProps[]>, Error | Response>(
    ['contributing-tasks', request.endpoint, request.query],
    request
  )

  const track =
    tracks.find((t) => t.slug === request.query.trackSlug) || tracks[0]
  const isFiltering =
    request.query.trackSlug ||
    request.query.actions.length > 0 ||
    request.query.types.length > 0 ||
    request.query.sizes.length > 0 ||
    request.query.knowledge.length > 0 ||
    request.query.areas.length > 0

  const requestQuery = useDeepMemo(request.query)

  const setQueryValue = useCallback(
    <K extends keyof QueryValueTypes>(key: K, value: QueryValueTypes[K]) => {
      setQuery({ ...requestQuery, [key]: value, page: undefined })
    },
    [requestQuery, setQuery]
  )

  const handleReset = useCallback(() => {
    setQuery({
      ...request.query,
      page: undefined,
      trackSlug: '',
      actions: [],
      types: [],
      sizes: [],
      knowledge: [],
      areas: [],
    })
  }, [request.query, setQuery])

  useHistory({ pushOn: removeEmpty(request.query) })

  return (
    <div data-scroll-top-anchor="tasks-list" className="lg-container container">
      <div className="c-search-bar">
        <TrackSelect
          tracks={tracks}
          value={track}
          setValue={(track) => setQueryValue('trackSlug', track.slug)}
          size="multi"
        />
        <ActionSwitcher
          value={request.query.actions}
          setValue={(actions) => setQueryValue('actions', actions)}
        />
        <TypeSwitcher
          value={request.query.types}
          setValue={(types) => setQueryValue('types', types)}
        />
        <SizeSwitcher
          value={request.query.sizes}
          setValue={(sizes) => setQueryValue('sizes', sizes)}
        />
        <KnowledgeSwitcher
          value={request.query.knowledge}
          setValue={(knowledge) => setQueryValue('knowledge', knowledge)}
        />
        <ModuleSwitcher
          value={request.query.areas}
          setValue={(modules) => setQueryValue('areas', modules)}
        />
      </div>
      <ResultsZone isFetching={isFetching}>
        <FetchingBoundary
          status={status}
          error={error}
          defaultError={DEFAULT_ERROR}
        >
          {resolvedData ? (
            <React.Fragment>
              <header className="main-header c-search-bar">
                <h2>
                  <strong className="block md:inline">
                    {t('tasksList.showingTasks', {
                      totalCount: resolvedData.meta.totalCount,
                      task: pluralize('task', resolvedData.meta.totalCount),
                    })}
                  </strong>
                  <span className="hidden md:inline mr-8">/</span>
                  {t('tasksList.outOfPossibleTasks', {
                    unscopedTotal: resolvedData.meta.unscopedTotal,
                    unscopedTask: pluralize(
                      'task',
                      resolvedData.meta.unscopedTotal
                    ),
                  })}
                </h2>
                {isFiltering ? (
                  <ResetButton onClick={handleReset} />
                ) : null}
                <Sorter
                  value={request.query.order || DEFAULT_ORDER}
                  setValue={setOrder}
                />
              </header>
              <div className="tasks">
                {resolvedData.results.map((task) => (
                  <Task task={task} key={task.uuid} />
                ))}
                <Pagination
                  disabled={resolvedData === undefined}
                  current={request.query.page || 1}
                  total={resolvedData.meta.totalPages}
                  setPage={(p) => {
                    setPage(p)
                    scrollToTop('tasks-list', 32)
                  }}
                />
              </div>
            </React.Fragment>
          ) : null}
        </FetchingBoundary>
      </ResultsZone>
      }
    </div>
  )
}

// === end file ===

// === file: ../components/contributing/contributors-list/CategorySwitcher.tsx ===
// i18n-key-prefix: contributorsList.categorySwitcher
// i18n-namespace: components/contributing
import React from 'react'
import { SingleSelect } from '@/components/common/SingleSelect'
import { Category } from '../ContributorsList'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const OptionComponent = ({
  option: category,
}: {
  option: Category
}): JSX.Element => {
  const { t } = useAppTranslation('components/contributing')
  switch (category) {
    case 'authoring':
      return (
        <React.Fragment>
          <div className="info">
            <div className="title">{t('contributorsList.categorySwitcher.authoring')}</div>
          </div>
        </React.Fragment>
      )
    case 'building':
      return (
        <React.Fragment>
          <div className="info">
            <div className="title">{t('contributorsList.categorySwitcher.building')}</div>
          </div>
        </React.Fragment>
      )
    case 'maintaining':
      return (
        <React.Fragment>
          <div className="info">
            <div className="title">{t('contributorsList.categorySwitcher.maintaining')}</div>
          </div>
        </React.Fragment>
      )
    case 'mentoring':
      return (
        <React.Fragment>
          <div className="info">
            <div className="title">{t('contributorsList.categorySwitcher.mentoring')}</div>
          </div>
        </React.Fragment>
      )
    case undefined:
      return (
        <React.Fragment>
          <div className="info">
            <div className="title">{t('contributorsList.categorySwitcher.allCategories')}</div>
          </div>
        </React.Fragment>
      )
  }
}

const SelectedComponent = ({ option: category }: { option: Category }) => {
  const { t } = useAppTranslation('components/contributing')
  switch (category) {
    case 'authoring':
      return <>{t('contributorsList.categorySwitcher.authoring')}</>
    case 'building':
      return <>{t('contributorsList.categorySwitcher.building')}</>
    case 'mentoring':
      return <>{t('contributorsList.categorySwitcher.mentoring')}</>
    case 'maintaining':
      return <>{t('contributorsList.categorySwitcher.maintaining')}</>
    case undefined:
      return <>{t('contributorsList.categorySwitcher.allCategories')}</>
  }
}
export const CategorySwitcher = ({
  value,
  setValue,
}: {
  value: Category
  setValue: (value: Category) => void
}): JSX.Element => {
  return (
    <SingleSelect<Category>
      options={[undefined, 'building', 'authoring', 'maintaining', 'mentoring']}
      value={value}
      setValue={setValue}
      SelectedComponent={SelectedComponent}
      OptionComponent={OptionComponent}
    />
  )
}

// === end file ===

// === file: ../components/contributing/contributors-list/ContributorRow.tsx ===
// i18n-key-prefix: contributorsList.contributorRow
// i18n-namespace: components/contributing
import React from 'react'
import { Contributor } from '../../types'
import {
  Avatar,
  GraphicalIcon,
  HandleWithFlair,
  Reputation,
} from '../../common'

export const ContributorRow = ({
  contributor,
}: {
  contributor: Contributor
}): JSX.Element => {
  return (
    <RowWrapper profile={contributor.links.profile}>
      <div className="rank hidden md:block text-16 md:text-14">
        #{contributor.rank}
      </div>
      <div className="flex-grow flex md:items-center">
        <Avatar src={contributor.avatarUrl} handle={contributor.handle} />
        <div className="flex-grow flex flex-col md:flex-row items-start md:items-center">
          <div className="info mb-4 md:mb-0">
            <h3 className="mb-4 md:mb-0">
              <HandleWithFlair
                handle={contributor.handle}
                flair={contributor.flair}
              />
              <span className="md:hidden text-textColor6 ml-8 text-14">
                #{contributor.rank}
              </span>
            </h3>
            <p>{contributor.activity}</p>
          </div>
          <Reputation value={contributor.reputation} type="primary" />
        </div>
      </div>
    </RowWrapper>
  )
}

const RowWrapper = ({
  profile,
  children,
}: React.PropsWithChildren<{ profile?: string }>) => {
  return profile ? (
    <a className="contributor" href={profile}>
      {children}
      <GraphicalIcon
        icon="chevron-right"
        className="action-icon hidden lg:block"
      />
    </a>
  ) : (
    <div className="contributor">
      {children}
      <GraphicalIcon
        icon="transparent"
        className="action-icon hidden lg:block"
      />
    </div>
  )
}

// === end file ===

// === file: ../components/contributing/contributors-list/PeriodButton.tsx ===
// i18n-key-prefix: contributorsList.periodButton
// i18n-namespace: components/contributing
import React, { useCallback } from 'react'
import { Period } from '../ContributorsList'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const PeriodButton = ({
  period,
  current,
  setPeriod,
  children,
}: React.PropsWithChildren<{
  period: Period
  current: Period
  setPeriod: (period: Period) => void
}>): JSX.Element => {
  const { t } = useAppTranslation('components/contributing')
  const classNames = ['c-tab-2', period === current ? 'selected' : ''].filter(
    (className) => className.length > 0
  )

  const handleClick = useCallback(() => {
    setPeriod(period)
  }, [period, setPeriod])

  return (
    <button className={classNames.join(' ')} onClick={handleClick}>
      {children}
    </button>
  )
}

// === end file ===

// === file: ../components/contributing/tasks-list/ActionSwitcher.tsx ===
// i18n-key-prefix: tasksList.actionSwitcher
// i18n-namespace: components/contributing
import React from 'react'
import { TaskAction } from '../../types'
import { MultipleSelect } from '../../common/MultipleSelect'
import { GraphicalIcon } from '../../common'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const ActionOption = ({
  option: action,
}: {
  option: TaskAction
}): JSX.Element => {
  const { t } = useAppTranslation('components/contributing')
  switch (action) {
    case 'create':
      return (
        <React.Fragment>
          <GraphicalIcon icon="task-action-create" className="task-icon" />
          <div className="info">
            <div className="title">{t('tasksList.actionSwitcher.create')}</div>
            <div className="description">Work on something from scratch</div>
          </div>
        </React.Fragment>
      )
    case 'sync':
      return (
        <React.Fragment>
          <GraphicalIcon icon="task-action-sync" className="task-icon" />
          <div className="info">
            <div className="title">{t('tasksList.actionSwitcher.sync')}</div>
            <div className="description">
              Sync content with its latest version
            </div>
          </div>
        </React.Fragment>
      )
    case 'improve':
      return (
        <React.Fragment>
          <GraphicalIcon icon="task-action-improve" className="task-icon" />
          <div className="info">
            <div className="title">{t('tasksList.actionSwitcher.improve')}</div>
            <div className="description">
              Improve existing functionality / content
            </div>
          </div>
        </React.Fragment>
      )
    case 'proofread':
      return (
        <React.Fragment>
          <GraphicalIcon icon="task-action-proofread" className="task-icon" />
          <div className="info">
            <div className="title">{t('tasksList.actionSwitcher.proofread')}</div>
            <div className="description">Proofread text</div>
          </div>
        </React.Fragment>
      )
    case 'fix':
      return (
        <React.Fragment>
          <GraphicalIcon icon="task-action-fix" className="task-icon" />
          <div className="info">
            <div className="title">{t('tasksList.actionSwitcher.fix')}</div>
            <div className="description">Fix an issue</div>
          </div>
        </React.Fragment>
      )
  }
}

const SelectedComponent = ({ value: action }: { value: TaskAction[] }) => {
  const { t } = useAppTranslation('components/contributing')
  if (action.length > 1) {
    return <>Multiple</>
  }

  switch (action[0]) {
    case 'create':
      return <>{t('tasksList.actionSwitcher.create')}</>
    case 'sync':
      return <>{t('tasksList.actionSwitcher.sync')}</>
    case 'improve':
      return <>{t('tasksList.actionSwitcher.improve')}</>
    case 'proofread':
      return <>{t('tasksList.actionSwitcher.proofread')}</>
    case 'fix':
      return <>{t('tasksList.actionSwitcher.fix')}</>
    case undefined:
      return <>{t('tasksList.actionSwitcher.all')}</>
  }
}

const ResetComponent = () => {
  const { t } = useAppTranslation('components/contributing')
  return (
    <React.Fragment>
      <GraphicalIcon icon="task-action" className="task-icon" />
      <div className="info">
        <div className="title">{t('tasksList.actionSwitcher.all')}</div>
      </div>
    </React.Fragment>
  )
}

export const ActionSwitcher = ({
  value,
  setValue,
}: {
  value: TaskAction[]
  setValue: (action: TaskAction[]) => void
}): JSX.Element => {
  return (
    <MultipleSelect<TaskAction>
      options={['create', 'fix', 'improve', 'proofread', 'sync']}
      value={value}
      setValue={setValue}
      label="Action"
      SelectedComponent={SelectedComponent}
      ResetComponent={ResetComponent}
      OptionComponent={ActionOption}
      className="action-switcher"
    />
  )
}

// === end file ===

// === file: ../components/contributing/tasks-list/Sorter.tsx ===
// i18n-key-prefix: tasksList.sorter
// i18n-namespace: components/contributing
import React from 'react'
import { TasksListOrder } from '../TasksList'
import { SingleSelect } from '../../common/SingleSelect'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const OptionComponent = ({
  option: order,
}: {
  option: TasksListOrder
}): JSX.Element => {
  const { t } = useAppTranslation('components/contributing')
  switch (order) {
    case 'newest':
      return <div>{t('tasksList.sorter.sortByMostRecent')}</div>
    case 'oldest':
      return <div>{t('tasksList.sorter.sortByOldest')}</div>
    case 'track':
      return <div>{t('tasksList.sorter.sortByTrack')}</div>
  }
}

export const Sorter = ({
  value,
  setValue,
}: {
  value: TasksListOrder
  setValue: (value: TasksListOrder) => void
}): JSX.Element => {
  return (
    <SingleSelect<TasksListOrder>
      options={['newest', 'oldest', 'track']}
      value={value}
      setValue={setValue}
      SelectedComponent={OptionComponent}
      OptionComponent={OptionComponent}
    />
  )
}

// === end file ===

// === file: ../components/contributing/tasks-list/Task.tsx ===
// i18n-key-prefix: tasksList.task
// i18n-namespace: components/contributing
import React from 'react'
import { Task as TaskProps } from '../../types'
import { ActionIcon } from './task/ActionIcon'
import { NewTag } from './task/NewTag'
import { TrackType } from './task/TrackType'
import { KnowledgeTag } from './task/KnowledgeTag'
import { SizeTag } from './task/SizeTag'
import { ModuleTag } from './task/ModuleTag'
import { GraphicalIcon } from '../../common'
import { ExercismTippy } from '../../misc/ExercismTippy'
import { TaskTooltip } from '../../tooltips/TaskTooltip'

export const Task = ({ task }: { task: TaskProps }): JSX.Element => {
  return (
    <ExercismTippy content={<TaskTooltip task={task} />}>
      <a
        href={task.links.githubUrl}
        className="task block md:flex"
        target="_blank"
        rel="noreferrer"
      >
        <div className="flex items-center mb-16 md:mb-0">
          <ActionIcon action={task.tags.action} />
          <div className="info">
            <div className="heading">
              <h3>{task.title}</h3>
              {task.isNew ? <NewTag /> : null}
            </div>
            <TrackType track={task.track} type={task.tags.type} />
          </div>
        </div>
        <div className="tags">
          <KnowledgeTag knowledge={task.tags.knowledge} />
          <SizeTag size={task.tags.size} />
          <ModuleTag module={task.tags.module} />
        </div>
        <GraphicalIcon
          icon="external-link"
          className="external-link hidden lg:block"
        />
      </a>
    </ExercismTippy>
  )
}

// === end file ===

// === file: ../components/contributing/tasks-list/KnowledgeSwitcher.tsx ===
// i18n-key-prefix: tasksList.knowledgeSwitcher
// i18n-namespace: components/contributing
import React from 'react'
import { TaskKnowledge } from '@/components/types'
import { GraphicalIcon } from '@/components/common'
import { MultipleSelect } from '@/components/common/MultipleSelect'
import { KnowledgeIcon } from './task/KnowledgeIcon'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const KnowledgeOption = ({
  option: knowledge,
}: {
  option: TaskKnowledge
}): JSX.Element => {
  const { t } = useAppTranslation('components/contributing')
  switch (knowledge) {
    case 'none':
      return (
        <React.Fragment>
          <div className="knowledge-tag">
            <KnowledgeIcon knowledge={knowledge} />
          </div>
          <div className="info">
            <div className="title">{t('tasksList.knowledgeSwitcher.none')}</div>
            <div className="description">
              No existing Exercism knowledge required
            </div>
          </div>
        </React.Fragment>
      )
    case 'elementary':
      return (
        <React.Fragment>
          <div className="knowledge-tag">
            <KnowledgeIcon knowledge={knowledge} />
          </div>
          <div className="info">
            <div className="title">{t('tasksList.knowledgeSwitcher.elementary')}</div>
            <div className="description">
              Little Exercism knowledge required
            </div>
          </div>
        </React.Fragment>
      )
    case 'intermediate':
      return (
        <React.Fragment>
          <div className="knowledge-tag">
            <KnowledgeIcon knowledge={knowledge} />
          </div>
          <div className="info">
            <div className="title">{t('tasksList.knowledgeSwitcher.intermediate')}</div>
            <div className="description">
              Quite a bit of Exercism knowledge required
            </div>
          </div>
        </React.Fragment>
      )
    case 'advanced':
      return (
        <React.Fragment>
          <div className="knowledge-tag">
            <KnowledgeIcon knowledge={knowledge} />
          </div>
          <div className="info">
            <div className="title">{t('tasksList.knowledgeSwitcher.advanced')}</div>
            <div className="description">
              Comprehensive Exercism knowledge required
            </div>
          </div>
        </React.Fragment>
      )
  }
}

const SelectedComponent = ({
  value: knowledge,
}: {
  value: TaskKnowledge[]
}) => {
  const { t } = useAppTranslation('components/contributing')
  if (knowledge.length > 1) {
    return <>Multiple</>
  }

  switch (knowledge[0]) {
    case 'none':
      return <>{t('tasksList.knowledgeSwitcher.none')}</>
    case 'elementary':
      return <>{t('tasksList.knowledgeSwitcher.elementary')}</>
    case 'intermediate':
      return <>{t('tasksList.knowledgeSwitcher.intermediate')}</>
    case 'advanced':
      return <>{t('tasksList.knowledgeSwitcher.advanced')}</>
    case undefined:
      return <>{t('tasksList.knowledgeSwitcher.anyKnowledge')}</>
  }
}

const ResetComponent = () => {
  const { t } = useAppTranslation('components/contributing')
  return (
    <React.Fragment>
      <GraphicalIcon
        icon="task-knowledge"
        className="task-icon knowledge-reset"
      />
      <div className="info">
        <div className="title">{t('tasksList.knowledgeSwitcher.anyKnowledge')}</div>
      </div>
    </React.Fragment>
  )
}

export const KnowledgeSwitcher = ({
  value,
  setValue,
}: {
  value: TaskKnowledge[]
  setValue: (knowledge: TaskKnowledge[]) => void
}): JSX.Element => {
  return (
    <MultipleSelect<TaskKnowledge>
      options={['none', 'elementary', 'intermediate', 'advanced']}
      value={value}
      setValue={setValue}
      label="Knowledge"
      SelectedComponent={SelectedComponent}
      ResetComponent={ResetComponent}
      OptionComponent={KnowledgeOption}
      className="knowledge-switcher"
    />
  )
}

// === end file ===

// === file: ../components/contributing/tasks-list/TypeSwitcher.tsx ===
// i18n-key-prefix: tasksList.typeSwitcher
// i18n-namespace: components/contributing
import React from 'react'
import { TaskType } from '../../types'
import { MultipleSelect } from '../../common/MultipleSelect'
import { GraphicalIcon } from '../../common'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const TypeOption = ({ option: type }: { option: TaskType }): JSX.Element => {
  const { t } = useAppTranslation('components/contributing')
  switch (type) {
    case 'docs':
      return (
        <React.Fragment>
          <GraphicalIcon icon="task-type-docs" className="task-icon" />
          <div className="info">
            <div className="title">{t('tasksList.typeSwitcher.docs')}</div>
            <div className="description">Help build Exercism's docs</div>
          </div>
        </React.Fragment>
      )
    case 'ci':
      return (
        <React.Fragment>
          <GraphicalIcon icon="task-type-ci" className="task-icon" />
          <div className="info">
            <div className="title">{t('tasksList.typeSwitcher.ci')}</div>
            <div className="description">
              Automation and continuous integration
            </div>
          </div>
        </React.Fragment>
      )
    case 'docker':
      return (
        <React.Fragment>
          <GraphicalIcon icon="task-type-docker" className="task-icon" />
          <div className="info">
            <div className="title">{t('tasksList.typeSwitcher.docker')}</div>
            <div className="description">Help improve our Dockerfiles</div>
          </div>
        </React.Fragment>
      )
    case 'coding':
      return (
        <React.Fragment>
          <GraphicalIcon icon="task-type-coding" className="task-icon" />
          <div className="info">
            <div className="title">{t('tasksList.typeSwitcher.coding')}</div>
            <div className="description">Write production code</div>
          </div>
        </React.Fragment>
      )
    case 'content':
      return (
        <React.Fragment>
          <GraphicalIcon icon="task-type-content" className="task-icon" />
          <div className="info">
            <div className="title">{t('tasksList.typeSwitcher.content')}</div>
            <div className="description">Develop exercises and concepts</div>
          </div>
        </React.Fragment>
      )
  }
}

const SelectedComponent = ({ value: action }: { value: TaskType[] }) => {
  const { t } = useAppTranslation('components/contributing')
  if (action.length > 1) {
    return <>Multiple</>
  }

  switch (action[0]) {
    case 'docs':
      return <>{t('tasksList.typeSwitcher.docs')}</>
    case 'ci':
      return <>{t('tasksList.typeSwitcher.ci')}</>
    case 'coding':
      return <>{t('tasksList.typeSwitcher.coding')}</>
    case 'docker':
      return <>{t('tasksList.typeSwitcher.docker')}</>
    case 'content':
      return <>{t('tasksList.typeSwitcher.content')}</>
    case undefined:
      return <>{t('tasksList.typeSwitcher.allTypes')}</>
  }
}

const ResetComponent = () => {
  const { t } = useAppTranslation('components/contributing')
  return (
    <React.Fragment>
      <GraphicalIcon icon="task-type" className="task-icon" />
      <div className="info">
        <div className="title">{t('tasksList.typeSwitcher.allTypes')}</div>
      </div>
    </React.Fragment>
  )
}

export const TypeSwitcher = ({
  value,
  setValue,
}: {
  value: TaskType[]
  setValue: (types: TaskType[]) => void
}): JSX.Element => {
  return (
    <MultipleSelect<TaskType>
      options={['docs', 'ci', 'coding', 'docker', 'content']}
      value={value}
      setValue={setValue}
      label="Type"
      SelectedComponent={SelectedComponent}
      ResetComponent={ResetComponent}
      OptionComponent={TypeOption}
      className="type-switcher"
    />
  )
}

// === end file ===

// === file: ../components/contributing/tasks-list/ResetButton.tsx ===
// i18n-key-prefix: tasksList.resetButton
// i18n-namespace: components/contributing
import React from 'react'
import { GraphicalIcon } from '../../common'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const ResetButton = ({
  onClick,
}: {
  onClick: () => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/contributing')
  return (
    <button
      type="button"
      onClick={onClick}
      className="btn-m btn-link reset-btn"
    >
      <GraphicalIcon icon="reset" />
      <span>{t('tasksList.resetFilters')}</span>
    </button>
  )
}

// === end file ===

// === file: ../components/contributing/tasks-list/ModuleSwitcher.tsx ===
// i18n-key-prefix: tasksList.moduleSwitcher
// i18n-namespace: components/contributing
import React from 'react'
import { TaskModule } from '@/components/types'
import { GraphicalIcon } from '@/components/common'
import { MultipleSelect } from '@/components/common/MultipleSelect'
import { ModuleTag } from './task/ModuleTag'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const ModuleOption = ({
  option: module,
}: {
  option: TaskModule
}): JSX.Element => {
  const { t } = useAppTranslation('components/contributing')
  switch (module) {
    case '