```ts
// i18n
export default {
  "transactionForm.orSpecifyCustomAmount": "Or specify a custom amount:",
  "subscriptionForm.youReCurrentlyDonatingEachMonthToExercism": "You&apos;re currently donating {{amount}} each month to Exercism.",
  "subscriptionForm.thankYou": "Thank you!",
  "subscriptionForm.regularDonationsLikeYoursAllowUsToAnticipateOurCashflowAndMakeResponsibleDecisionsAboutHiringAndGrowingExercism": "Regular donations like yours allow us to anticipate our cashflow and make responsible decisions about hiring and growing Exercism.",
  "externalDonationManagement.yourRegularDonationIsManagedByToModifyOrCancelYourRecurringDonationPleaseUseDashboard": "Your regular donation is managed by {{displayName}}. To modify or cancel your recurring donation, please use <donationDashboardLink/> Dashboard.",
  "existingSubscriptionNotice.youAlreadyDonatePerMonthToExercismThankYou": "You already donate {{amount}} per month to Exercism. Thank you!",
  "existingSubscriptionNotice.toChangeOrManageThisGoToDonationSettings": "To change or manage this go to <donationSettingsLink/>.",
  "existingSubscriptionNotice.extra": "Extra",
  "existingSubscriptionNotice.oneTimeDonations": "one-time donations",
  "existingSubscriptionNotice.areStillGratefullyReceived": "are still gratefully received!",
  "stripeForm.yourEmailAddressForReceipts": "Your email address (for receipts):",
  "stripeForm.dueToFrequent": "Due to frequent",
  "stripeForm.cardTestingAttacks": "<cardTestingAttacksLink>card testing attacks</cardTestingAttacksLink>",
  "stripeForm.weNeedToCheckYouAreNotABotBeforeWeCanAcceptADonation": ", we need to check you are not a bot before we can accept a donation.",
  "formWithModal.youVeDonatedSuccessfullyThankYou": "You&apos;ve donated {{amount}} successfully - thank you 💙",
  "formWithModal.weTrulyAppreciateYourSupportExercismWouldNotBePossibleWithoutAwesomeContributorsLikeYourselfYouLlBeSentAnEmailShortlyWithYourDonationConfirmationAndReceipt": "We truly appreciate your support. Exercism would not be possible without awesome contributors like yourself. You&apos;ll be sent an email shortly with your donation confirmation and receipt.",
  "formWithModal.youVeEarnedTheBadge": "You&apos;ve earned the",
  "formWithModal.supporter": " Supporter",
  "formWithModal.badge": " badge!",
  "formWithModal.happyToHelpImDoneHere": "Happy to help! I&apos;m done here 👍",
  "footerForm.customAmount": "Custom amount",
  "footerForm.continue": "Continue",
  "form.monthlyRecurring": "Monthly Recurring",
  "form.oneOff": "One-off",
  "stripeForm.progressing": "Progressing",
  "stripeForm.eligibleForInsidersAccess": "Eligible for Insiders Access",
  "stripeForm.defaultError": "Unable to fetch subscription information"
}

// modified_files
// === file: ../components/donations/TransactionForm.tsx ===
import React, { useState, useCallback } from 'react'
import currency from 'currency.js'
import { AmountButton } from './donation-form/AmountButton'
import { CustomAmountInput } from './donation-form/CustomAmountInput'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type Props = {
  amount: currency
  presetAmounts: currency[]
  onAmountChange: (value: currency) => void
}

export const TransactionForm = ({
  amount: currentAmount,
  presetAmounts,
  onAmountChange,
  children,
}: React.PropsWithChildren<Props>): JSX.Element => {
  const { t } = useAppTranslation('components/donations')
  const [customAmount, setCustomAmount] = useState(
    presetAmounts.map((a) => a.value).includes(currentAmount.value)
      ? ''
      : currentAmount
  )

  const handleAmountButtonChange = useCallback(
    (amount) => {
      setCustomAmount('')
      onAmountChange(amount)
    },
    [onAmountChange]
  )

  const handleCustomAmountChange = useCallback(
    (amount) => {
      if (isNaN(amount.value)) {
        setCustomAmount('')
        onAmountChange(amount)

        return
      }

      setCustomAmount(amount)
      onAmountChange(amount)
    },
    [onAmountChange]
  )

  return (
    <React.Fragment>
      <div>
        {children}
        <div className="amounts">
          <div className="preset-amounts">
            {presetAmounts.map((amount) => (
              <AmountButton
                key={amount.value}
                value={amount}
                onClick={handleAmountButtonChange}
                selected={
                  customAmount === '' && amount.value === currentAmount.value
                }
                className="btn-l btn-enhanced"
              />
            ))}
          </div>

          <h3>{t('transactionForm.orSpecifyCustomAmount')}</h3>
          <CustomAmountInput
            onChange={handleCustomAmountChange}
            selected={customAmount !== ''}
            placeholder="Specify amount"
            value={customAmount}
          />
        </div>
      </div>
    </React.Fragment>
  )
}

// === end file ===

// === file: ../components/donations/SubscriptionForm.tsx ===
import React from 'react'
import currency from 'currency.js'
import { FormOptions } from './subscription-form/FormOptions'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type Links = {
  cancel: string
  update: string
}

export type Provider = 'github' | 'paypal' | 'stripe'
type ProviderInfoEntry = Record<'displayName' | 'updateLink', string>
type ProviderInfoKeys = Exclude<Provider, 'stripe'>
type ProviderInfo = Record<ProviderInfoKeys, ProviderInfoEntry>

export const PROVIDER_INFO: ProviderInfo = {
  github: {
    displayName: 'GitHub Sponsors',
    updateLink: 'https://github.com/settings/billing',
  },
  paypal: {
    displayName: 'PayPal',
    updateLink: 'https://www.paypal.com/myaccount/autopay/',
  },
}

export type SubscriptionFormProps = {
  amount: currency
  links: Links
  provider: Provider
}

export default ({
  amount,
  links,
  provider,
}: SubscriptionFormProps): JSX.Element => {
  const { t } = useAppTranslation('components/donations')
  return (
    <React.Fragment>
      <h2>
        {t('subscriptionForm.youReCurrentlyDonatingEachMonthToExercism', {
          amount: amount.format(),
        })}
      </h2>
      <p className="text-p-base">
        <strong>{t('subscriptionForm.thankYou')}</strong>{' '}
        {t(
          'subscriptionForm.regularDonationsLikeYoursAllowUsToAnticipateOurCashflowAndMakeResponsibleDecisionsAboutHiringAndGrowingExercism'
        )}
      </p>
      {provider === 'stripe' ? (
        <FormOptions amount={amount} links={links} />
      ) : (
        <ExternalDonationManagement
          displayName={PROVIDER_INFO[provider].displayName}
          updateLink={PROVIDER_INFO[provider].updateLink}
        />
      )}
    </React.Fragment>
  )
}

export function ExternalDonationManagement({
  displayName,
  updateLink,
}: ProviderInfoEntry): JSX.Element {
  const { t } = useAppTranslation('components/donations')
  return (
    <p className="text-p-base">
      {t('externalDonationManagement.yourRegularDonationIsManagedByToModifyOrCancelYourRecurringDonationPleaseUseDashboard', {
        displayName: displayName,
        donationDashboardLink: (
          <a className="text-prominentLinkColor" href={updateLink}>
            {displayName} Dashboard.
          </a>
        ),
      })}
    </p>
  )
}

// === end file ===

// === file: ../components/donations/ExistingSubscriptionNotice.tsx ===
import React from 'react'
import currency from 'currency.js'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type Links = {
  settings: string
}

export const ExistingSubscriptionNotice = ({
  amount,
  onExtraDonation,
  links,
}: {
  amount: currency
  onExtraDonation: () => void
  links: Links
}): JSX.Element => {
  const { t } = useAppTranslation('components/donations')
  return (
    <React.Fragment>
      <div className="existing-subscription">
        <strong>
          {t('existingSubscriptionNotice.youAlreadyDonatePerMonthToExercismThankYou', {
            amount: amount.format(),
          })}
        </strong>{' '}
        {t('existingSubscriptionNotice.toChangeOrManageThisGoToDonationSettings', {
          donationSettingsLink: <a href={links.settings}>Donation Settings</a>,
        })}
      </div>
      <div className="extra-cta">
        {t('existingSubscriptionNotice.extra')}{' '}
        <button type="button" onClick={onExtraDonation}>
          {t('existingSubscriptionNotice.oneTimeDonations')}
        </button>{' '}
        {t('existingSubscriptionNotice.areStillGratefullyReceived')}!
      </div>
      <div className="form-cover" />
    </React.Fragment>
  )
}

// === end file ===

// === file: ../components/donations/StripeForm.tsx ===
import React from 'react'
import ReCAPTCHA from 'react-google-recaptcha'
import currency from 'currency.js'
import { PaymentElement } from '@stripe/react-stripe-js'
import { Icon } from '@/components/common'
import { PaymentIntentType, useStripeForm } from './stripe-form/useStripeForm'
import { generateStripeButtonText } from './stripe-form/utils'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export type StripeFormProps = {
  paymentIntentType: PaymentIntentType
  onSuccess: (type: PaymentIntentType, amount: currency) => void
  onProcessing?: () => void
  onSettled?: () => void
  userSignedIn: boolean
  captchaRequired: boolean
  recaptchaSiteKey?: string
  amount: currency
  submitButtonDisabled?: boolean
  confirmParamsReturnUrl: string
}

export function StripeForm({
  paymentIntentType,
  amount,
  onSuccess,
  onProcessing = () => null,
  userSignedIn,
  recaptchaSiteKey,
  captchaRequired,
  submitButtonDisabled = false,
  confirmParamsReturnUrl,
  onSettled = () => null,
}: StripeFormProps): JSX.Element {
  const { t } = useAppTranslation('components/donations')
  const {
    cardValid,
    error,
    email,
    processing,
    notARobot,
    succeeded,
    handleCaptchaFailure,
    handleCaptchaSuccess,
    handleEmailChange,
    handlePaymentElementChange,
    handlePaymentSubmit,
  } = useStripeForm({
    captchaRequired,
    amount,
    confirmParamsReturnUrl,
    onSuccess,
    paymentIntentType,
    onProcessing,
    onSettled,
  })

  const paymentElementOptions = {
    layout: {
      type: 'accordion',
      defaultCollapsed: false,
      radios: true,
      spacedAccordionItems: false,
    },
  }

  return (
    <form data-turbo="false" onSubmit={handlePaymentSubmit}>
      {!userSignedIn ? (
        <div className="email-container">
          <label htmlFor="email">{t('stripeForm.yourEmailAddressForReceipts')}:</label>
          <input
            type="email"
            id="email"
            value={email}
            onChange={handleEmailChange}
          />
        </div>
      ) : null}
      {captchaRequired && recaptchaSiteKey ? (
        <div className="flex items-center mb-16">
          <ReCAPTCHA
            sitekey={recaptchaSiteKey}
            className="g-recaptcha"
            onChange={handleCaptchaSuccess}
            onExpired={handleCaptchaFailure}
            onErrored={handleCaptchaFailure}
          />
          <div className="ml-16 text-textColor6 leading-tight">
            {t('stripeForm.dueToFrequent')}{' '}
            <a
              href="https://stripe.com/docs/disputes/prevention/card-testing"
              target="_blank"
              rel="noreferrer"
              className="underline"
            >
              {t('stripeForm.cardTestingAttacks')}
            </a>
            {t('stripeForm.weNeedToCheckYouAreNotABotBeforeWeCanAcceptADonation')}
          </div>
        </div>
      ) : null}

      <PaymentElement
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        options={paymentElementOptions}
        onChange={handlePaymentElementChange}
      />
      <button
        className="btn-primary btn-m mt-16"
        type="submit"
        disabled={
          !notARobot ||
          processing ||
          !cardValid ||
          succeeded ||
          (!userSignedIn && email.length === 0) ||
          submitButtonDisabled
        }
      >
        {processing ? (
          <Icon icon="spinner" alt="Progressing" className="animate-spin" />
        ) : null}
        <span>{generateStripeButtonText(paymentIntentType, amount)}</span>
      </button>

      {error && (
        <div className="c-donation-card-error" role="alert">
          {error}
        </div>
      )}
    </form>
  )
}

// === end file ===

// === file: ../components/donations/FormWithModal.tsx ===
import React, { useState, useCallback } from 'react'
import currency from 'currency.js'
import { Request } from '@/hooks/request-query'
import { Form, FormAmount, StripeFormLinks } from './Form'
import SuccessModal from './SuccessModal'
import { PaymentIntentType } from './stripe-form/useStripeForm'

type FormWithModalProps = {
  request: Request
  userSignedIn: boolean
  links: StripeFormLinks
  captchaRequired: boolean
  recaptchaSiteKey: string
  defaultAmount?: Partial<FormAmount>
}

export default function FormWithModal({
  request,
  userSignedIn,
  links,
  captchaRequired,
  recaptchaSiteKey,
  defaultAmount,
}: FormWithModalProps): JSX.Element {
  const [paymentMade, setPaymentMade] = useState(false)

  // TODO: Remove this as this seems to be unused
  const [, setPaymentType] = useState<PaymentIntentType | undefined>()
  const [paymentAmount, setPaymentAmount] = useState<currency | null>(null)

  const handleSuccess = useCallback(
    (type: PaymentIntentType, amount: currency) => {
      setPaymentType(type)
      setPaymentAmount(amount)
      setPaymentMade(true)
    },
    []
  )

  return (
    <>
      <Form
        userSignedIn={userSignedIn}
        onSuccess={handleSuccess}
        request={request}
        links={links}
        recaptchaSiteKey={recaptchaSiteKey}
        captchaRequired={captchaRequired}
        defaultAmount={defaultAmount}
      />
      <SuccessModal
        open={paymentMade}
        amount={paymentAmount}
        closeLink={links.success}
      />
    </>
  )
}

// === end file ===

// === file: ../components/donations/ExercismStripeElements.tsx ===
import React, { useMemo } from 'react'
import {
  BaseStripeElementsOptions,
  StripeElementsOptions,
} from '@stripe/stripe-js'
import { Elements } from '@stripe/react-stripe-js'
import { useStripeFormTheme } from './stripe-form/useStripeFormTheme'
import { useLazyLoadStripe } from './stripe-form/useLazyLoadStripe'

const lightColors = {
  colorPrimary: '#130B43',
  colorText: '#130B43',
  colorBackground: '#FBFCFE',
}

const darkColors = {
  colorPrimary: '#f0f3f9',
  colorText: '#f0f3f9',
  colorBackground: '#211D2F',
}

export const appearance: BaseStripeElementsOptions['appearance'] = {
  theme: 'stripe',
  variables: {
    fontSizeBase: '16px',
    fontFamily: 'Poppins, sans-serif',
    fontSmooth: 'antialiased',
    fontWeightNormal: '500',
    colorDanger: '#D03B3B',
    colorTextPlaceholder: '#76709F',
    borderRadius: '8px',
  },
}

export const ExercismStripeElements = ({
  children,
  amount = 3200,
  mode,
}: {
  children?: React.ReactNode
  amount: number
  mode: 'subscription' | 'payment'
}): JSX.Element | null => {
  const { stripe, error } = useLazyLoadStripe()

  const options: StripeElementsOptions = useMemo(
    () => ({
      mode,
      amount,
      currency: 'usd',
      setup_future_usage: mode === 'subscription' ? 'off_session' : null,
      appearance: {
        ...appearance,
        variables:
          theme === 'light'
            ? { ...lightColors, ...appearance.variables }
            : { ...darkColors, ...appearance.variables },
      },
      fonts: [
        {
          cssSrc:
            'https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap',
        },
      ],
    }),
    [mode, amount, theme]
  )

  if (error) return <div className="c-alert--danger my-12 mx-24">{error}</div>
  if (!stripe) return <div className="c-alert my-12 mx-24">Loading…</div>

  return (
    <Elements stripe={stripe} options={options}>
      {children}
    </Elements>
  )
}

// === end file ===

// === file: ../components/donations/SuccessModal.tsx ===
import React from 'react'
import { Modal } from '../modals/Modal'
import { GraphicalIcon } from '../common/GraphicalIcon'
import { BadgeMedallion } from '../common/BadgeMedallion'
import { BadgeRarity } from '../types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

import currency from 'currency.js'

const badge = { rarity: 'rare' as BadgeRarity, iconName: 'supporter' }

export default function ({
  amount,
  open,
  closeLink,
  handleCloseModal,
}: {
  amount: currency | null
  open: boolean
  closeLink?: string
  handleCloseModal?: () => void
}): JSX.Element {
  const { t } = useAppTranslation('components/donations')
  return (
    <Modal open={open} onClose={() => null} className="m-donation-confirmation">
      <GraphicalIcon icon="completed-check-circle" className="main-icon" />
      <h2 className="text-h3 mb-8">
        {t('formWithModal.youVeDonatedSuccessfullyThankYou', {
          amount: amount?.format(),
        })}
      </h2>
      <p className="text-p-large mb-24">
        {t(
          'formWithModal.weTrulyAppreciateYourSupportExercismWouldNotBePossibleWithoutAwesomeContributorsLikeYourselfYouLlBeSentAnEmailShortlyWithYourDonationConfirmationAndReceipt'
        )}
      </p>
      <div className="badge-container">
        <BadgeMedallion badge={badge} />
        <div className="text-textColor2 text-18 leading-150">
          {t('formWithModal.youVeEarnedTheBadge')}{' '}
          <strong className="font-medium">
            {t('formWithModal.supporter')}
          </strong>{' '}
          {t('formWithModal.badge')}
        </div>
      </div>

      {closeLink ? (
        <a href={closeLink} className="btn-primary btn-l w-100">
          {t('formWithModal.happyToHelpImDoneHere')} 👍
        </a>
      ) : (
        <button onClick={handleCloseModal} className="btn-primary btn-l w-100">
          {t('formWithModal.happyToHelpImDoneHere')} 👍
        </button>
      )}
    </Modal>
  )
}

// === end file ===

// === file: ../components/donations/FooterForm.tsx ===
import React, { useCallback, useState } from 'react'
import currency from 'currency.js'
import { AmountButton } from './donation-form/AmountButton'
import { CustomAmountInput } from './donation-form/CustomAmountInput'
import { FormModal } from './footer-form/FormModal'
import { GraphicalIcon } from '../common'
import { Request } from '../../hooks/request-query'
import { StripeFormLinks } from './Form'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const PRESET_AMOUNTS = [currency(16), currency(32), currency(64), currency(128)]
const DEFAULT_AMOUNT = currency(16)

export type FooterFormProps = {
  request: Request
  links: StripeFormLinks
  userSignedIn: boolean
  captchaRequired: boolean
  recaptchaSiteKey: string
}

const FooterForm = ({
  request,
  links,
  userSignedIn,
  captchaRequired,
  recaptchaSiteKey,
}: FooterFormProps): JSX.Element => {
  const { t } = useAppTranslation('components/donations')
  const [currentAmount, setCurrentAmount] = useState(DEFAULT_AMOUNT)
  const [customAmount, setCustomAmount] = useState('')
  const [modalOpen, setModalOpen] = useState(false)

  const handleAmountChange = useCallback((amount) => {
    if (isNaN(amount.value)) {
      return setCurrentAmount(DEFAULT_AMOUNT)
    }

    setCustomAmount('')
    setCurrentAmount(amount)
  }, [])

  const handleCustomAmountChange = useCallback((amount) => {
    if (isNaN(amount.value)) {
      setCurrentAmount(DEFAULT_AMOUNT)
      setCustomAmount('')

      return
    }

    setCustomAmount(amount)
    setCurrentAmount(amount)
  }, [])

  const handleSubmit = useCallback((e) => {
    e.preventDefault()

    setModalOpen(true)
  }, [])

  const handleModalClose = useCallback(() => {
    setModalOpen(false)
  }, [])

  return (
    <>
      <form
        onSubmit={handleSubmit}
        className="donations-form flex flex-col md:flex-row items-stretch"
      >
        <div className="amounts mb-16 md:mb-0">
          {PRESET_AMOUNTS.map((amount) => (
            <AmountButton
              key={amount.value}
              value={amount}
              onClick={handleAmountChange}
              selected={
                customAmount === '' && amount.value === currentAmount.value
              }
              className="btn-m"
            />
          ))}
          <CustomAmountInput
            onChange={handleCustomAmountChange}
            selected={customAmount !== ''}
            placeholder={t('footerForm.customAmount')}
            value={customAmount}
          />
        </div>
        <button className="btn-m continue-btn w-100 md:w-auto md:h-auto md:ml-32">
          <span>{t('footerForm.continue')}</span>
          <GraphicalIcon icon="arrow-right" />
        </button>
      </form>
      <FormModal
        open={modalOpen}
        onClose={handleModalClose}
        amount={currentAmount}
        request={request}
        userSignedIn={userSignedIn}
        captchaRequired={captchaRequired}
        recaptchaSiteKey={recaptchaSiteKey}
        links={links}
      />
    </>
  )
}
export default FooterForm

// === end file ===

// === file: ../components/donations/Form.tsx ===
import React, {
  useState,
  createContext,
  useCallback,
  useMemo,
} from 'react'
import { useQueryClient } from '@tanstack/react-query'
import { PaymentIntentType } from './stripe-form/useStripeForm'
import { Tab, TabContext } from '../common/Tab'
import { Icon } from '../common'
import { TransactionForm } from './TransactionForm'
import { ExistingSubscriptionNotice } from './ExistingSubscriptionNotice'
import { ExercismStripeElements } from './ExercismStripeElements'
import { StripeForm } from './StripeForm'
import currency from 'currency.js'
import { Request, useRequestQuery } from '../../hooks/request-query'
import { FetchingBoundary } from '../FetchingBoundary'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export type StripeFormLinks = {
  success: string
  settings: string
}
const TabsContext = createContext<TabContext>({
  current: 'subscription',
  switchToTab: () => null,
})

export type FormAmount = {
  subscription: currency
  payment: currency
}

type Subscription = {
  amountInCents: number
}

const PAYMENT_DEFAULT_AMOUNT = currency(32)
const SUBSCRIPTION_DEFAULT_AMOUNT = currency(32)

const DEFAULT_ERROR = new Error('Unable to fetch subscription information')

type Props = {
  request: Request
  defaultAmount?: Partial<FormAmount>
  defaultTransactionType?: PaymentIntentType
  onSuccess: (type: PaymentIntentType, amount: currency) => void
  userSignedIn: boolean
  captchaRequired: boolean
  recaptchaSiteKey?: string
  onProcessing?: () => void
  onSettled?: () => void
  links: StripeFormLinks
  id?: string
}

export const Form = ({
  request,
  defaultAmount,
  defaultTransactionType,
  onSuccess,
  links,
  userSignedIn,
  captchaRequired,
  recaptchaSiteKey,
  onProcessing = () => null,
  onSettled = () => null,
  id,
}: Props): JSX.Element => {
  const { t } = useAppTranslation('components/donations')
  const queryClient = useQueryClient()
  const { data, status, error } = useRequestQuery<{
    subscription: Subscription
  }>(['active-subscription'], request)
  const [amount, setAmount] = useState({
    subscription: SUBSCRIPTION_DEFAULT_AMOUNT,
    payment: PAYMENT_DEFAULT_AMOUNT,
    ...defaultAmount,
  })
  const [transactionType, setTransactionType] = useState<PaymentIntentType>(
    defaultTransactionType || (data?.subscription ? 'payment' : 'subscription')
  )

  const handleAmountChange = useCallback(
    (transactionType: PaymentIntentType) => {
      return (newAmount: currency) => {
        switch (transactionType) {
          case 'subscription':
            setAmount({
              ...amount,
              subscription: isNaN(newAmount.value)
                ? SUBSCRIPTION_DEFAULT_AMOUNT
                : newAmount,
            })

            break
          case 'payment':
            setAmount({
              ...amount,
              payment: isNaN(newAmount.value)
                ? PAYMENT_DEFAULT_AMOUNT
                : newAmount,
            })

            break
        }
      }
    },
    [amount]
  )

  const currentAmount = useMemo(() => {
    switch (transactionType) {
      case 'payment':
        return amount.payment
      case 'subscription':
        return amount.subscription
    }
  }, [amount, transactionType])

  const handleSuccess = useCallback(
    (type, amount) => {
      if (type === 'subscription') {
        queryClient.setQueryData(['active-subscription'], () => {
          return {
            subscription: {
              amountInCents: amount.intValue,
            },
          }
        })
      }

      onSuccess(type, amount)
    },
    [onSuccess, queryClient]
  )

  return (
    <TabsContext.Provider
      value={{
        current: transactionType,
        switchToTab: (id) => setTransactionType(id as PaymentIntentType),
      }}
    >
      <div id={id} className="c-donations-form">
        <div className="--tabs">
          <Tab
            id="subscription"
            context={TabsContext}
            className="!flex justify-center"
          >
            <Icon
              icon="insiders"
              alt={t('stripeForm.eligibleForInsidersAccess')}
              className="emoji mr-4 !filter-none md:block hidden"
            ></Icon>
            {t('form.monthlyRecurring')}
          </Tab>
          <Tab id="payment" context={TabsContext}>
            {t('form.oneOff')}
          </Tab>
        </div>
        <div className="--content">
          <Tab.Panel id="subscription" context={TabsContext}>
            <FetchingBoundary
              status={status}
              error={error}
              defaultError={DEFAULT_ERROR}
            >
              <TransactionForm
                amount={amount.subscription}
                onAmountChange={handleAmountChange('subscription')}
                presetAmounts={[
                  currency(16),
                  currency(32),
                  currency(64),
                  currency(128),
                ]}
              >
                {data?.subscription != null ? (
                  <ExistingSubscriptionNotice
                    amount={currency(data.subscription?.amountInCents, {
                      fromCents: true,
                    })}
                    onExtraDonation={() => setTransactionType('payment')}
                    links={links}
                  />
                ) : null}
              </TransactionForm>
            </FetchingBoundary>
            <ExercismStripeElements
              mode="subscription"
              amount={
                currentAmount?.intValue || PAYMENT_DEFAULT_AMOUNT.intValue
              }
            >
              <StripeForm
                confirmParamsReturnUrl={links.success}
                paymentIntentType={transactionType}
                userSignedIn={userSignedIn}
                captchaRequired={captchaRequired}
                recaptchaSiteKey={recaptchaSiteKey}
                amount={currentAmount || currency(0)}
                onSuccess={handleSuccess}
                onProcessing={onProcessing}
                onSettled={onSettled}
                submitButtonDisabled={status === 'loading'}
              />
            </ExercismStripeElements>
          </Tab.Panel>
          <Tab.Panel id="payment" context={TabsContext}>
            <TransactionForm
              amount={amount.payment}
              onAmountChange={handleAmountChange('payment')}
              presetAmounts={[
                currency(16),
                currency(32),
                currency(64),
                currency(128),
              ]}
            />
            <ExercismStripeElements
              mode="payment"
              amount={
                currentAmount?.intValue || PAYMENT_DEFAULT_AMOUNT.intValue
              }
            >
              <StripeForm
                confirmParamsReturnUrl={links.success}
                paymentIntentType={transactionType}
                userSignedIn={userSignedIn}
                captchaRequired={captchaRequired}
                recaptchaSiteKey={recaptchaSiteKey}
                amount={currentAmount || currency(0)}
                onSuccess={handleSuccess}
                onProcessing={onProcessing}
                onSettled={onSettled}
                submitButtonDisabled={status === 'loading'}
              />
            </ExercismStripeElements>
          </Tab.Panel>
        </div>
      </div>
    </TabsContext.Provider>
  )
}

export default Form

// === end file ===
```