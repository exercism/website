```ts
// i18n
export default {
  "formOptions.initializedOption.changeAmount": "Change amount",
  "formOptions.initializedOption.or": "or",
  "formOptions.initializedOption.cancelRecurringDonation": "Cancel your recurring donation",
  "formOptions.updatingOption.changeDonationAmount": "Change donation amount",
  "formOptions.updatingOption.dollarSign": "$",
  "formOptions.updatingOption.chargedPerMonth": "You'll start being charged <strong>{{amount}} per month</strong>, on your next billing date.",
  "formOptions.updatingOption.thankYouForIncreasingDonation": "Thank you for increasing your donation!",
  "formOptions.updatingOption.changeAmountButton": "Change amount",
  "formOptions.updatingOption.cancelThisChange": "Cancel this change",
  "formOptions.cancellingOption.areYouSure": "Are you sure you want to cancel your recurring donation?",
  "formOptions.cancellingOption.yesPleaseCancel": "Yes - please cancel it.",
  "formOptions.cancellingOption.noCloseThis": "No, close this."
}

// modified_files
// === file: ../components/donations/subscription-form/FormOptions.tsx ===
import React, { useState, useCallback } from 'react'
import { InitializedOption } from './form-options/InitializedOption'
import { CancellingOption } from './form-options/CancellingOption'
import { UpdatingOption } from './form-options/UpdatingOption'
import currency from 'currency.js'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type FormStatus = 'initialized' | 'cancelling' | 'updating'

type Links = {
  cancel?: string
  update?: string
}

export const FormOptions = ({
  amount,
  links,
}: {
  amount: currency
  links: Links
}): JSX.Element | null => {
  const { t } = useAppTranslation('components/donations/subscription-form')
  const [status, setStatus] = useState<FormStatus>('initialized')

  const handleInitialized = useCallback(() => {
    setStatus('initialized')
  }, [])

  const handleCancelling = useCallback(() => {
    setStatus('cancelling')
  }, [])

  const handleUpdating = useCallback(() => {
    setStatus('updating')
  }, [])

  switch (status) {
    case 'initialized':
      return links.cancel || links.update ? (
        <InitializedOption
          onCancelling={handleCancelling}
          onUpdating={handleUpdating}
        />
      ) : null
    case 'updating':
      return links.update ? (
        <UpdatingOption
          amount={amount}
          onClose={handleInitialized}
          updateLink={links.update}
        />
      ) : null
    case 'cancelling':
      return links.cancel ? (
        <CancellingOption
          subscriptionType="donation"
          cancelLink={links.cancel}
          onClose={handleInitialized}
        />
      ) : null
  }
}

// === end file ===

// === file: ../components/donations/subscription-form/form-options/InitializedOption.tsx ===
import React from 'react'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const InitializedOption = ({
  onCancelling,
  onUpdating,
}: {
  onCancelling: () => void
  onUpdating: () => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/donations/subscription-form')
  return (
    <div className="options">
      <button type="button" onClick={onUpdating} className="text-a-subtle">
        {t('formOptions.initializedOption.changeAmount')}
      </button>{' '}
      {t('formOptions.initializedOption.or')}{' '}
      <button type="button" onClick={onCancelling} className="text-a-subtle">
        {t('formOptions.initializedOption.cancelRecurringDonation')}
      </button>
    </div>
  )
}

// === end file ===

// === file: ../components/donations/subscription-form/form-options/UpdatingOption.tsx ===
import React, { useCallback, useState } from 'react'
import { useMutation } from '@tanstack/react-query'
import currency from 'currency.js'
import { typecheck, redirectTo } from '@/utils'
import { sendRequest } from '@/utils/send-request'
import { FormButton } from '@/components/common/FormButton'
import { ErrorBoundary, ErrorMessage } from '@/components/ErrorBoundary'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type APIResponse = {
  links: {
    index: string
  }
}

const DEFAULT_ERROR = new Error('Unable to update subscription')

export const UpdatingOption = ({
  amount: currentAmount,
  updateLink,
  onClose,
}: {
  amount: currency
  updateLink: string
  onClose: () => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/donations/subscription-form')
  const [amount, setAmount] = useState<currency | ''>(currentAmount)

  const {
    mutate: mutation,
    status,
    error,
  } = useMutation<APIResponse>({
    mutationFn: async () => {
      if (amount === '') {
        throw 'cant change to empty amount'
      }

      const { fetch } = sendRequest({
        endpoint: updateLink,
        method: 'PATCH',
        body: JSON.stringify({ amount_in_cents: amount.intValue }),
      })

      return fetch.then((json) => typecheck<APIResponse>(json, 'subscription'))
    },
    onSuccess: (response) => {
      redirectTo(response.links.index)
    },
  })

  const handleSubmit = useCallback(
    (e) => {
      e.preventDefault()

      mutation()
    },
    [mutation]
  )

  const handleChange = useCallback((e) => {
    const parsedValue = parseInt(e.target.value)

    if (isNaN(parsedValue)) {
      setAmount('')
      return
    }

    if (Math.sign(parsedValue) !== 1) {
      setAmount('')
      return
    }

    setAmount(currency(e.target.value))
  }, [])

  return (
    <div className="expanded-option">
      <form data-turbo="false" onSubmit={handleSubmit}>
        <label htmlFor="donation_amount" className="text-label">
          {t('formOptions.updatingOption.changeDonationAmount')}
        </label>
        <label className="c-faux-input">
          <div className="icon">{t('formOptions.updatingOption.dollarSign')}</div>
          <input
            type="number"
            min="0"
            step="0.01"
            id="donation_amount"
            value={amount === '' ? amount : amount.value}
            onChange={handleChange}
            className="!border-l-1 !border-borderColor5 !pl-16"
          />
        </label>
        {amount !== '' ? (
          <React.Fragment>
            <p className="footnote">
              {t('formOptions.updatingOption.chargedPerMonth', {
                amount: amount.format(),
              })}
              {amount.value > currentAmount.value
                ? t('formOptions.updatingOption.thankYouForIncreasingDonation')
                : null}
            </p>
          </React.Fragment>
        ) : null}
        <div className="flex">
          <FormButton
            status={status}
            disabled={amount === ''}
            className="btn-xs btn-primary mr-12"
          >
            {t('formOptions.updatingOption.changeAmountButton')}
          </FormButton>
          <FormButton
            type="button"
            onClick={onClose}
            status={status}
            className="btn-xs btn-enhanced"
          >
            {t('formOptions.updatingOption.cancelThisChange')}
          </FormButton>
        </div>
      </form>
      <ErrorBoundary resetKeys={[status]}>
        <ErrorMessage error={error} defaultError={DEFAULT_ERROR} />
      </ErrorBoundary>
    </div>
  )
}

// === end file ===

// === file: ../components/donations/subscription-form/form-options/CancellingOption.tsx ===
import React, { useCallback } from 'react'
import { useMutation } from '@tanstack/react-query'
import { typecheck, redirectTo } from '@/utils'
import { sendRequest } from '@/utils/send-request'
import { FormButton } from '@/components/common/FormButton'
import { ErrorBoundary, ErrorMessage } from '@/components/ErrorBoundary'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type APIResponse = {
  links: {
    index: string
  }
}

const DEFAULT_ERROR = new Error('Unable to cancel subscription')

export const CancellingOption = ({
  cancelLink,
  onClose,
}: {
  cancelLink: string
  onClose: () => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/donations/subscription-form')
  const {
    mutate: mutation,
    status,
    error,
  } = useMutation<APIResponse>({
    mutationFn: async () => {
      const { fetch } = sendRequest({
        endpoint: cancelLink,
        method: 'PATCH',
        body: null,
      })

      return fetch.then((json) => typecheck<APIResponse>(json, 'subscription'))
    },
    onSuccess: (response) => {
      redirectTo(response.links.index)
    },
  })

  const handleSubmit = useCallback(
    (e) => {
      e.preventDefault()

      mutation()
    },
    [mutation]
  )

  return (
    <div className="expanded-option">
      <p className="text-p-base">
        {t('formOptions.cancellingOption.areYouSure')}
      </p>
      <form data-turbo="false" onSubmit={handleSubmit}>
        <div className="flex">
          <FormButton status={status} className="btn-xs btn-primary mr-12">
            {t('formOptions.cancellingOption.yesPleaseCancel')}
          </FormButton>
          <FormButton
            type="button"
            onClick={onClose}
            status={status}
            className="btn-xs btn-enhanced"
          >
            {t('formOptions.cancellingOption.noCloseThis')}
          </FormButton>
        </div>
      </form>
      <ErrorBoundary resetKeys={[status]}>
        <ErrorMessage error={error} defaultError={DEFAULT_ERROR} />
      </ErrorBoundary>
    </div>
  )
}

// === end file ===
```