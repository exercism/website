```ts
// i18n
export default {
  "chatGptTab.chatGpt": "ChatGPT",
  "chatGptDialog.areYouSureYouWantToAskChatGPT": "Are you sure you want to ask ChatGPT?",
  "chatGptDialog.chatGptIsAPowerfulTool": "ChatGPT is a powerful tool, but it can also make it too easy to get unstuck and remove a lot of the learning opportunity that comes from wrestling with a problem. We recommend only using it when you&apos;re too stuck to continue without help.",
  "chatGptDialog.selectAModel": "Select a model:",
  "chatGptDialog.noteChatGPT4IsSignificantlyBetter": "Note: ChatGPT 4 is <strong className=\"font-medium\">significantly</strong> better. However, ChatGPT 4 costs $0.20 per request (about 15x more than ChatGPT 3.5) so we have strict limits and give both options. Quotas reset on the first of each month. We suggest trying ChatGPT 3 first, then use one of your v4 tokens if needed.",
  "chatGptDialog.youHaveExceededTheLimit": "You have exceeded the limit",
  "chatGptDialog.go": "Go",
  "chatGptDialog.cancel": "Cancel",
  "useChatGptFeedback.unableToAskChatGPT": "Unable to ask ChatGPT",
  "chatGptUpsellContent.exercismInsiders": "Exercism Insiders",
  "chatGptUpsellContent.donateToExercismAndGetBehindTheScenesAccessAndBonusFeatures": "Donate to Exercism and get behind the scenes access and bonus features.",
  "chatGptUpsellContent.needHelpGettingUnstuckUnlockOurChatGPTIntegration": "Need help getting unstuck? Unlock our <strong>ChatGPT Integration</strong> and extra mentoring slots, as well as Dark Mode, exclusive badges and more, when you donate to Exercism.",
  "chatGptUpsellContent.learnMore": "Learn More",
  "askChatGpt.chatGptsSuggestions": "ChatGPT&apos;s Suggestions",
  "askChatGpt.chatGptHasTheFollowingSuggestions": "ChatGPT has the following suggestions:",
  "askChatGpt.reminderUseThisAdviceWisely": "Reminder: Use this advice wisely",
  "askChatGpt.howeverCleverChatGptAppearsItDoesNotUnderstandCode": "However clever ChatGPT appears, it does not &quot;understand&quot; code. Its suggestions may therefore be incorrect, muddled or misleading. However, it often provides useful insights to help unblock you. <strong className=\"font-medium\">Use these suggestions as inspiration, not instruction.</strong>",
  "askChatGpt.askingChatGPT": "Asking ChatGPTâ€¦",
  "askChatGpt.estimatedRunningTime15s": "Estimated running time 15s",
  "askChatGpt.getUnstuckWithChatGPT": "Get unstuck with ChatGPT",
  "askChatGpt.ifYoureFeelingStuckAndCantSeemToMakeProgress": "If you&apos;re feeling stuck and can&apos;t seem to make progress, don&apos;t worry - just ask ChatGPT for help and get back on track.",
  "askChatGptButton.pleaseRunTheTestsFirst": "Please run the tests first.",
  "askChatGptButton.pleaseRerunTheTestsToContinue": "Please rerun the tests to continue.",
  "askChatGptButton.testsAreCurrentlyRunning": "Tests are currently running.",
  "askChatGptButton.awaitingResponseFromChatGPTPleaseStandBy": "Awaiting response from ChatGPT. Please stand by.",
  "askChatGptButton.congratsTheTestsArePassing": "Congrats! The tests are passing! ðŸŽ‰",
  "askChatGptButton.stuckAskChatGPT": "Stuck? Ask ChatGPT"
}

// modified_files
// === file: ../components/editor/ChatGptFeedback/ChatGptTab.tsx ===
// i18n-key-prefix: chatGptTab
// i18n-namespace: components/editor/ChatGptFeedback
import React from 'react'
import { Tab } from '../../common/Tab'
import { TabsContext } from '../../Editor'
import { GraphicalIcon } from '../../common/GraphicalIcon'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const ChatGptTab = (): JSX.Element => {
  const { t } = useAppTranslation('components/editor/ChatGptFeedback')
  return (
    <Tab id="chat-gpt" context={TabsContext}>
      <GraphicalIcon icon="automation" />
      <span data-text="ChatGPT">{t('chatGptTab.chatGpt')}</span>
    </Tab>
  )
}

// === end file ===
// === file: ../components/editor/ChatGptFeedback/ChatGptDialog.tsx ===
// i18n-key-prefix: chatGptDialog
// i18n-namespace: components/editor/ChatGptFeedback
import React from 'react'
import { Modal } from '@/components/modals'
import { Submission } from '../types'
import { SingleSelect } from '@/components/common/SingleSelect'
import { ErrorBoundary, useErrorHandler } from '@/components/ErrorBoundary'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export type GptModelInfo = {
  version: GPTModel
  usage: number
}
export type GptUsage = {
  '3.5': number
  '4.0': number
}
type ChatGptDialogModalProps = {
  open: boolean
  onClose: () => void
  onGo: () => void
  submission: Submission
  value: GptModelInfo
  setValue: (v: GptModelInfo) => void
  chatgptUsage: GptUsage
  error: unknown
  exceededLimit: boolean
}

export type GPTModel = '3.5' | '4.0'

const OptionComponent = ({
  option: model,
}: {
  option: GptModelInfo
}): JSX.Element | null => {
  switch (model.version) {
    case '3.5':
      return (
        <React.Fragment>
          <div className="text-p-base flex items-center w-100">
            ChatGPT 3.5 - Less powerful but faster &amp; cheaper
            <span className="text-textColor6 font-semibold ml-auto text-14 flex items-center">
              {model.usage}/30
            </span>
          </div>
        </React.Fragment>
      )
    case '4.0':
      return (
        <React.Fragment>
          <div className="text-p-base flex items-center w-100">
            ChatGPT 4 - The latest, most powerful model
            <span className="text-textColor6 font-semibold ml-auto text-14 flex items-center">
              {model.usage}/3
            </span>
          </div>
        </React.Fragment>
      )
    default:
      return null
  }
}

const SelectedComponent = ({
  option: model,
}: {
  option: GptModelInfo
}): JSX.Element | null => {
  switch (model.version) {
    case '3.5':
      return (
        <React.Fragment>
          <div className="text-p-base flex items-center w-100">GPT-3.5 </div>
        </React.Fragment>
      )
    case '4.0':
      return (
        <React.Fragment>
          <div className="text-p-base flex items-center w-100">GPT-4 </div>
        </React.Fragment>
      )
    default:
      return null
  }
}

const DEFAULT_ERROR = new Error('Unable to ask ChatGPT')
export const ChatGptDialog = ({
  open,
  onClose,
  onGo,
  value,
  setValue,
  chatgptUsage,
  error,
  exceededLimit,
}: ChatGptDialogModalProps): JSX.Element => {
  const { t } = useAppTranslation('components/editor/ChatGptFeedback')

  return (
    <Modal
      open={open}
      closeButton={false}
      onClose={onClose}
      shouldCloseOnEsc={false}
      shouldCloseOnOverlayClick
      ReactModalClassName={`max-w-[40%]`}
    >
      <h3 className="text-h5 mb-8">{t('chatGptDialog.areYouSureYouWantToAskChatGPT')}</h3>
      <p className="text-p-base mb-16">
        {t('chatGptDialog.chatGptIsAPowerfulTool')}
      </p>

      <div className="text-p-base text-textColor6 mb-8">{t('chatGptDialog.selectAModel')}</div>
      <SingleSelect<GptModelInfo>
        options={gptUsageToArray(chatgptUsage)}
        OptionComponent={OptionComponent}
        SelectedComponent={SelectedComponent}
        value={value}
        setValue={setValue}
      />
      <div className="text-textColor6 text-p-small mt-12">
        {t('chatGptDialog.noteChatGPT4IsSignificantlyBetter')}
      </div>

      {exceededLimit ? (
        <div className="c-alert--danger text-16 font-body mt-16 normal-case">
          {t('chatGptDialog.youHaveExceededTheLimit')}
        </div>
      ) : (
        <ErrorBoundary FallbackComponent={ErrorFallback}>
          <ErrorMessage error={error} />
        </ErrorBoundary>
      )}
      <div className="flex gap-8 mt-32 ">
        <button className="btn-s btn-primary" onClick={onGo}>
          {t('chatGptDialog.go')}
        </button>
        <button className="btn-s btn-default" onClick={onClose}>
          {t('chatGptDialog.cancel')}
        </button>
      </div>
    </Modal>
  )
}

const ErrorMessage = ({ error }: { error: unknown }) => {
  useErrorHandler(error, { defaultError: DEFAULT_ERROR })

  return null
}

const ErrorFallback = ({ error }: { error: Error }) => {
  return (
    <div className="c-alert--danger text-16 font-body mt-16 normal-case">
      {error.message}
    </div>
  )
}

function gptUsageToArray(gptUsage: GptUsage): GptModelInfo[] {
  return Object.entries(gptUsage).map(([version, usage]) => ({
    version: version as GPTModel,
    usage,
  }))
}

// === end file ===
// === file: ../components/editor/ChatGptFeedback/useChatGptFeedback.tsx ===
// i18n-key-prefix: useChatGptFeedback
// i18n-namespace: components/editor/ChatGptFeedback
import { useCallback, useEffect, useState } from 'react'
import {
  MutationStatus,
  UseMutateFunction,
  useMutation,
} from '@tanstack/react-query'
import { AIHelpRecordsChannel } from '@/channels/aiHelpRecordsChannel'
import { sendRequest } from '@/utils/send-request'
import { camelizeKeysAs } from '@/utils/camelize-keys-as'
import { Submission } from '../types'
import { GPTModel as GPTModelType } from './ChatGptDialog'
import { GptUsage } from './ChatGptDialog'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export type HelpRecord = {
  source: string
  adviceHtml: string
}

export type AIHelpRecordsChannelResponse = {
  help_record: HelpRecord
  usage: GptUsage
}

export type FetchingStatus = 'unfetched' | 'fetching' | 'received'

export type useChatGptFeedbackProps = {
  helpRecord: HelpRecord | undefined | null
  unfetched: boolean
  mutation: UseMutateFunction<void, unknown, void, unknown>
  setStatus: React.Dispatch<React.SetStateAction<FetchingStatus>>
  status: FetchingStatus
  submissionUuid: string | undefined
  setSubmissionUuid: React.Dispatch<React.SetStateAction<string | undefined>>
  mutationStatus: MutationStatus
  mutationError: unknown
  exceededLimit: boolean
  chatGptUsage: GptUsage
}

export function useChatGptFeedback({
  submission,
  defaultRecord,
  GPTModel,
  chatgptUsage,
}: {
  submission: Submission | null
  defaultRecord: HelpRecord
  GPTModel: GPTModelType
  chatgptUsage: GptUsage
}): useChatGptFeedbackProps {
  const { t } = useAppTranslation('components/editor/ChatGptFeedback')
  const [helpRecord, setHelpRecord] = useState<HelpRecord | undefined>(
    defaultRecord
  )
  const [status, setStatus] = useState<FetchingStatus>(
    defaultRecord ? 'received' : 'unfetched'
  )
  const [submissionUuid, setSubmissionUuid] = useState<string | undefined>()
  const [exceededLimit, setExceededLimit] = useState(false)
  const [chatGptUsage, setChatGptUsage] = useState(chatgptUsage)

  const onError = useCallback((err) => {
    if (err.status === 402) {
      setExceededLimit(true)
    }
  }, [])

  const {
    mutate: mutation,
    status: mutationStatus,
    error: mutationError,
  } = useMutation<void>({
    mutationFn: async () => {
      if (!submission) return
      const { fetch } = sendRequest({
        endpoint: submission?.links.aiHelp,
        method: 'POST',
        body: JSON.stringify({ chatgpt_version: GPTModel }),
      })

      return fetch.then(() => setStatus('fetching'))
    },
    onError,
  })

  useEffect(() => {
    if (!submission) return
    const solutionChannel = new AIHelpRecordsChannel(
      submission?.uuid,
      (response: AIHelpRecordsChannelResponse) => {
        setHelpRecord(camelizeKeysAs<HelpRecord>(response.help_record))
        setChatGptUsage(response.usage)
        setStatus('received')
      }
    )

    return () => {
      solutionChannel.disconnect()
    }
  }, [mutation, submission])

  return {
    helpRecord,
    mutation,
    unfetched: helpRecord === undefined,
    status,
    setStatus,
    submissionUuid,
    setSubmissionUuid,
    mutationError,
    mutationStatus,
    exceededLimit,
    chatGptUsage,
  }
}

// === end file ===
// === file: ../components/editor/ChatGptFeedback/ChatGptPanel.tsx ===
// i18n-key-prefix: chatGptPanel
// i18n-namespace: components/editor/ChatGptFeedback
import React from 'react'
import { TabsContext } from '@/components/Editor'
import { Tab } from '@/components/common'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export type GetHelpPanelProps = {
  children?: React.ReactChild
}

export function ChatGptPanel({ children }: GetHelpPanelProps): JSX.Element {
  const { t } = useAppTranslation('components/editor/ChatGptFeedback')
  return (
    <Tab.Panel id="chat-gpt" context={TabsContext}>
      {children}
    </Tab.Panel>
  )
}

// === end file ===
// === file: ../components/editor/ChatGptFeedback/ChatGptWrapper.tsx ===
// i18n-key-prefix: chatGptWrapper
// i18n-namespace: components/editor/ChatGptFeedback
import React from 'react'
import { FetchingStatus, useChatGptFeedbackProps } from './useChatGptFeedback'
import { AskChatGpt } from './AskChatGpt'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const ChatGptWrapper = ({
  status,
  helpRecord,
  children,
}: {
  status: FetchingStatus
  children: React.ReactNode
} & Pick<useChatGptFeedbackProps, 'helpRecord'>): JSX.Element => {
  const { t } = useAppTranslation('components/editor/ChatGptFeedback')
  return (
    <section className="flex justify-center pb-16 px-24">
      <AskChatGpt status={status} helpRecord={helpRecord}>
        {children}
      </AskChatGpt>
    </section>
  )
}

// === end file ===
// === file: ../components/editor/ChatGptFeedback/ChatGptUpsellContent.tsx ===
// i18n-key-prefix: chatGptUpsellContent
// i18n-namespace: components/editor/ChatGptFeedback
import React from 'react'
import { GraphicalIcon } from '@/components/common'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const ChatGptUpsellContent = (): JSX.Element => {
  const { t } = useAppTranslation('components/editor/ChatGptFeedback')
  return (
    <div className="  px-24 pt-16 pb-24 text-center">
      <div className="border-gradient-lightPurple border-2 rounded-8 px-24 py-16 flex flex-col items-center">
        <GraphicalIcon icon="insiders" className="w-[48px] h-[48px] mb-16" />
        <h2 className="text-h3 mb-2">{t('chatGptUpsellContent.exercismInsiders')}</h2>
        <p className="text-h5 mb-16 max-w-[520px]">
          {t('chatGptUpsellContent.donateToExercismAndGetBehindTheScenesAccessAndBonusFeatures')}
        </p>
        <div className="text-p-base max-w-[520px] mb-16">
          {t('chatGptUpsellContent.needHelpGettingUnstuckUnlockOurChatGPTIntegration')}
        </div>

        <a href="/insiders" className="btn-m btn-primary">
          {t('chatGptUpsellContent.learnMore')}
        </a>
      </div>
    </div>
  )
}

// === end file ===
// === file: ../components/editor/ChatGptFeedback/AskChatGpt.tsx ===
// i18n-key-prefix: askChatGpt
// i18n-namespace: components/editor/ChatGptFeedback
import React from 'react'
import { GraphicalIcon } from '@/components/common'
import { LoadingBar } from '@/components/common/LoadingBar'
import type { useChatGptFeedbackProps, HelpRecord } from './useChatGptFeedback'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function AskChatGpt({
  helpRecord,
  status,
  children,
}: Pick<useChatGptFeedbackProps, 'helpRecord' | 'status'> & {
  children: React.ReactNode
}): JSX.Element {
  const { t } = useAppTranslation('components/editor/ChatGptFeedback')
  let content
  switch (status) {
    case 'fetching': {
      content = <AskingChatGpt />
      break
    }
    case 'received': {
      content = <ChatGptResponse helpRecord={helpRecord!} />
      break
    }
    case 'unfetched': {
      content = <Unfetched>{children}</Unfetched>
      break
    }
    default: {
      content = <div>Couldn&apos;t receive feedback</div>
    }
  }
  return <div className="c-chatgpt">{content} </div>
}

function ChatGptResponse({ helpRecord }: { helpRecord: HelpRecord }) {
  const { t } = useAppTranslation('components/editor/ChatGptFeedback')

  return (
    <div className="response">
      <div className="c-textual-content --small">
        <h2>{t('askChatGpt.chatGptsSuggestions')}</h2>

        <p>{t('askChatGpt.chatGptHasTheFollowingSuggestions')}</p>

        <div dangerouslySetInnerHTML={{ __html: helpRecord.adviceHtml }} />

        <div className="text-h5-mono">Source: {helpRecord.source}</div>

        <div className="c-textblock-caution mb-16">
          <div className="c-textblock-header">
            {t('askChatGpt.reminderUseThisAdviceWisely')}
          </div>
          <div className="c-textblock-content c-textblock-content text-16 leading-150">
            {t('askChatGpt.howeverCleverChatGptAppearsItDoesNotUnderstandCode')}
          </div>
        </div>
      </div>
    </div>
  )
}

function AskingChatGpt() {
  const { t } = useAppTranslation('components/editor/ChatGptFeedback')

  return (
    <div role="status" className="running">
      <GraphicalIcon icon="spinner" className="animate-spin-slow" />
      <LoadingBar animationDuration={15} />
      <p>
        <strong>{t('askChatGpt.askingChatGPT')}</strong>
        <span>{t('askChatGpt.estimatedRunningTime15s')}</span>
      </p>
    </div>
  )
}

function Unfetched({ children }: { children: React.ReactNode }): JSX.Element {
  const { t } = useAppTranslation('components/editor/ChatGptFeedback')

  return (
    <section className="run-tests-prompt">
      <GraphicalIcon className="filter-textColor6" icon="automation" />
      <h2>{t('askChatGpt.getUnstuckWithChatGPT')}</h2>
      <p className="mb-32">
        {t('askChatGpt.ifYoureFeelingStuckAndCantSeemToMakeProgress')}
      </p>
      {children}
    </section>
  )
}

// === end file ===
// === file: ../components/editor/ChatGptFeedback/AskChatGptButton.tsx ===
// i18n-key-prefix: askChatGptButton
// i18n-namespace: components/editor/ChatGptFeedback
import React, { forwardRef } from 'react'
import { GraphicalIcon } from '@/components/common'
import { FetchingStatus } from './useChatGptFeedback'
import { GenericTooltip } from '@/components/misc/ExercismTippy'
import { ConditionTextManager } from '@/utils/condition-text-manager'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type Props = {
  isProcessing: boolean
  sameSubmission: boolean
  noSubmission: boolean
  chatGptFetchingStatus: FetchingStatus
  passingTests: boolean
  insider: boolean
} & React.ButtonHTMLAttributes<HTMLButtonElement>

export const AskChatGptButton = forwardRef<HTMLButtonElement, Props>(
  (
    {
      noSubmission,
      sameSubmission,
      isProcessing,
      chatGptFetchingStatus,
      passingTests,
      insider,
      ...props
    },
    ref
  ) => {
    const { t } = useAppTranslation('components/editor/ChatGptFeedback')

    const isDisabled =
      isProcessing ||
      noSubmission ||
      chatGptFetchingStatus === 'fetching' ||
      sameSubmission ||
      passingTests

    const tooltipText = new ConditionTextManager()
    tooltipText.append(noSubmission, t('askChatGptButton.pleaseRunTheTestsFirst'))
    tooltipText.append(sameSubmission, t('askChatGptButton.pleaseRerunTheTestsToContinue'))
    tooltipText.append(isProcessing, t('askChatGptButton.testsAreCurrentlyRunning'))
    tooltipText.append(
      chatGptFetchingStatus === 'fetching',
      t('askChatGptButton.awaitingResponseFromChatGPTPleaseStandBy')
    )
    tooltipText.append(passingTests, t('askChatGptButton.congratsTheTestsArePassing'))

    return (
      <GenericTooltip
        disabled={!isDisabled || !insider}
        content={tooltipText.getLastTrueText()}
      >
        <div className="mr-auto ask-chatgpt-btn-wrapper">
          <button
            type="button"
            className="btn-enhanced btn-s !ml-0 mr-auto ask-chatgpt-btn"
            disabled={isDisabled && insider}
            ref={ref}
            {...props}
          >
            <GraphicalIcon icon="automation" height={16} width={16} />
            <span>{t('askChatGptButton.stuckAskChatGPT')}</span>
          </button>
        </div>
      </GenericTooltip>
    )
  }
)

// === end file ===
```