```ts
// i18n
export default {
  "orderSwitcher.sortByOldestFirst": "Sort by Oldest First",
  "orderSwitcher.sortByNewestFirst": "Sort by Newest First",
  "markAllAsSeenButton.markAllAsSeen": "Mark all as seen",
  "markAllAsSeenModal.markAllAsSeenQuestion": "Mark all as seen?",
  "markAllAsSeenModal.confirmationMessage": "Are you sure you want to mark all {{unseenTotal}} contributions as seen? Note that these contributions may span multiple pages.",
  "markAllAsSeenModal.continue": "Continue",
  "markAllAsSeenModal.cancel": "Cancel"
}

// modified_files
// === file: ../components/journey/contribution-results/OrderSwitcher.tsx ===
import React from 'react'
import { SingleSelect } from '../../common/SingleSelect'
import { Order } from '../ContributionResults'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const OptionComponent = ({ option: order }: { option: Order }) => {
  const { t } = useAppTranslation('components/journey/contribution-results')
  switch (order) {
    case 'oldest_first':
      return <React.Fragment>{t('orderSwitcher.sortByOldestFirst')}</React.Fragment>
    case 'newest_first':
      return <React.Fragment>{t('orderSwitcher.sortByNewestFirst')}</React.Fragment>
  }
}

export const OrderSwitcher = ({
  value,
  setValue,
}: {
  value: Order
  setValue: (value: Order) => void
}): JSX.Element => {
  return (
    <SingleSelect<Order>
      options={['newest_first', 'oldest_first']}
      value={value}
      setValue={setValue}
      SelectedComponent={OptionComponent}
      OptionComponent={OptionComponent}
    />
  )
}

// === end file ===

// === file: ../components/journey/contribution-results/MarkAllAsSeenButton.tsx ===
import React from 'react'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const MarkAllAsSeenButton = ({
  unseenTotal,
  onClick,
}: {
  unseenTotal: number
  onClick: () => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/journey/contribution-results')
  return (
    <button
      type="button"
      onClick={onClick}
      className="btn-m btn-default"
      disabled={unseenTotal === 0}
    >
      {t('markAllAsSeenButton.markAllAsSeen')}
    </button>
  )
}

// === end file ===

// === file: ../components/journey/contribution-results/MarkAllAsSeenModal.tsx ===
import React, { useCallback } from 'react'
import { useMutation } from '@tanstack/react-query'
import { sendRequest } from '@/utils/send-request'
import { Modal, ModalProps } from '@/components/modals/Modal'
import { FormButton } from '@/components/common/FormButton'
import { ErrorBoundary, ErrorMessage } from '@/components/ErrorBoundary'
import { APIResult } from '../ContributionsList'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const DEFAULT_ERROR = new Error('Unable to mark all as seen')

export const MarkAllAsSeenModal = ({
  endpoint,
  onClose,
  onSuccess,
  unseenTotal,
  ...props
}: Omit<ModalProps, 'className'> & {
  endpoint: string
  onSuccess: (response: APIResult) => void
  unseenTotal: number
}): JSX.Element => {
  const { t } = useAppTranslation('components/journey/contribution-results')
  const {
    mutate: mutation,
    status,
    error,
  } = useMutation<APIResult>({
    mutationFn: async () => {
      const { fetch } = sendRequest({
        endpoint: endpoint,
        method: 'PATCH',
        body: null,
      })

      return fetch
    },
    onSuccess: (result) => {
      onSuccess(result)
      onClose()
    },
  })

  const handleSubmit = useCallback(
    (e) => {
      e.preventDefault()

      mutation()
    },
    [mutation]
  )

  const handleClose = useCallback(() => {
    if (status === 'pending') {
      return
    }

    onClose()
  }, [onClose, status])

  return (
    <Modal
      theme="dark"
      className="m-generic-confirmation"
      onClose={handleClose}
      {...props}
    >
      <h3>{t('markAllAsSeenModal.markAllAsSeenQuestion')}</h3>
      <p>
        {t('markAllAsSeenModal.confirmationMessage', { unseenTotal })}
      </p>
      <form data-turbo="false" onSubmit={handleSubmit} className="buttons">
        <FormButton type="submit" status={status} className="btn-primary btn-s">
          {t('markAllAsSeenModal.continue')}
        </FormButton>
        <FormButton
          type="button"
          status={status}
          onClick={handleClose}
          className="btn-enhanced btn-s"
        >
          {t('markAllAsSeenModal.cancel')}
        </FormButton>
      </form>
      <ErrorBoundary resetKeys={[status]}>
        <ErrorMessage error={error} defaultError={DEFAULT_ERROR} />
      </ErrorBoundary>
    </Modal>
  )
}

// === end file ===
```