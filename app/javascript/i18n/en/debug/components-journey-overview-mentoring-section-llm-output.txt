```ts
// i18n
export default {
  "headerSummary.youVeMostlyMentoredIn": "You've mostly mentored in ",
  "communityRank.topRank": "Top {{rank}}%",
  "mentoringChart.sessionsMentoredPerTrack": "Sessions mentored per track",
  "trackSummary.session": "{{count}} session",
  "trackSummary.sessions": "{{count}} sessions",
  "sessionsMentoredSummary.totalSessionsMentored": "Total sessions mentored",
  "sessionRatioSummary.sessionsPerStudent": "Sessions per student",
  "studentsMentoredSummary.totalStudentsMentored": "Total students mentored"
}

// modified_files
// === file: ../components/journey/overview/mentoring-section/HeaderSummary.tsx ===
// i18n-key-prefix: headerSummary
// i18n-namespace: components/journey/overview/mentoring-section
import React from 'react'
import { MentoredTrackProgress, MentoredTrackProgressList } from '../../types'
import { TrackHeaderSpan } from '../TrackHeaderSpan'
import { TrackHeaderSummaryText } from '../TrackHeaderSummaryText'
import { useAppTranslation } from '@/i18n/useAppTranslation'

class MentoredTrackProgressWithPercentage {
  track: MentoredTrackProgress
  numTotalSessions: number

  get percentage(): number {
    return (100 * this.track.numDiscussions) / this.numTotalSessions
  }

  get slug(): string {
    return this.track.slug
  }

  get title(): string {
    return this.track.title
  }

  constructor(track: MentoredTrackProgress, numTotalSessions: number) {
    this.track = track
    this.numTotalSessions = numTotalSessions
  }
}

const MAX_TRACKS = 4

export const HeaderSummary = ({
  tracks,
}: {
  tracks: MentoredTrackProgressList
}): JSX.Element => {
  const { t } = useAppTranslation('components/journey/overview/mentoring-section')
  const tracksToDisplay = tracks
    .sort()
    .items.slice(0, MAX_TRACKS)
    .map(
      (track) =>
        new MentoredTrackProgressWithPercentage(
          track,
          tracks.totals.discussions
        )
    )

  return (
    <p>
      {t('headerSummary.youVeMostlyMentoredIn')}{' '}
      <TrackHeaderSummaryText<MentoredTrackProgressWithPercentage>
        tracks={tracksToDisplay}
        SpanComponent={TrackSummary}
      />
    </p>
  )
}

const TrackSummary = ({
  track,
}: {
  track: MentoredTrackProgressWithPercentage
}): JSX.Element => {
  return (
    <TrackHeaderSpan slug={track.slug}>
      {track.title} ({track.percentage.toFixed(2)}%)
    </TrackHeaderSpan>
  )
}

// === end file ===

// === file: ../components/journey/overview/mentoring-section/CommunityRank.tsx ===
// i18n-key-prefix: communityRank
// i18n-namespace: components/journey/overview/mentoring-section
import React from 'react'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const CommunityRank = ({ rank }: { rank: number }): JSX.Element => {
  const { t } = useAppTranslation('components/journey/overview/mentoring-section')
  const classNames = ['c-community-rank-tag', `--top-${rank}`]

  return <div className={classNames.join(' ')}>{t('communityRank.topRank', {rank})}</div>
}

// === end file ===

// === file: ../components/journey/overview/mentoring-section/MentoringChart.tsx ===
// i18n-key-prefix: mentoringChart
// i18n-namespace: components/journey/overview/mentoring-section
import React, { useState, useEffect } from 'react'
import Chart from 'chart.js/auto'
import { ChartConfiguration, ChartDataset } from 'chart.js'
import { MentoredTrackProgressList } from '../../types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const CONFIG: ChartConfiguration<'doughnut'> = {
  type: 'doughnut',
  data: {
    labels: [],
    datasets: [],
  },
  options: {
    cutout: 150,
    plugins: {
      legend: { display: false },
    },
  },
}

export const MentoringChart = ({
  tracks,
}: {
  tracks: MentoredTrackProgressList
}): JSX.Element => {
  const { t } = useAppTranslation('components/journey/overview/mentoring-section')
  const [canvas, setCanvas] = useState<HTMLCanvasElement | null>(null)
  const [chart, setChart] = useState<Chart<'doughnut'> | null>(null)

  useEffect(() => {
    if (!canvas) {
      return
    }
    const chart = new Chart<'doughnut'>(canvas, CONFIG)

    setChart(chart)

    return () => chart.destroy()
  }, [canvas])

  useEffect(() => {
    if (!chart) {
      return
    }

    const dataset: ChartDataset<'doughnut'> = {
      label: t('mentoringChart.sessionsMentoredPerTrack'),
      data: tracks.items.map((track) => track.numDiscussions),
      backgroundColor: tracks.items.map(
        (track) =>
          `rgb(${getComputedStyle(document.documentElement).getPropertyValue(
            `--track-color-${track.slug}`
          )})`
      ),
      borderWidth: 0,
      hoverOffset: 4,
    }
    chart.data.labels = tracks.items.map((track) => track.title)
    chart.data.datasets = [dataset]

    chart.update()
  }, [chart, tracks.items, t])

  return (
    <div className="chart">
      <canvas id="mentoring-chart" width="350" height="350" ref={setCanvas} />
    </div>
  )
}

// === end file ===

// === file: ../components/journey/overview/mentoring-section/TrackSummary.tsx ===
// i18n-key-prefix: trackSummary
// i18n-namespace: components/journey/overview/mentoring-section
import React from 'react'
import { TrackIcon } from '../../../common'
import { MentoredTrackProgress } from '../../types'
import pluralize from 'pluralize'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const TrackSummary = ({
  track,
}: {
  track: MentoredTrackProgress
}): JSX.Element => {
  const { t } = useAppTranslation('components/journey/overview/mentoring-section')

  return (
    <div className="track">
      <div className="dot t-b-csharp" />
      <TrackIcon iconUrl={track.iconUrl} title={track.title} />
      <div className="details">
        <div className="journey-label">{track.title}</div>
        <div className="journey-h4">
          {track.numDiscussions} {pluralize('session', track.numDiscussions) === 'session' ? t('trackSummary.session', {count: track.numDiscussions}) : t('trackSummary.sessions', {count: track.numDiscussions})}
        </div>
      </div>
    </div>
  )
}

// === end file ===

// === file: ../components/journey/overview/mentoring-section/SessionsMentoredSummary.tsx ===
// i18n-key-prefix: sessionsMentoredSummary
// i18n-namespace: components/journey/overview/mentoring-section
import React from 'react'
import { MentoredTrackProgressList } from '../../types'
import { CommunityRank } from './CommunityRank'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const SessionsMentoredSummary = ({
  tracks,
  rank,
}: {
  tracks: MentoredTrackProgressList
  rank?: number
}): JSX.Element => {
  const { t } = useAppTranslation('components/journey/overview/mentoring-section')

  return (
    <div className="box">
      <div className="journey-h3">{tracks.totals.discussions}</div>
      <div className="journey-label">{t('sessionsMentoredSummary.totalSessionsMentored')}</div>
      {rank ? <CommunityRank rank={rank} /> : null}
    </div>
  )
}

// === end file ===

// === file: ../components/journey/overview/mentoring-section/SessionRatioSummary.tsx ===
// i18n-key-prefix: sessionRatioSummary
// i18n-namespace: components/journey/overview/mentoring-section
import React from 'react'
import { MentoredTrackProgressList } from '../../types'
import { CommunityRank } from './CommunityRank'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const SessionRatioSummary = ({
  tracks,
}: {
  tracks: MentoredTrackProgressList
}): JSX.Element => {
  const { t } = useAppTranslation('components/journey/overview/mentoring-section')
  return (
    <div className="box">
      <div className="journey-h3">{tracks.sessionRatio.toFixed(2)}</div>
      <div className="journey-label">{t('sessionRatioSummary.sessionsPerStudent')}</div>
    </div>
  )
}

// === end file ===

// === file: ../components/journey/overview/mentoring-section/StudentsMentoredSummary.tsx ===
// i18n-key-prefix: studentsMentoredSummary
// i18n-namespace: components/journey/overview/mentoring-section
import React from 'react'
import { MentoredTrackProgressList } from '../../types'
import { CommunityRank } from './CommunityRank'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const StudentsMentoredSummary = ({
  tracks,
  rank,
}: {
  tracks: MentoredTrackProgressList
  rank?: number
}): JSX.Element => {
  const { t } = useAppTranslation('components/journey/overview/mentoring-section')
  return (
    <div className="box">
      <div className="journey-h3">{tracks.totals.students}</div>
      <div className="journey-label">{t('studentsMentoredSummary.totalStudentsMentored')}</div>
      {rank ? <CommunityRank rank={rank} /> : null}
    </div>
  )
}

// === end file ===
```