```ts
// i18n
export default {
  "cancelButton.cancel": "Cancel",
  "commentTag.essential": "Essential",
  "commentTag.recommended": "Recommended"
}

// modified_files
// === file: ../components/mentoring/representation/common/CancelButton.tsx ===
// i18n-key-prefix: cancelButton
// i18n-namespace: components/mentoring/representation/common
import React from 'react'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function CancelButton({
  onClick,
}: {
  onClick: () => void
}): JSX.Element {
  const { t } = useAppTranslation('components/mentoring/representation/common')
  return (
    <button
      onClick={onClick}
      className="mr-16 px-[18px] py-[12px] border border-1 border-textColor1 text-textColor1 text-16 rounded-8 font-semibold shadow-xsZ1v2"
    >
      {t('cancelButton.cancel')}
    </button>
  )
}

// end file

// === file: ../components/mentoring/representation/common/PrimaryButton.tsx ===
// i18n-key-prefix: primaryButton
// i18n-namespace: components/mentoring/representation/common
import React from 'react'

export function PrimaryButton({
  onClick,
  children,
  className,
  disabled,
}: {
  onClick: () => void
  children: React.ReactChild
  className?: string
  disabled?: boolean
}): JSX.Element {
  const disabledStyle =
    'bg-disabledLight text-disabledLabel !border-transparent !shadow-none'

  return (
    <button
      onClick={onClick}
      className={`border-1 border-primaryBtnBorder shadow-xsZ1v3 bg-purple text-white text-16 font-semibold rounded-8 ${className} ${
        disabled ? disabledStyle : ''
      }`}
      disabled={disabled}
    >
      {children}
    </button>
  )
}

// end file

// === file: ../components/mentoring/representation/common/CommentTag.tsx ===
// i18n-key-prefix: commentTag
// i18n-namespace: components/mentoring/representation/common
import React from 'react'
import { RepresentationFeedbackType } from '../../../types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const CommentTag = ({ type }: { type: RepresentationFeedbackType }):JSX.Element|null => {
  const { t } = useAppTranslation('components/mentoring/representation/common')
  switch (type) {
    case 'essential':
      return (
        <div className="text-13 leading-170 font-mono font-bold rounded-3 px-8 mb-8 bg-red text-white !w-fit">
          {t('commentTag.essential')}
        </div>
      )
    case 'actionable':
      return (
        <div className="text-13 leading-170 font-mono font-bold rounded-3 px-8 mb-8 bg-warning text-white !w-fit">
          {t('commentTag.recommended')}
        </div>
      )
    default:
      return null
  }
}

// end file
```