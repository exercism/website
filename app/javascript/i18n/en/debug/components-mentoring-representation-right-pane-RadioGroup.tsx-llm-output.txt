```ts
// i18n
export default {
  "radioGroup.essential": "Essential",
  "radioGroup.recommended": "Recommended",
  "radioGroup.optional": "Optional",
  "radioGroup.celebratory": "Celebratory",
  "radioGroup.essentialTooltipTitle": "If you mark this as Essential",
  "radioGroup.essentialTooltipBody": "Student is prompted heavily to action this before proceeding. Essential enhancement.",
  "radioGroup.recommendedTooltipTitle": "If you mark this as Recommended",
  "radioGroup.recommendedTooltipBody": "Student is prompted to action this before proceeding, but not considered essential. High-value enhancement.",
  "radioGroup.optionalTooltipTitle": "If you mark this as Optional",
  "radioGroup.optionalTooltipBody": "Student is not prompted to action this before proceeding, entirely a low-value enhancement.",
  "radioGroup.celebratoryTooltipTitle": "If you mark this as Celebratory",
  "radioGroup.celebratoryTooltipBody": "Student is not prompted to action this before proceeding, congratulates the student on their solution."
}

// modified_files
// === file: ../components/mentoring/representation/right-pane/RadioGroup.tsx ===
import React, { useCallback } from 'react'
import { HowImportantProps } from './HowImportant'
import RadioButton from './RadioButton'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const RADIO_DATA = [
  {
    label: 'Essential',
    value: 'essential',
    tooltip: {
      title: 'If you mark this as Essential',
      body: 'Student is prompted heavily to action this before proceeding. Essential enhancement.',
    },
  },
  {
    label: 'Recommended',
    value: 'actionable',
    tooltip: {
      title: 'If you mark this as Recommended',
      body: 'Student is prompted to action this before proceeding, but not considered essential. High-value enhancement.',
    },
  },
  {
    label: 'Optional',
    value: 'non_actionable',
    tooltip: {
      title: 'If you mark this as Optional',
      body: 'Student is not prompted to action this before proceeding, entirely a low-value enhancement.',
    },
  },
  {
    label: 'Celebratory',
    value: 'celebratory',
    tooltip: {
      title: 'If you mark this as Celebratory',
      body: 'Student is not prompted to action this before proceeding, congratulates the student on their solution.',
    },
  },
]
export default function RadioGroup({
  feedbackType,
  setFeedbackType,
}: HowImportantProps): JSX.Element {
  const { t } = useAppTranslation('components/mentoring/representation/right-pane/RadioGroup.tsx')
  const handleRadioCheck = useCallback(
    (e) => {
      setFeedbackType(e.target.value)
    },
    [setFeedbackType]
  )

  return (
    <div>
      {RADIO_DATA.map((i) => (
        <RadioButton
          key={i.label}
          value={i.value}
          checked={feedbackType == i.value}
          onChange={handleRadioCheck}
          label={t(`radioGroup.${i.value}`)}
          tooltip={{
            title: t(`radioGroup.${i.value}TooltipTitle`),
            body: t(`radioGroup.${i.value}TooltipBody`),
          }}
        />
      ))}
    </div>
  )
}

// === end file ===
```