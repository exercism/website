```ts
// i18n
export default {
  "automationRules.noGuidance": "This representer doesn&apos;t have any guidance yet. Guidance notes are written by our maintainers to explain what normalizations occur during the representation process. If you are a maintainer, please help get them started for this representer by sending a {{prLink}}.",
  "automationRules.pleaseReadBeforeGivingFeedback": "Please read before giving feedback",
  "considerations.readThisBeforeGivingFeedback": "Please&nbsp; <link>read this</link> &nbsp;before giving your first feedback.",
  "utilityTabs.information": "Information",
  "utilityTabs.scratchpad": "Scratchpad",
  "utilityTabs.guidance": "Guidance",
  "representationFeedbackEditor.previewAndSubmit": "Preview & Submit",
  "howImportant.howImportantIsThis": "How important is this?",
  "radioButton.info": "Info",
  "radioGroup.essential": "Essential",
  "radioGroup.recommended": "Recommended",
  "radioGroup.optional": "Optional",
  "radioGroup.celebratory": "Celebratory",
  "infoTooltip.title": "Title",
  "infoTooltip.body": "Body"
}

// modified_files
// === file: ../components/mentoring/representation/right-pane/AutomationRules.tsx ===
import React from 'react'
import { CompleteRepresentationData } from '../../../types'
import { useAppTranslation } from '@/i18n/useAppTranslation'
import { Trans } from 'react-i18next'

export default function AutomationRules({
  guidance,
}: Pick<CompleteRepresentationData, 'guidance'>): JSX.Element | null {
  const { t } = useAppTranslation('components/mentoring/representation/right-pane')

  const prLink = (
    <a
      href={guidance.links.improveRepresenterGuidance}
      target="_blank"
      rel="noreferrer"
    >
      Pull Request on GitHub
    </a>
  )

  if (!guidance.representations) {
    return (
      <p className="px-24 mb-16 text-p-base">
        <Trans
          i18nKey="automationRules.noGuidance"
          values={{ prLink }}
        />
      </p>
    )
  }

  return (
    <div className="px-24 shadow-xsZ1v2 pt-12 pb-24">
      <h2 className="text-h4 mb-12">{t('automationRules.pleaseReadBeforeGivingFeedback')}</h2>
      <div
        dangerouslySetInnerHTML={{
          __html: `<div class="c-textual-content --base">${guidance.representations}</div>`,
        }}
      />
    </div>
  )
}

// === end file ===

// === file: ../components/mentoring/representation/right-pane/Considerations.tsx ===
import React from 'react'
import { CompleteRepresentationData } from '../../../types'
import { useAppTranslation } from '@/i18n/useAppTranslation'
import { Trans } from 'react-i18next'

export default function Considerations({
  guidance,
}: Pick<CompleteRepresentationData, 'guidance'>): JSX.Element | null {
  const { t } = useAppTranslation('components/mentoring/representation/right-pane')

  return (
    <p className="flex items-center justify-center font-medium text-16 leading-[24px] py-8 px-16 border-2 border-orange rounded-8 bg-bgCAlert text-textCAlert whitespace-nowrap my-16 mx-24">
      <Trans
        i18nKey="considerations.readThisBeforeGivingFeedback"
        components={{
          link: (
            <a
              href={guidance.links.representationFeedbackGuide}
              target="_blank"
              rel="noreferrer"
              className="!text-textCAlertLabel underline"
            />
          ),
        }}
      />
    </p>
  )
}

// === end file ===

// === file: ../components/mentoring/representation/right-pane/UtilityTabs.tsx ===
import { AnalyzerFeedback } from '@/components/student/iterations-list/AnalyzerFeedback'
import React, { useState } from 'react'
import { Tab, GraphicalIcon } from '../../../common'
import { CompleteRepresentationData } from '../../../types'
import { TabsContext } from '../../Session'
import { Guidance } from '../../session/Guidance'
// import { Guidance } from '../../session/Guidance'
import { Scratchpad } from '../../session/Scratchpad'
import AutomationRules from './AutomationRules'
import Considerations from './Considerations'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type RepresentationTabIndex = 'information' | 'scratchpad' | 'guidance'

export function UtilityTabs({
  data,
}: {
  data: CompleteRepresentationData
}): JSX.Element {
  const { t } = useAppTranslation('components/mentoring/representation/right-pane')
  const [tab, setTab] = useState<RepresentationTabIndex>('information')

  return (
    <TabsContext.Provider
      value={{
        current: tab,
        switchToTab: (id: string) => setTab(id as RepresentationTabIndex),
      }}
    >
      <div className="tabs" role="tablist">
        <Tab id="information" context={TabsContext}>
          <GraphicalIcon icon="comment" />
          <Tab.Title text={t('utilityTabs.information')} />
        </Tab>
        <Tab id="scratchpad" context={TabsContext}>
          <GraphicalIcon icon="scratchpad" />
          <Tab.Title text={t('utilityTabs.scratchpad')} />
        </Tab>
        <Tab id="guidance" context={TabsContext}>
          <GraphicalIcon icon="guidance" />
          <Tab.Title text={t('utilityTabs.guidance')} />
        </Tab>
      </div>
      <Tab.Panel id="information" context={TabsContext}>
        <Considerations guidance={data.guidance} />
        <AutomationRules guidance={data.guidance} />

        {data.analyzerFeedback && (
          <div className="mx-24 my-16 border-t-2 border-borderColor6 pt-16 ">
            <AnalyzerFeedback
              summary={data.analyzerFeedback.summary}
              comments={data.analyzerFeedback.comments}
              automatedFeedbackInfoLink={'???'}
              track={data.representation.track}
            />
          </div>
        )}
      </Tab.Panel>
      <Tab.Panel id="scratchpad" context={TabsContext}>
        <Scratchpad
          scratchpad={data.scratchpad}
          track={data.representation.track}
          exercise={data.representation.exercise}
        />
      </Tab.Panel>
      <Tab.Panel id="guidance" context={TabsContext}>
        <Guidance
          guidance={data.guidance}
          mentorSolution={data.mentorSolution}
          exemplarFiles={data.guidance.exemplarFiles}
          language={data.representation.track.highlightjsLanguage}
          links={data.guidance.links}
        />
      </Tab.Panel>
    </TabsContext.Provider>
  )
}

// === end file ===

// === file: ../components/mentoring/representation/right-pane/RepresentationFeedbackEditor.tsx ===
import React, {
  FocusEventHandler,
  MouseEventHandler,
  useCallback,
  useEffect,
  useState,
} from 'react'
import {
  MarkdownEditorHandle,
  default as MarkdownEditor,
} from '@/components/common/MarkdownEditor'
import { PrimaryButton } from '../common/PrimaryButton'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function RepresentationFeedbackEditor({
  onChange,
  value,
  expanded,
  onFocus,
  onBlur,
  onPreviewClick,
}: {
  onChange: (value: string) => void
  onFocus: MouseEventHandler<HTMLDivElement>
  onBlur: FocusEventHandler<HTMLDivElement>
  value: string
  expanded: boolean
  onPreviewClick: () => void
}): JSX.Element {
  const { t } = useAppTranslation('components/mentoring/representation/right-pane')
  const [editor, setEditor] = useState<MarkdownEditorHandle | null>(null)

  const handleEditorDidMount = useCallback((editor) => {
    setEditor(editor)
  }, [])

  useEffect(() => {
    if (!expanded) {
      return
    }

    editor?.focus()
  }, [editor, expanded])

  return (
    <div
      id="markdown-editor"
      onClick={onFocus}
      onBlur={onBlur}
      className={`c-markdown-editor ${
        expanded ? '--expanded' : '--compressed'
      }`}
    >
      <MarkdownEditor
        onChange={onChange}
        editorDidMount={handleEditorDidMount}
        value={value}
      />

      <div className="editor-footer">
        <PrimaryButton
          disabled={!/[a-zA-Z0-9]/.test(value)}
          className="px-[18px] py-[12px] "
          onClick={onPreviewClick}
        >
          {t('representationFeedbackEditor.previewAndSubmit')}
        </PrimaryButton>
      </div>
    </div>
  )
}

// === end file ===

// === file: ../components/mentoring/representation/right-pane/HowImportant.tsx ===
import React, { SetStateAction } from 'react'
import { RepresentationFeedbackType } from '../../../types'
import RadioGroup from './RadioGroup'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export type HowImportantProps = {
  feedbackType: RepresentationFeedbackType
  setFeedbackType: React.Dispatch<SetStateAction<RepresentationFeedbackType>>
}

export default function HowImportant({
  feedbackType,
  setFeedbackType,
}: HowImportantProps): JSX.Element {
  const { t } = useAppTranslation('components/mentoring/representation/right-pane')
  return (
    <div className="mb-4">
      <h2 className="text-h6 mb-8">{t('howImportant.howImportantIsThis')}</h2>
      <RadioGroup
        feedbackType={feedbackType}
        setFeedbackType={setFeedbackType}
      />
    </div>
  )
}

// === end file ===

// === file: ../components/mentoring/representation/right-pane/RightPane.tsx ===
import React, { useState } from 'react'
import {
  CompleteRepresentationData,
  RepresentationFeedbackType,
} from '@/components/types'
import HowImportant from './HowImportant'
import MentoringConversation from './MentoringConversation'
import { UtilityTabs } from './UtilityTabs'

export function RightPane({
  data,
}: {
  data: CompleteRepresentationData
}): JSX.Element {
  const [feedbackType, setFeedbackType] = useState<RepresentationFeedbackType>(
    data.representation.feedbackType ||
      data.representation.draftFeedbackType ||
      'essential'
  )

  return (
    <>
      <UtilityTabs data={data} />
      <div className="comment-section --comment">
        <HowImportant
          feedbackType={feedbackType}
          setFeedbackType={setFeedbackType}
        />

        <MentoringConversation feedbackType={feedbackType} data={data} />
      </div>
    </>
  )
}

// === end file ===

// === file: ../components/mentoring/representation/right-pane/MentoringConversation.tsx ===
import React, { useCallback, useState } from 'react'
import { useMutation } from '@tanstack/react-query'
import { sendRequest } from '@/utils/send-request'
import {
  CompleteRepresentationData,
  RepresentationFeedbackType,
} from '@/components/types'
import { PreviewAutomationModal } from '../modals/PreviewAutomationModal'
import { SubmittedAutomationModal } from '../modals/SubmittedAutomationModal'
import { RepresentationFeedbackEditor } from './RepresentationFeedbackEditor'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export default function MentoringConversation({
  data,
  feedbackType,
}: {
  data: CompleteRepresentationData
  feedbackType: RepresentationFeedbackType
}): JSX.Element {
  const { t } = useAppTranslation('components/mentoring/representation/right-pane')
  const [value, setValue] = useState(
    data.representation.feedbackMarkdown ||
      data.representation.draftFeedbackMarkdown ||
      ''
  )
  const [isSuccessModalOpen, setIsSuccessModalOpen] = useState(false)
  const [isPreviewModalOpen, setIsPreviewModalOpen] = useState(false)
  const [expanded, setExpanded] = useState(
    !!data.representation.feedbackMarkdown ||
      !!data.representation.draftFeedbackMarkdown ||
      false
  )
  const [html, setHtml] = useState('<p>Loading..</p>')

  const handleChange = useCallback((value) => setValue(value), [setValue])

  const handleExpansion = useCallback((expanded) => {
    if (!expanded) {
      setExpanded(true)
    }
  }, [])

  const handleCompression = useCallback((value) => {
    if (!value) {
      setExpanded(false)
    }
  }, [])

  const { mutate: generateHTML } = useMutation({
    mutationFn: async (markdown: string) => {
      const { fetch } = sendRequest<{ html: string }>({
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        // querySelector may return undefined, but not in this case.
        endpoint: document.querySelector<HTMLMetaElement>(
          'meta[name="parse-markdown-url"]'
        )?.content,
        method: 'POST',
        body: JSON.stringify({
          parse_options: {
            strip_h1: false,
            lower_heading_levels_by: 2,
          },
          markdown,
        }),
      })
      return fetch.then((res) => {
        setHtml(`<div class="c-textual-content --small">${res.html}</div>`)
      })
    },
  })

  const handlePreviewClick = useCallback(() => {
    setIsPreviewModalOpen(true)
    generateHTML(value)
  }, [generateHTML, value])

  return (
    <div>
      <RepresentationFeedbackEditor
        onChange={handleChange}
        value={value}
        expanded={expanded}
        onFocus={() => handleExpansion(expanded)}
        onBlur={() => handleCompression(value)}
        onPreviewClick={handlePreviewClick}
      />

      <PreviewAutomationModal
        feedbackType={feedbackType}
        markdown={value}
        data={data}
        isOpen={isPreviewModalOpen}
        html={html}
        onClose={() => setIsPreviewModalOpen(false)}
        onSuccessfulSubmit={() => {
          setIsPreviewModalOpen(false)
          setIsSuccessModalOpen(true)
        }}
      />
      <SubmittedAutomationModal
        goBackLink={data.links.success}
        isOpen={isSuccessModalOpen}
        onClose={() => setIsSuccessModalOpen(false)}
      />
    </div>
  )
}

// === end file ===

// === file: ../components/mentoring/representation/right-pane/RadioButton.tsx ===
import React, { ChangeEventHandler } from 'react'
import { Icon } from '../../../common'
import { ExercismTippy } from '../../../misc/ExercismTippy'
import InfoTooltip, { Tooltip } from './InfoTooltip'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export default function RadioButton({
  label,
  value,
  checked,
  defaultChecked,
  onChange,
  tooltip,
  name,
  labelClassName,
  className,
}: {
  label: string
  checked?: boolean
  defaultChecked?: boolean
  onChange?: ChangeEventHandler<HTMLInputElement>
  tooltip?: Tooltip
  value: string
  name?: string
  labelClassName?: string
  className?: string
}): JSX.Element {
  const { t } = useAppTranslation('components/mentoring/representation/right-pane')
  return (
    <label className={`c-radio-wrapper mb-8 hover:cursor-pointer ${className}`}>
      <input
        name={name}
        checked={checked}
        defaultChecked={defaultChecked}
        onChange={onChange}
        value={value}
        type="radio"
      />
      <div className={`row text-radio-essential ${labelClassName}`}>
        <div className="c-radio mr-16 " />
        <div className="mr-8">{label}</div>
        {tooltip && (
          <ExercismTippy
            content={<InfoTooltip title={tooltip.title} body={tooltip.body} />}
          >
            <div>
              <Icon
                className="w-[15px] h-[15px] filter-textColor6"
                icon="info-circle"
                alt={t('radioButton.info')}
              />
            </div>
          </ExercismTippy>
        )}
      </div>
    </label>
  )
}

// === end file ===

// === file: ../components/mentoring/representation/right-pane/RadioGroup.tsx ===
import React, { useCallback } from 'react'
import { HowImportantProps } from './HowImportant'
import RadioButton from './RadioButton'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const RADIO_DATA = [
  {
    label: 'Essential',
    value: 'essential',
    tooltip: {
      title: 'If you mark this as Essential',
      body: 'Student is prompted heavily to action this before proceeding. Essential enhancement.',
    },
  },
  {
    label: 'Recommended',
    value: 'actionable',
    tooltip: {
      title: 'If you mark this as Recommended',
      body: 'Student is prompted to action this before proceeding, but not considered essential. High-value enhancement.',
    },
  },
  {
    label: 'Optional',
    value: 'non_actionable',
    tooltip: {
      title: 'If you mark this as Optional',
      body: 'Student is not prompted to action this before proceeding, entirely a low-value enhancement.',
    },
  },
  {
    label: 'Celebratory',
    value: 'celebratory',
    tooltip: {
      title: 'If you mark this as Celebratory',
      body: 'Student is not prompted to action this before proceeding, congratulates the student on their solution.',
    },
  },
]
export default function RadioGroup({
  feedbackType,
  setFeedbackType,
}: HowImportantProps): JSX.Element {
  const { t } = useAppTranslation('components/mentoring/representation/right-pane')
  const handleRadioCheck = useCallback(
    (e) => {
      setFeedbackType(e.target.value)
    },
    [setFeedbackType]
  )

  return (
    <div>
      {RADIO_DATA.map((i) => (
        <RadioButton
          key={i.label}
          value={i.value}
          checked={feedbackType == i.value}
          onChange={handleRadioCheck}
          label={t(`radioGroup.${i.label.toLowerCase()}`)}
          tooltip={i.tooltip}
        />
      ))}
    </div>
  )
}

// === end file ===

// === file: ../components/mentoring/representation/right-pane/InfoTooltip.tsx ===
import React from 'react'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export type Tooltip = {
  body: string
  title: string
}
export default function InfoTooltip({ title, body }: Tooltip): JSX.Element {
  const { t } = useAppTranslation('components/mentoring/representation/right-pane')
  return (
    <div className="bg-backgroundColorB w-[460px] py-16 px-24 shadow-lgZ1 rounded-8">
      <h3 className="text-h6 mb-4">{t('infoTooltip.title')}</h3>
      <p className="text-[15px] leading-160">{t('infoTooltip.body')}</p>
    </div>
  )
}

// === end file ===
```