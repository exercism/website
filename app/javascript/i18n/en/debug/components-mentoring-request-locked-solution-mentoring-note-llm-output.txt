```ts
// i18n
export default {
  "lockedSolutionMentoringNote.mentoringDocs": "mentoring docs",
  "lockedSolutionMentoringNote.solutionLocked": "This solution is locked until {{lockedUntil}} ({{diffMins}} from now).",
  "lockedSolutionMentoringNote.solutionNoLongerLocked": "This solution is no longer locked and another mentor may pick it up",
  "extendLockedUntilModal.mentorLockExpiring": "Mentor Lock close to expiring",
  "extendLockedUntilModal.timeRemaining": "You only have {{diffMinutes}} remaining to submit your comment before this mentor request is unlocked for other mentors to reply to.",
  "extendLockedUntilModal.wouldLikeMoreTime": "Would you like more time?",
  "extendLockedUntilModal.yesExtend": "Yes, extend for 30 minutes",
  "extendLockedUntilModal.noThankYou": "No, thank you"
}

// modified_files
// === file: ../components/mentoring/request/locked-solution-mentoring-note/LockedSolutionMentoringNote.tsx ===
import React from 'react'
import { ExtendLockedUntilModal } from './ExtendLockedUntilModal'
import type { MentorSessionRequest } from '@/components/types'
import { useLockedSolutionMentoringNote } from './useLockedSolutionMentoringNote'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type Links = {
  mentoringDocs: string
}

export const LockedSolutionMentoringNote = ({
  links,
  request,
}: {
  links: Links
  request: MentorSessionRequest
}): JSX.Element => {
  const { t } = useAppTranslation('components/mentoring/request/locked-solution-mentoring-note')
  const {
    lockedUntil,
    diff,
    diffMins,
    diffMinutes,
    extendModalOpen,
    setExtendModalOpen,
    extendLockedUntil,
    adjustOpenModalAt,
  } = useLockedSolutionMentoringNote(request)

  return (
    <>
      <div className="note">
        Check out our{' '}
        <a href={links.mentoringDocs} target="_blank" rel="noreferrer">
          {t('lockedSolutionMentoringNote.mentoringDocs')}
        </a>{' '}
        for more information.{' '}
        {diff > 0
          ? t('lockedSolutionMentoringNote.solutionLocked', { lockedUntil, diffMins })
          : t('lockedSolutionMentoringNote.solutionNoLongerLocked')}
      </div>
      <ExtendLockedUntilModal
        open={extendModalOpen}
        diffMinutes={diffMinutes}
        onClose={() => setExtendModalOpen(false)}
        onExtend={extendLockedUntil}
        adjustOpenModalAt={adjustOpenModalAt}
      />
    </>
  )
}

// === end file ===

// modified_files
// === file: ../components/mentoring/request/locked-solution-mentoring-note/ExtendLockedUntilModal.tsx ===
import React from 'react'
import { Modal } from '@/components/modals'
import { GraphicalIcon } from '@/components/common'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function ExtendLockedUntilModal({
  open,
  onClose,
  onExtend,
  diffMinutes,
  adjustOpenModalAt,
}: {
  open: boolean
  onClose: () => void
  onExtend: () => void
  diffMinutes: string
  adjustOpenModalAt: () => void
}): JSX.Element {
  const { t } = useAppTranslation('components/mentoring/request/locked-solution-mentoring-note')

  return (
    <Modal
      onClose={onClose}
      style={{ content: { width: '740px' } }}
      open={open}
      shouldCloseOnEsc={false}
      shouldCloseOnOverlayClick={false}
      aria={{
        modal: true,
        labelledby: 'extend-mentoring-request-lock-label',
        describedby: 'extend-mentoring-request-lock-description',
      }}
    >
      <div className="flex items-start">
        <div className="flex flex-col mr-32">
          <h3 id="extend-mentoring-request-lock-label" className="text-h3 mb-6">
            {t('extendLockedUntilModal.mentorLockExpiring')}
          </h3>
          <p
            className="text-p-large mb-8"
            id="extend-mentoring-request-lock-description"
          >
            {t('extendLockedUntilModal.timeRemaining', { diffMinutes })}
          </p>
          <p className="text-p-large mb-20">{t('extendLockedUntilModal.wouldLikeMoreTime')}</p>
          <div className="flex gap-16">
            <button onClick={onExtend} className="btn-m btn-primary">
              {t('extendLockedUntilModal.yesExtend')}
            </button>
            <button
              className="btn-m btn-secondary"
              onClick={() => {
                onClose()
                adjustOpenModalAt()
              }}
            >
              {t('extendLockedUntilModal.noThankYou')}
            </button>
          </div>
        </div>
        <GraphicalIcon
          icon="alarm-alert"
          category="graphics"
          className="ml-auto"
          height={128}
          width={128}
        />
      </div>
    </Modal>
  )
}

// === end file ===
```