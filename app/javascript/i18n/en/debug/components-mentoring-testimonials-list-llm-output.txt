```ts
// i18n
export default {
  "orderSelect.sortByUnrevealedFirst": "Sort by Unrevealed First",
  "orderSelect.sortByNewestFirst": "Sort by Newest First",
  "orderSelect.sortByOldestFirst": "Sort by Oldest First",
  "trackDropdown.title": "{track.title}",
  "revealedTestimonial.new": "New",
  "unrevealedTestimonial.someoneLeftYouATestimonial": "Someone left you a testimonialâ€¦ ðŸ˜²",
  "unrevealedTestimonial.clickTapToReveal": "Click / tap to reveal",
}

// modified_files
// === file: ../components/mentoring/testimonials-list/OrderSelect.tsx ===
import React from 'react'
import { SingleSelect } from '../../common/SingleSelect'
import { Order } from '../TestimonialsList'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const OptionComponent = ({ option: order }: { option: Order }) => {
  const { t } = useAppTranslation('components/mentoring/testimonials-list')

  switch (order) {
    case 'unrevealed':
      return <React.Fragment>{t('orderSelect.sortByUnrevealedFirst')}</React.Fragment>
    case 'newest':
      return <React.Fragment>{t('orderSelect.sortByNewestFirst')}</React.Fragment>
    case 'oldest':
      return <React.Fragment>{t('orderSelect.sortByOldestFirst')}</React.Fragment>
  }
}

export const OrderSelect = ({
  value,
  setValue,
}: {
  value: Order
  setValue: (value: Order) => void
}): JSX.Element => {
  return (
    <SingleSelect<Order>
      options={['unrevealed', 'newest', 'oldest']}
      value={value}
      setValue={setValue}
      SelectedComponent={OptionComponent}
      OptionComponent={OptionComponent}
    />
  )
}

// === end file ===
// === file: ../components/mentoring/testimonials-list/TrackDropdown.tsx ===
import React, { useCallback } from 'react'
import { TrackSelect, TrackLogo } from '@/components/common/TrackSelect'
import { Track } from '../TestimonialsList'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const OptionComponent = ({ option: track }: { option: Track }) => {
  const { t } = useAppTranslation('components/mentoring/testimonials-list')
  return (
    <React.Fragment>
      <TrackLogo track={track} />
      <div className="title">{t('trackDropdown.title', {track})}</div>
    </React.Fragment>
  )
}

const SelectedComponent = ({ option: track }: { option: Track }) => {
  return (
    <>
      <TrackLogo track={track} />
      <div className="sr-only">{track.title}</div>
    </>
  )
}

export const TrackDropdown = ({
  tracks,
  value,
  setValue,
}: {
  tracks: readonly Track[]
  value: string
  setValue: (value: string) => void
}): JSX.Element => {
  const track = tracks.find((track) => track.slug === value) || tracks[0]
  const handleSet = useCallback(
    (track: Track) => {
      setValue(track.slug)
    },
    [setValue]
  )

  return (
    <TrackSelect
      tracks={tracks}
      value={track}
      setValue={handleSet}
      OptionComponent={OptionComponent}
      SelectedComponent={SelectedComponent}
      size="inline"
    />
  )
}

// === end file ===
// === file: ../components/mentoring/testimonials-list/RevealedTestimonial.tsx ===
import React, { useState } from 'react'
import { QueryKey } from '@tanstack/react-query'
import { fromNow } from '@/utils/date'
import { Avatar, GraphicalIcon, HandleWithFlair, TrackIcon } from '../../common'
import { TestimonialModal } from '../../modals/TestimonialModal'
import { Testimonial, SharePlatform } from '../../types'
import { OptionsDropdown } from './revealed-testimonial/OptionsDropdown'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const RevealedTestimonial = ({
  testimonial,
  cacheKey,
  isRevealed,
  platforms,
}: {
  testimonial: Testimonial
  cacheKey: QueryKey
  isRevealed: boolean
  platforms: readonly SharePlatform[]
}): JSX.Element => {
  const [open, setOpen] = useState(false)
  const { t } = useAppTranslation('components/mentoring/testimonials-list')

  return (
    <React.Fragment>
      <div className="testimonial">
        <a
          href="#"
          onClick={(e) => {
            setOpen(true)
            e.preventDefault()
          }}
        >
          <TrackIcon {...testimonial.track} />
          <Avatar
            src={testimonial.student.avatarUrl}
            handle={testimonial.student.handle}
          />
          <div className="info">
            <div className="student">
              <HandleWithFlair
                handle={testimonial.student.handle}
                flair={testimonial.student.flair}
              />
            </div>
            <div className="exercise">
              on {testimonial.exercise.title} in {testimonial.track.title}
            </div>
          </div>
          {isRevealed ? <div className="new">{t('revealedTestimonial.new')}</div> : null}
          <div className="content">{testimonial.content}</div>
          <time dateTime={testimonial.createdAt}>
            {fromNow(testimonial.createdAt)}
          </time>
          <GraphicalIcon icon="modal" className="action-icon" />
        </a>
        <OptionsDropdown testimonial={testimonial} cacheKey={cacheKey} />
      </div>
      <TestimonialModal
        open={open}
        testimonial={testimonial}
        onClose={() => setOpen(false)}
        platforms={platforms}
      />
    </React.Fragment>
  )
}

// === end file ===
// === file: ../components/mentoring/testimonials-list/UnrevealedTestimonial.tsx ===
import React, { useState, useCallback } from 'react'
import { useMutation, QueryKey, useQueryClient } from '@tanstack/react-query'
import { fromNow } from '../../../utils/time'
import { GraphicalIcon, TrackIcon } from '../../common'
import { SharePlatform, Testimonial } from '../../types'
import { sendRequest } from '../../../utils/send-request'
import { typecheck } from '../../../utils/typecheck'
import { PaginatedResult } from '../TestimonialsList'
import { FetchingBoundary } from '../../FetchingBoundary'
import { TestimonialModal } from '../../modals/TestimonialModal'
import { useIsMounted } from 'use-is-mounted'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const DEFAULT_ERROR = new Error('Unable to reveal testimonial')

export const UnrevealedTestimonial = ({
  testimonial,
  onRevealed,
  cacheKey,
  platforms,
}: {
  testimonial: Testimonial
  onRevealed: () => void
  cacheKey: QueryKey
  platforms: readonly SharePlatform[]
}): JSX.Element => {
  const queryClient = useQueryClient()
  const isMountedRef = useIsMounted()
  const [open, setOpen] = useState(false)
  const [revealedTestimonial, setRevealedTestimonial] =
    useState<Testimonial | null>(null)
  const { t } = useAppTranslation('components/mentoring/testimonials-list')
  const {
    mutate: reveal,
    status,
    error,
  } = useMutation<Testimonial>({
    mutationFn: async () => {
      const { fetch } = sendRequest({
        endpoint: testimonial.links.reveal,
        method: 'PATCH',
        body: null,
      })

      return fetch.then((json) => typecheck<Testimonial>(json, 'testimonial'))
    },
    onSuccess: (testimonial) => {
      if (!isMountedRef.current) {
        return
      }

      setRevealedTestimonial(testimonial)
      setOpen(true)
    },
  })
  const updateCache = useCallback(() => {
    const oldData = queryClient.getQueryData<PaginatedResult>(cacheKey)

    if (!oldData || !revealedTestimonial) {
      return
    }

    queryClient.setQueryData(cacheKey, {
      ...oldData,
      results: oldData.results.map((oldTestimonial) => {
        return oldTestimonial.uuid === revealedTestimonial.uuid
          ? revealedTestimonial
          : oldTestimonial
      }),
    })
  }, [cacheKey, revealedTestimonial, queryClient])

  return (
    <a
      href="#"
      onClick={(e) => {
        reveal()
        e.preventDefault()
      }}
      className="unrevealed-testimonial"
    >
      <TrackIcon {...testimonial.track} />
      <GraphicalIcon icon="avatar-placeholder" className="c-avatar" />
      <div className="info">
        <div className="student">{t('unrevealedTestimonial.someoneLeftYouATestimonial')}</div>
        <div className="exercise">{t('unrevealedTestimonial.clickTapToReveal')}</div>
      </div>
      <time dateTime={testimonial.createdAt}>
        {fromNow(testimonial.createdAt)}
      </time>
      <GraphicalIcon icon="modal" className="action-icon" />
      <FetchingBoundary
        error={error}
        status={status}
        defaultError={DEFAULT_ERROR}
      />
      {revealedTestimonial ? (
        <TestimonialModal
          open={open}
          testimonial={revealedTestimonial}
          onClose={() => {
            setOpen(false)
            updateCache()
            onRevealed()
          }}
          platforms={platforms}
        />
      ) : null}
    </a>
  )
}

// === end file ===
```