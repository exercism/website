```ts
// i18n
export default {
  "exerciseCompletedModal.awesomeWorkLearning": "Awesome work. You’re one step closer to learning {{trackTitle}} 🚀",
  "exerciseCompletedModal.learntConcepts": "You’ve learnt ",
  "exerciseCompletedModal.conceptsCount": "{{conceptCount}} {{conceptCount_plural}}",
  "exerciseCompletedModal.conceptsCount_one": "concept",
  "exerciseCompletedModal.conceptsCount_other": "concepts",
  "exerciseCompletedModal.unlockedExercises": " and unlocked {{unlockedExercisesCount}} {{unlockedExercisesCount_plural}}",
  "exerciseCompletedModal.unlockedExercises_one": "exercise",
  "exerciseCompletedModal.unlockedExercises_other": "exercises",
  "exerciseCompletedModal.byCompleting": " by completing this exercise.",
  "exerciseCompletedModal.showMeMoreConcepts": "Show me more concepts",
  "exerciseCompletedModal.returnToExercise": "Return to the exercise",
  "exerciseCompletedModal.awesomeWorkMastering": "Awesome work. You’re one step closer to mastering {{trackTitle}} 🚀",
  "exerciseCompletedModal.progressedWith": "You’ve progressed with ",
  "exerciseCompletedModal.oncePracticedMore": "Once you've practiced some more {{trackTitle}}, come back to this exercise and see if you can make it even better.",
  "exerciseCompletedModal.showMeMoreExercises": "Show me more exercises",
  "exerciseCompletedModal.youCompleted": "You've completed {{exerciseTitle}}!",
  "publishSolutionModal.publishKnowledge": "Publish your code and share your knowledge",
  "publishSolutionModal.publishHelpOthers": "By publishing your code, you'll help others learn from your work. You can choose which iterations you publish, add more iterations once it's published, and unpublish it at any time.",
  "tutorialCompletedModal.journeyStart": "This is just the start of your journey on the {{trackTitle}} track 🚀",
  "tutorialCompletedModal.readyToGetStuck": "You’re now ready to get stuck into some ",
  "tutorialCompletedModal.realExercises": "real exercises",
  "tutorialCompletedModal.weHaveAlsoRevealed": "We’ve also revealed {{trackTitle}}’s ",
  "tutorialCompletedModal.conceptCount": "{{conceptCount}} concepts for you to take a look at.",
  "tutorialCompletedModal.accessToMentoring": "Once you start your next exercise, you’ll have access to the mentoring section on your track too.",
  "tutorialCompletedModal.showMeConcepts": "Show me the Concepts",
  "tutorialCompletedModal.returnToTutorial": "Return to “{{exerciseTitle}}”",
  "publishSolutionForm.yesShareSolution": "Yes, I'd like to share my solution with the community.",
  "publishSolutionForm.noMarkComplete": "No, I just want to mark the exercise as complete.",
  "publishSolutionForm.confirm": "Confirm",
}

// modified_files
// === file: ../components/modals/complete-exercise-modal/ExerciseCompletedModal.tsx ===
import React, { useCallback } from 'react'
import { Modal } from '../Modal'
import { ExerciseIcon } from '../../common'
import { ConceptProgression } from './exercise-completed-modal/ConceptProgression'
import { Unlocks } from './exercise-completed-modal/Unlocks'
import { ExerciseCompletion } from '../CompleteExerciseModal'
import { redirectTo } from '../../../utils/redirect-to'
import pluralize from 'pluralize'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const ExerciseCompletedModal = ({
  open,
  completion,
  ...props
}: {
  open: boolean
  completion: ExerciseCompletion
}): JSX.Element => {
  const { t } = useAppTranslation('components/modals/complete-exercise-modal')
  const {
    track,
    exercise,
    conceptProgressions,
    unlockedExercises,
    unlockedConcepts,
  } = completion

  const handleContinue = useCallback(() => {
    redirectTo(exercise.links.self)
  }, [exercise.links.self])

  const content =
    exercise.type == 'concept' ? (
      <>
        <h3>
          {t('exerciseCompletedModal.awesomeWorkLearning', {
            trackTitle: track.title,
          })}
        </h3>
        {conceptProgressions.length > 0 ? (
          <div className="info">
            {t('exerciseCompletedModal.learntConcepts')}
            <strong>
              {conceptProgressions.length}{' '}
              {t('exerciseCompletedModal.conceptsCount', {
                count: conceptProgressions.length,
              })}
            </strong>
            {unlockedExercises.length > 0
              ? t('exerciseCompletedModal.unlockedExercises', {
                  unlockedExercisesCount: unlockedExercises.length,
                }) + t('exerciseCompletedModal.byCompleting')
              : null}{' '}
          </div>
        ) : null}
        <div className="progressed-concepts">
          {conceptProgressions.map((progression) => (
            <ConceptProgression key={progression.name} {...progression} />
          ))}
        </div>
        {unlockedExercises.length !== 0 || unlockedConcepts.length !== 0 ? (
          <Unlocks
            unlockedExercises={unlockedExercises}
            unlockedConcepts={unlockedConcepts}
          />
        ) : null}

        <div className="btns">
          {track.numConcepts > 0 ? (
            <a href={track.links.concepts} className="btn-primary btn-m">
              {t('exerciseCompletedModal.showMeMoreConcepts')}
            </a>
          ) : null}
          <button onClick={handleContinue} className="btn">
            {t('exerciseCompletedModal.returnToExercise')}
          </button>
        </div>
      </>
    ) : (
      <>
        <h3>
          {t('exerciseCompletedModal.awesomeWorkMastering', {
            trackTitle: track.title,
          })}
        </h3>
        {conceptProgressions.length > 0 ? (
          <>
            <div className="info">
              {t('exerciseCompletedModal.progressedWith')}
              <strong>
                {conceptProgressions.length}{' '}
                {t('exerciseCompletedModal.conceptsCount', {
                  count: conceptProgressions.length,
                })}
              </strong>{' '}
              by completing this exercise.
            </div>
            <div className="progressed-concepts">
              {conceptProgressions.map((progression) => (
                <ConceptProgression key={progression.name} {...progression} />
              ))}
            </div>
          </>
        ) : (
          <div className="info">
            {t('exerciseCompletedModal.oncePracticedMore', {
              trackTitle: track.title,
            })}
          </div>
        )}

        <div className="btns">
          <a href={track.links.exercises} className="btn-primary btn-m">
            {t('exerciseCompletedModal.showMeMoreExercises')}
          </a>
          <button onClick={handleContinue} className="btn">
            {t('exerciseCompletedModal.returnToExercise')}
          </button>
        </div>
      </>
    )
  return (
    <Modal
      cover={true}
      open={open}
      className="m-completed-exercise c-completed-exercise-progress"
      onClose={() => null}
      {...props}
    >
      <ExerciseIcon iconUrl={exercise.iconUrl} />
      <h2>
        {t('exerciseCompletedModal.youCompleted', {
          exerciseTitle: exercise.title,
        })}
      </h2>
      {content}
    </Modal>
  )
}

// === end file ===

// === file: ../components/modals/complete-exercise-modal/PublishSolutionModal.tsx ===
import React from 'react'
import { Modal, ModalProps } from '../Modal'
import { GraphicalIcon } from '../../common'
import { PublishSolutionForm } from './PublishSolutionForm'
import { ExerciseCompletion } from '../CompleteExerciseModal'
import { Iteration } from '../../types'
import { generateAriaFieldIds } from '@/utils/generate-aria-field-ids'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const PublishSolutionModal = ({
  open,
  iterations,
  endpoint,
  onSuccess,
  ...props
}: Omit<ModalProps, 'className'> & {
  open: boolean
  iterations: readonly Iteration[]
  endpoint: string
  onSuccess: (data: ExerciseCompletion) => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/modals/complete-exercise-modal')
  const ariaObject = generateAriaFieldIds('publish-code')
  return (
    <Modal
      cover={true}
      open={open}
      aria={ariaObject}
      className="m-publish-exercise"
      closeButton
      {...props}
    >
      <div className="content">
        <GraphicalIcon icon="publish" className="publish-icon" />
        <h2 id={ariaObject.labelledby} className="title">
          {t('publishSolutionModal.publishKnowledge')}
        </h2>
        <p id={ariaObject.describedby}>
          {t('publishSolutionModal.publishHelpOthers')}
        </p>
        <PublishSolutionForm
          endpoint={endpoint}
          iterations={iterations}
          onSuccess={onSuccess}
        />
      </div>
      <GraphicalIcon
        icon="laptop-man-1"
        className="decorative-image"
        category="graphics"
      />
    </Modal>
  )
}

// === end file ===

// === file: ../components/modals/complete-exercise-modal/TutorialCompletedModal.tsx ===
import React from 'react'
import { Modal } from '../Modal'
import { GraphicalIcon } from '../../common'
import { ExerciseCompletion } from '../CompleteExerciseModal'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const TutorialCompletedModal = ({
  open,
  completion,
}: {
  open: boolean
  completion: ExerciseCompletion
}): JSX.Element => {
  const { t } = useAppTranslation('components/modals/complete-exercise-modal')

  return (
    <Modal
      cover={true}
      open={open}
      className="m-completed-tutorial-exercise"
      onClose={() => {}}
    >
      <GraphicalIcon icon="hello-world" category="graphics" />
      <h2>{t('tutorialCompletedModal.journeyStart', { trackTitle: completion.exercise.title })}</h2>
      <h3>
        {t('tutorialCompletedModal.journeyStart', { trackTitle: completion.track.title })}
      </h3>
      <p>
        {t('tutorialCompletedModal.readyToGetStuck')}
        <a href={completion.track.links.exercises}>{t('tutorialCompletedModal.realExercises')}</a>.
        {completion.track.course ? (
          <>
            <br />
            {t('tutorialCompletedModal.weHaveAlsoRevealed', { trackTitle: completion.track.title })}
            {completion.track.numConcepts} {t('tutorialCompletedModal.conceptCount', { conceptCount: completion.track.numConcepts })}
          </>
        ) : (
          ''
        )}
      </p>
      <div className="info">
        {t('tutorialCompletedModal.accessToMentoring')}
      </div>
      <div className="btns">
        {completion.track.course ? (
          <a
            href={completion.track.links.concepts}
            className="btn-primary btn-m"
          >
            <span>{t('tutorialCompletedModal.showMeConcepts')}</span>
            <GraphicalIcon icon="arrow-right" />
          </a>
        ) : (
          <a
            href={completion.track.links.exercises}
            className="btn-primary btn-m"
          >
            Show me more exercises
          </a>
        )}
        <a href={completion.exercise.links.self} className="btn">
          {t('tutorialCompletedModal.returnToTutorial', { exerciseTitle: completion.exercise.title })}
        </a>
      </div>
    </Modal>
  )
}

// === end file ===

// === file: ../components/modals/complete-exercise-modal/PublishSolutionForm.tsx ===
import React, { useCallback, useState } from 'react'
import { MutationStatus, useMutation } from '@tanstack/react-query'
import { sendRequest } from '../../../utils/send-request'
import { Icon, Loading } from '../../common'
import { ExerciseCompletion } from '../CompleteExerciseModal'
import { ErrorBoundary, useErrorHandler } from '../../ErrorBoundary'
import { IterationSelector } from '../student/IterationSelector'
import { Iteration } from '../../types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const DEFAULT_ERROR = new Error('Unable to complete exercise')

const ConfirmButton = ({
  status,
  error,
}: {
  status: MutationStatus
  error: unknown
}) => {
  useErrorHandler(error, { defaultError: DEFAULT_ERROR })

  switch (status) {
    case 'idle':
      return (
        <button className="confirm-button btn-primary btn-l">
          {t('publishSolutionForm.confirm')}
        </button>
      )
    case 'pending':
      return (
        <>
          <div className="confirm-button btn-primary btn-l w-[125px]">
            <Icon icon="spinner" className="animate-spin-slow" alt="loading" />
          </div>
          <Loading />
        </>
      )
    default:
      return null
  }
}

export const PublishSolutionForm = ({
  endpoint,
  iterations,
  onSuccess,
}: {
  endpoint: string
  iterations: readonly Iteration[]
  onSuccess: (data: ExerciseCompletion) => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/modals/complete-exercise-modal')
  const [toPublish, setToPublish] = useState(true)
  const [iterationIdxToPublish, setIterationIdxToPublish] = useState<
    number | null
  >(null)
  const {
    mutate: mutation,
    status,
    error,
  } = useMutation<ExerciseCompletion>({
    mutationFn: async () => {
      const { fetch } = sendRequest({
        endpoint: endpoint,
        method: 'PATCH',
        body: JSON.stringify({
          publish: toPublish,
          iteration_idx: iterationIdxToPublish,
        }),
      })

      return fetch
    },
    onSuccess: onSuccess,
  })

  const handleSubmit = useCallback(
    (e) => {
      e.preventDefault()

      mutation()
    },
    [mutation]
  )

  return (
    <form data-turbo="false" onSubmit={handleSubmit}>
      <label className="c-radio-wrapper">
        <input
          type="radio"
          name="share"
          checked={toPublish}
          onChange={() => setToPublish(true)}
        />
        <div className="row">
          <div className="c-radio" />
          <div className="label">
            {t('publishSolutionForm.yesShareSolution')}
          </div>
        </div>
      </label>
      {toPublish ? (
        <IterationSelector
          iterationIdx={iterationIdxToPublish}
          setIterationIdx={setIterationIdxToPublish}
          iterations={iterations}
        />
      ) : null}
      <label className="c-radio-wrapper">
        <input
          type="radio"
          name="share"
          checked={!toPublish}
          onChange={() => setToPublish(false)}
        />
        <div className="row">
          <div className="c-radio" />
          <div className="label">
            {t('publishSolutionForm.noMarkComplete')}
          </div>
        </div>
      </label>
      <ErrorBoundary
        FallbackComponent={({ error }: { error: Error }) => {
          return <div className="c-donation-card-error">{error.message}</div>
        }}
      >
        <ConfirmButton status={status} error={error} />
      </ErrorBoundary>
    </form>
  )
}

// === end file ===
```