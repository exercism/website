```ts
// i18n
export default {
  "commitStep.commitToBeing": "Commit to being a good mentor",
  "commitStep.mentoringOnExercism": "Mentoring on Exercism can be an incredible experience for students and mentors alike. To ensure it remains a positive place for everyone, we ask all mentors to affirm Exercism&apos;s values before they mentor their first solution.",
  "commitStep.youAgreeTo": "You agree to:",
  "commitStep.codeOfConduct": "Abide by the Code of Conduct <icon/>",
  "commitStep.opensInNewTab": "Opens in a new tab",
  "commitStep.bePatient": "Be patient, empathic and kind to those you&apos;re mentoring",
  "commitStep.demonstrateIntellectualHumility": "Demonstrate intellectual humility <icon/>",
  "commitStep.notUseExercism": "Not use Exercism to promote personal agendas",
  "commitStep.back": "Back",
  "commitStep.continue": "Continue",
  "chooseTrackStep.selectTracks": "Select the tracks you want to mentor",
  "chooseTrackStep.allowsUsToShow": "This allows us to only show you the solutions you want to mentor. <strong>Don’t worry, you can change these selections at anytime.</strong>",
  "stepIndicator.step": "Step {{num}}: {{label}}",
  "closeButton.closeModal": "Close the modal",
  "congratulationsStep.youAreNowMentor": "You’re now a mentor!",
  "congratulationsStep.thankYouGrateful": "Thank you - we’re so grateful for your commitment 🙏",
  "congratulationsStep.makeGettingStartedEasy": "We want to make getting started with mentoring as easy as possible. Watch the video below to learn how to get started.",
  "congratulationsStep.welcomeToMentorTeam": "Welcome to the Mentor Team!",
  "congratulationsStep.video": "Video · 0:24",
  "congratulationsStep.readyToGetStarted": "I&apos;m ready to get started!"
}

// modified_files
// === file: ../components/modals/mentor-registration-modal/CommitStep.tsx ===
// i18n-key-prefix: commitStep
// i18n-namespace: components/modals/mentor-registration-modal
import React, { useState, useCallback } from 'react'
import { useMutation } from '@tanstack/react-query'
import { sendRequest } from '@/utils/send-request'
import { Icon, GraphicalIcon } from '@/components/common'
import { FormButton } from '@/components/common/FormButton'
import { ErrorMessage, ErrorBoundary } from '@/components/ErrorBoundary'
import { ReputationInfo } from './commit-step/ReputationInfo'
import { Checkbox } from './commit-step/Checkbox'
import { useAppTranslation } from '@/i18n/useAppTranslation'
import { Trans } from 'react-i18next'

export type Links = {
  codeOfConduct: string
  intellectualHumility: string
  registration: string
}

const NUM_TO_CHECK = 4
const DEFAULT_ERROR = new Error('Unable to complete registration')

export const CommitStep = ({
  links,
  selected,
  onContinue,
  onBack,
}: {
  links: Links
  selected: string[]
  onContinue: () => void
  onBack: () => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/modals/mentor-registration-modal')
  const {
    mutate: mutation,
    status,
    error,
  } = useMutation({
    mutationFn: async () => {
      const { fetch } = sendRequest({
        endpoint: links.registration,
        method: 'POST',
        body: JSON.stringify({
          track_slugs: selected,
          accept_terms: true,
        }),
      })

      return fetch
    },
    onSuccess: () => {
      onContinue()
    },
  })

  const [numChecked, setNumChecked] = useState(0)
  const handleChange = useCallback(
    (e) => {
      if (e.target.checked) {
        setNumChecked(numChecked + 1)
      } else {
        setNumChecked(numChecked - 1)
      }
    },
    [numChecked]
  )

  const handleSubmit = useCallback(() => {
    mutation()
  }, [mutation])

  return (
    <section className="commit-section">
      <div className="lhs">
        <h2>{t('commitStep.commitToBeing')}</h2>
        <p>{t('commitStep.mentoringOnExercism')}</p>
        <ReputationInfo />
        <div className="commitment">
          <h3>{t('commitStep.youAgreeTo')}</h3>
          <Checkbox onChange={handleChange}>
            <span>
              <Trans
                i18nKey="commitStep.codeOfConduct"
                components={{
                  a: (
                    <a href={links.codeOfConduct} target="_blank" rel="noreferrer">
                      {' '}
                    </a>
                  ),
                  icon: <Icon icon="external-link" alt={t('commitStep.opensInNewTab')} />,
                }}
              />
            </span>
          </Checkbox>
          <Checkbox onChange={handleChange}>
            <span>{t('commitStep.bePatient')}</span>
          </Checkbox>
          <Checkbox onChange={handleChange}>
            <span>
              <Trans
                i18nKey="commitStep.demonstrateIntellectualHumility"
                components={{
                  a: (
                    <a
                      href={links.intellectualHumility}
                      target="_blank"
                      rel="noreferrer"
                    >
                      {' '}
                    </a>
                  ),
                  icon: <Icon icon="external-link" alt={t('commitStep.opensInNewTab')} />,
                }}
              />
            </span>
          </Checkbox>
          <Checkbox onChange={handleChange}>
            <span>{t('commitStep.notUseExercism')}</span>
          </Checkbox>
        </div>

        <div className="flex">
          <FormButton
            onClick={onBack}
            status={status}
            className="btn-default btn-m mr-16"
          >
            {t('commitStep.back')}
          </FormButton>
          <FormButton
            className="btn-primary btn-m"
            onClick={handleSubmit}
            status={status}
            disabled={numChecked !== NUM_TO_CHECK}
          >
            <span>{t('commitStep.continue')}</span>
            <GraphicalIcon icon="arrow-right" />
          </FormButton>
        </div>
        <ErrorBoundary>
          <ErrorMessage error={error} defaultError={DEFAULT_ERROR} />
        </ErrorBoundary>
      </div>
      <div className="rhs">
        <GraphicalIcon icon="mentoring-screen" category="graphics" />
      </div>
    </section>
  )
}

// === end file ===

// === file: ../components/modals/mentor-registration-modal/ChooseTrackStep.tsx ===
// i18n-key-prefix: chooseTrackStep
// i18n-namespace: components/modals/mentor-registration-modal
import React from 'react'
import { TrackSelector } from '../../mentoring/TrackSelector'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export type Links = {
  tracks: string
}

export const ChooseTrackStep = ({
  links,
  selected,
  setSelected,
  onContinue,
}: {
  links: Links
  selected: string[]
  setSelected: (selected: string[]) => void
  onContinue: () => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/modals/mentor-registration-modal')
  return (
    <section className="tracks-section">
      <h2>{t('chooseTrackStep.selectTracks')}</h2>
      <p>
        <Trans i18nKey="chooseTrackStep.allowsUsToShow">
          This allows us to only show you the solutions you want to mentor.{' '}
          <strong>
            Don’t worry, you can change these selections at anytime.
          </strong>
        </Trans>
      </p>
      <TrackSelector
        tracksEndpoint={links.tracks}
        selected={selected}
        setSelected={setSelected}
        onContinue={onContinue}
      />
    </section>
  )
}

// === end file ===

// === file: ../components/modals/mentor-registration-modal/StepIndicator.tsx ===
// i18n-key-prefix: stepIndicator
// i18n-namespace: components/modals/mentor-registration-modal
import React from 'react'
import { StepProps, ModalStep } from '../MentorRegistrationModal'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const Step = ({
  num,
  label,
  selected,
}: {
  num: number
  label: string
  selected: boolean
}) => {
  const { t } = useAppTranslation('components/modals/mentor-registration-modal')
  const srText = t('stepIndicator.step', { num: num, label: label })

  const classNames = ['step', selected ? 'selected' : '']

  return (
    <li
      className={classNames.join(' ')}
      aria-current={selected ? 'step' : undefined}
    >
      <span className="sr-only">{srText}</span>
    </li>
  )
}

export const StepIndicator = ({
  steps,
  currentStep,
}: {
  steps: StepProps[]
  currentStep: ModalStep
}): JSX.Element => {
  return (
    <ul aria-label="Become a mentor progress" className="steps">
      {steps.map((step, i) => {
        return (
          <Step
            label={step.label}
            key={step.id}
            num={i + 1}
            selected={step.id === currentStep}
          />
        )
      })}
    </ul>
  )
}

// === end file ===

// === file: ../components/modals/mentor-registration-modal/CloseButton.tsx ===
// i18n-key-prefix: closeButton
// i18n-namespace: components/modals/mentor-registration-modal
import React from 'react'
import { Icon } from '../../common'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const CloseButton = ({
  onClick,
}: {
  onClick: () => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/modals/mentor-registration-modal')
  return (
    <button type="button" className="close-btn" onClick={onClick}>
      <Icon icon="close" alt={t('closeButton.closeModal')} className="filter-textColor6" />
    </button>
  )
}

// === end file ===

// === file: ../components/modals/mentor-registration-modal/CongratulationsStep.tsx ===
// i18n-key-prefix: congratulationsStep
// i18n-namespace: components/modals/mentor-registration-modal
import React from 'react'
import { GraphicalIcon, Icon } from '../../common'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export type Links = {
  video: string
  dashboard: string
}

export const CongratulationsStep = ({
  links,
}: {
  links: Links
}): JSX.Element => {
  const { t } = useAppTranslation('components/modals/mentor-registration-modal')
  return (
    <section className="celebrate-section">
      <GraphicalIcon icon="confetti" category="graphics" />
      <h2>{t('congratulationsStep.youAreNowMentor')}</h2>
      <h3>{t('congratulationsStep.thankYouGrateful')}</h3>
      <p className="welcome">
        {t('congratulationsStep.makeGettingStartedEasy')}
      </p>
      <div className="video-frame">
        <header className="video-header">
          <Icon icon="video" alt="This is a video" />
          <div className="info">
            <h3>{t('congratulationsStep.welcomeToMentorTeam')}</h3>
            <p>{t('congratulationsStep.video')}</p>
          </div>
        </header>
        <div
          className="video"
          style={{ padding: '56.25% 0 0 0', position: 'relative' }}
        >
          <iframe
            src={links.video}
            style={{
              position: 'absolute',
              top: 0,
              left: 0,
              width: '100%',
              height: '100%',
            }}
            frameBorder="0"
            allow="autoplay; fullscreen; picture-in-picture"
            allowFullScreen
          ></iframe>
        </div>
        <script src="https://player.vimeo.com/api/player.js"></script>
      </div>
      <a href={links.dashboard} className="btn-primary btn-m">
        {t('congratulationsStep.readyToGetStarted')}
      </a>
    </section>
  )
}

// === end file ===
```