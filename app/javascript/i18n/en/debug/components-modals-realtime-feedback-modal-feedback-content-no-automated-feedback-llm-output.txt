```ts
// i18n
export default {
  "index.noImmediateFeedback": "No Immediate Feedback",
  "index.ourSystemsDontHave": "Our systems don&apos;t have any immediate suggestions about how to improve your code.",
  "index.weRecommendRequesting": "We recommend requesting code review from one of our {{trackTitle}} mentors. They&apos;ll give you feedback on your code and ideas about how you can make it even more idiomatic. It&apos;s 100% free ðŸ™‚",
  "index.requestCodeReview": "Request code review",
  "index.youHaveMentoringSession": "You have a mentoring session active for this exercise.",
  "index.itIsGenerallyGood": "It is generally good practice to tell your mentor what you&apos;ve changed in your code and ask them to take a look at your new version.",
  "index.goToYourDiscussion": "Go to your discussion",
  "index.continueToExercise": "Continue to exercise",
  "index.noImmediateFeedbackNoSlot": "No Immediate Feedback",
  "index.youveSubmittedSolution": "You&apos;ve submitted your solution for Code Review.",
  "index.mentorWillTakeLook": "A mentor will take a look at your solution and (hopefully) provide you with useful feedback soon. You&apos;ll receive a notification and email when this happens.",
  "index.viewYourRequest": "View your request",
  "index.requestCodeReview": "Request code review",
  "index.cancel": "Cancel",
  "index.submitForCodeReview": "Submit for code review",
  "index.onceYouSubmit": "Once you submit, your request will be open for a mentor to join and start providing feedback."
}

// modified_files
// === file: ../components/modals/realtime-feedback-modal/feedback-content/no-automated-feedback/index.tsx ===
import React, { useCallback, useState } from 'react'
import { GraphicalIcon } from '@/components/common'
import { RealtimeFeedbackModalProps } from '../../RealTimeFeedbackModal'
import { FeedbackMentoringRequestForm } from './FeedbackMentoringRequestForm'
import { NoAutomatedFeedbackLHS } from './NoAutomatedFeedbackLHS'
import { NoImmediateFeedback } from './NoImmediateFeedback'
import { PendingMentoringRequest } from './PendingMentoringRequest'
import { InProgressMentoring } from './InProgressMentoring'
import { NoImmediateFeedbackNoAvailableMentoringSlot } from './NoImmediateFeedbackNoAvailableMentoringSlot'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export type NoFeedbackState =
  | 'initial'
  | 'sendingMentoringRequest'
  | RealtimeFeedbackModalProps['mentoringStatus']
export function NoAutomatedFeedback({
  track,
  links,
  onContinue,
  trackObjectives,
  mentoringStatus,
  hasAvailableMentoringSlot,
}: { onContinue: () => void } & Pick<
  RealtimeFeedbackModalProps,
  | 'track'
  | 'trackObjectives'
  | 'links'
  | 'mentoringStatus'
  | 'hasAvailableMentoringSlot'
>): JSX.Element {
  const { t } = useAppTranslation('components/modals/realtime-feedback-modal/feedback-content/no-automated-feedback')
  const [noFeedbackState, setNoFeedbackState] = useState<NoFeedbackState>(
    mentoringStatus === 'none' ? 'initial' : mentoringStatus
  )

  const handleSuccessfulMentorRequest = useCallback(() => {
    setNoFeedbackState('requested')
  }, [])

  return (
    <div className="flex gap-40 items-start">
      <NoAutomatedFeedbackLHS
        state={noFeedbackState}
        initialComponent={
          hasAvailableMentoringSlot ? (
            <NoImmediateFeedback
              track={track}
              onContinue={onContinue}
              onSendMentoringRequest={() =>
                setNoFeedbackState('sendingMentoringRequest')
              }
            />
          ) : (
            <NoImmediateFeedbackNoAvailableMentoringSlot
              onContinue={onContinue}
            />
          )
        }
        pendingComponent={
          <PendingMentoringRequest
            mentoringRequestLink={links.mentoringRequest}
            onContinue={onContinue}
          />
        }
        mentoringRequestFormComponent={
          <FeedbackMentoringRequestForm
            trackObjectives={trackObjectives}
            track={track}
            links={links}
            onContinue={onContinue}
            onSuccess={handleSuccessfulMentorRequest}
          />
        }
        inProgressComponent={
          <InProgressMentoring
            mentorDiscussionLink={links.mentoringRequest}
            onContinue={onContinue}
          />
        }
      />
      <GraphicalIcon
        height={160}
        width={160}
        className="mb-16"
        icon="mentoring"
        category="graphics"
      />
    </div>
  )
}

// === end file ===

// === file: ../components/modals/realtime-feedback-modal/feedback-content/no-automated-feedback/NoAutomatedFeedbackLHS.tsx ===
import { NoFeedbackState } from '.'

export function NoAutomatedFeedbackLHS({
  state,
  initialComponent,
  pendingComponent,
  inProgressComponent,
  mentoringRequestFormComponent,
}: {
  state: NoFeedbackState
  initialComponent: JSX.Element
  pendingComponent: JSX.Element
  inProgressComponent: JSX.Element
  mentoringRequestFormComponent: JSX.Element
}): JSX.Element {
  switch (state) {
    case 'requested':
      return pendingComponent
    case 'in_progress':
      return inProgressComponent
    case 'sendingMentoringRequest':
      return mentoringRequestFormComponent
    default:
      return initialComponent
  }
}

// === end file ===

// === file: ../components/modals/realtime-feedback-modal/feedback-content/no-automated-feedback/PendingMentoringRequest.tsx ===
import React from 'react'
import { ContinueButton } from '../../components/FeedbackContentButtons'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function PendingMentoringRequest({
  mentoringRequestLink,
  onContinue,
}: {
  mentoringRequestLink: string
  onContinue: () => void
}): JSX.Element {
  const { t } = useAppTranslation('components/modals/realtime-feedback-modal/feedback-content/no-automated-feedback')
  return (
    <div className="flex flex-col items-start">
      <h3 className="text-h4 mb-12">
        {t('index.youveSubmittedSolution')}
      </h3>

      <p className="text-16 mb-16 leading-150">
        {t('index.mentorWillTakeLook')}
      </p>
      <div className="flex gap-12">
        <ContinueButton onClick={onContinue} className="btn-primary" />
        <a className="btn-secondary btn-s mr-auto" href={mentoringRequestLink}>
          {t('index.viewYourRequest')}
        </a>
      </div>
    </div>
  )
}

// === end file ===

// === file: ../components/modals/realtime-feedback-modal/feedback-content/no-automated-feedback/NoImmediateFeedback.tsx ===
import React from 'react'
import { RealtimeFeedbackModalProps } from '../../RealTimeFeedbackModal'
import { ContinueButton } from '../../components/FeedbackContentButtons'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function NoImmediateFeedback({
  track,
  onContinue,
  onSendMentoringRequest,
}: Pick<RealtimeFeedbackModalProps, 'track'> &
  Record<'onContinue' | 'onSendMentoringRequest', () => void>): JSX.Element {
  const { t } = useAppTranslation('components/modals/realtime-feedback-modal/feedback-content/no-automated-feedback')
  return (
    <div className="flex flex-col items-start">
      <h3 className="text-h4 mb-12">{t('index.noImmediateFeedback')}</h3>

      <p className="text-16 leading-150 font-medium text-textColor1 mb-8">
        {t('index.ourSystemsDontHave')}
      </p>

      <p className="text-16 mb-16 leading-150">
        {t('index.weRecommendRequesting', { trackTitle: track.title })}
      </p>
      <div className="flex gap-12">
        <button onClick={onSendMentoringRequest} className="btn-primary btn-s">
          {t('index.requestCodeReview')}
        </button>
        <ContinueButton onClick={onContinue} className="btn-secondary" />
      </div>
    </div>
  )
}

// === end file ===

// === file: ../components/modals/realtime-feedback-modal/feedback-content/no-automated-feedback/InProgressMentoring.tsx ===
import React from 'react'
import { ContinueButton } from '../../components/FeedbackContentButtons'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function InProgressMentoring({
  onContinue,
  mentorDiscussionLink,
}: {
  mentorDiscussionLink: string
  onContinue: () => void
}): JSX.Element {
  const { t } = useAppTranslation('components/modals/realtime-feedback-modal/feedback-content/no-automated-feedback')
  return (
    <div className="flex flex-col items-start">
      <h3 className="text-h4 mb-8">
        {t('index.youHaveMentoringSession')}
      </h3>
      <p className="text-p-base mb-12">
        {t('index.itIsGenerallyGood')}
      </p>

      <div className="flex gap-12">
        <a className="btn-primary btn-s mr-auto" href={mentorDiscussionLink}>
          {t('index.goToYourDiscussion')}
        </a>
        <ContinueButton
          text={t('index.continueToExercise')}
          onClick={onContinue}
          className="btn-secondary"
        />
      </div>
    </div>
  )
}

// === end file ===

// === file: ../components/modals/realtime-feedback-modal/feedback-content/no-automated-feedback/NoImmediateFeedbackNoAvailableMentoringSlot.tsx ===
import React from 'react'
import { ContinueButton } from '../../components/FeedbackContentButtons'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function NoImmediateFeedbackNoAvailableMentoringSlot({
  onContinue,
}: Record<'onContinue', () => void>): JSX.Element {
  const { t } = useAppTranslation('components/modals/realtime-feedback-modal/feedback-content/no-automated-feedback')
  return (
    <div className="flex flex-col items-start self-stretch">
      <h3 className="text-h4 mb-12">{t('index.noImmediateFeedbackNoSlot')}</h3>

      <p className="text-16 leading-150 font-medium text-textColor1 mb-auto">
        {t('index.ourSystemsDontHave')}
      </p>

      <ContinueButton onClick={onContinue} />
    </div>
  )
}

// === end file ===

// === file: ../components/modals/realtime-feedback-modal/feedback-content/no-automated-feedback/FeedbackMentoringRequestForm.tsx ===
import React from 'react'
import { MedianWaitTime } from '@/components/common/MedianWaitTime'
import { FormButton } from '@/components/common/FormButton'
import { FetchingBoundary } from '@/components/FetchingBoundary'
import type { MentorSessionTrack as Track } from '@/components/types'
import { ContinueButton } from '../../components/FeedbackContentButtons'
import { RealtimeFeedbackModalProps } from '../../RealTimeFeedbackModal'
import { SolutionCommentTextArea } from '@/components/student/mentoring-session/mentoring-request/MentoringRequestFormComponents/SolutionCommentTextArea'
import { TrackObjectivesTextArea } from '@/components/student/mentoring-session/mentoring-request/MentoringRequestFormComponents/TrackObjectivesTextArea'
import { useMentoringRequest } from '@/components/student/mentoring-session/mentoring-request/MentoringRequestFormComponents'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const DEFAULT_ERROR = new Error('Unable to create mentor request')

export const FeedbackMentoringRequestForm = ({
  trackObjectives,
  track,
  links,
  onContinue,
  onSuccess,
}: {
  trackObjectives: string
  track: Pick<Track, 'title' | 'medianWaitTime'>
  onContinue: () => void
  onSuccess: () => void
} & Pick<RealtimeFeedbackModalProps, 'links'>): JSX.Element => {
  const { t } = useAppTranslation('components/modals/realtime-feedback-modal/feedback-content/no-automated-feedback')
  const {
    handleSubmit,
    error,
    status,
    solutionCommentRef,
    trackObjectivesRef,
  } = useMentoringRequest(links, onSuccess)

  return (
    <form
      data-turbo="false"
      className="c-mentoring-request-form realtime-feedback-modal-form"
      onSubmit={handleSubmit}
    >
      <h3 className="text-h4 mb-8">{t('index.requestCodeReview')}</h3>
      <TrackObjectivesTextArea
        defaultValue={trackObjectives}
        ref={trackObjectivesRef}
        track={track}
      />
      <SolutionCommentTextArea ref={solutionCommentRef} />
      <div className="flex gap-8">
        <ContinueButton
          type="button"
          text={t('index.cancel')}
          className="!w-auto btn-secondary"
          onClick={onContinue}
        />
        <FormButton
          status={status}
          className="!w-auto btn-primary btn-s flex-grow"
        >
          {t('index.submitForCodeReview')}
        </FormButton>
      </div>
      <FetchingBoundary
        status={status}
        error={error}
        defaultError={DEFAULT_ERROR}
      />
      <p className="flow-explanation">
        {t('index.onceYouSubmit')}
        <MedianWaitTime seconds={track.medianWaitTime} />
      </p>
    </form>
  )
}

// === end file ===
```