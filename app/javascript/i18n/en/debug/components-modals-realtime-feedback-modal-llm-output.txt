```ts
// i18n
export default {
  "realTimeFeedbackModal.deepDiveVideo": "Deep Dive Video",
  "realTimeFeedbackModal.feedback": "Feedback",
  "checkingForAutomatedFeedback.checking": "Checking for automated feedbackâ€¦",
  "checkingForAutomatedFeedback.inspectingCode": "Our systems are inspecting your code to find both automated feedback and feedback given by mentors on similar solutions.",
  "checkingForAutomatedFeedback.processTime": "This process normally takes ~10 seconds.",
  "checkingForAutomatedFeedback.continueWaiting": "Continue without waiting",
  "checkingForAutomatedFeedback.takingLonger": "Sorry, this is taking a little longer than expected. You may wish to continue without waiting. You can view any feedback on the iterations tab of the solution later.",
  "feedbackContent.noFeedback": "No Automated Feedback",
  "feedbackContent.foundFeedback": "Found Automated Feedback"
}

// modified_files
// === file: ../components/modals/realtime-feedback-modal/RealTimeFeedbackModal.tsx ===
import React, { useCallback, useState } from 'react'
import { redirectTo } from '@/utils/redirect-to'
import { Modal } from '../Modal'
import { FeedbackContent } from './FeedbackContent'
import { useGetLatestIteration } from './hooks/useGetLatestIteration'
import type { Props } from '@/components/editor/Props'
import type { IterationsListRequest } from '@/components/student/IterationsList'
import type { Submission } from '@/components/editor/types'
import type { Iteration } from '@/components/types'
import { DeepDiveVideoContent } from './feedback-content/DeepDiveVideoContent'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export type RealtimeFeedbackModalProps = {
  open: boolean
  onClose: () => void
  onSubmit: () => void
  request: IterationsListRequest
  showDeepDiveVideo: boolean
  submission: Submission | null
  links: Props['links'] & { redirectToExerciseLink: string }
} & Pick<
  Props,
  | 'exercise'
  | 'solution'
  | 'trackObjectives'
  | 'track'
  | 'mentoringStatus'
  | 'discussion'
  | 'hasAvailableMentoringSlot'
>

export type ResolvedIteration = Iteration & { submissionUuid?: string }

export const RealtimeFeedbackModal = ({
  open,
  onClose,
  solution,
  track,
  request,
  submission,
  links,
  trackObjectives,
  mentoringStatus,
  exercise,
  showDeepDiveVideo,
  hasAvailableMentoringSlot,
}: RealtimeFeedbackModalProps): JSX.Element => {
  const { t } = useAppTranslation('components/modals/realtime-feedback-modal')
  const { latestIteration, checkStatus } = useGetLatestIteration({
    request,
    submission,
    solution,
    feedbackModalOpen: open,
  })

  const [showVideoStep, setShowVideoStep] = useState(false)

  const redirectToExercise = useCallback(() => {
    redirectTo(links.redirectToExerciseLink)
  }, [links.redirectToExerciseLink])

  return (
    <Modal
      open={open}
      closeButton={false}
      onClose={onClose}
      shouldCloseOnEsc={false}
      shouldCloseOnOverlayClick={false}
      ReactModalClassName="w-fill max-w-[700px]"
    >
      {showVideoStep ? (
        <DeepDiveVideoContent
          exercise={exercise}
          onContinue={redirectToExercise}
          links={links}
        />
      ) : (
        <FeedbackContent
          checkStatus={checkStatus}
          open={open}
          onContinue={() =>
            showDeepDiveVideo ? setShowVideoStep(true) : redirectToExercise()
          }
          track={track}
          latestIteration={latestIteration}
          onClose={onClose}
          links={links}
          trackObjectives={trackObjectives}
          mentoringStatus={mentoringStatus}
          hasAvailableMentoringSlot={hasAvailableMentoringSlot}
        />
      )}
    </Modal>
  )
}

// === end file ===

// === file: ../components/modals/realtime-feedback-modal/CheckingForAutomatedFeedback.tsx ===
import React from 'react'
import { GraphicalIcon } from '@/components/common'
import { LoadingBar } from '@/components/common/LoadingBar'
import { FooterButtonContainer } from './components'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function CheckingForAutomatedFeedback({
  onClick,
  showTakingTooLong,
}: {
  onClick: () => void
  showTakingTooLong: boolean
}): JSX.Element {
  const { t } = useAppTranslation('components/modals/realtime-feedback-modal')

  return (
    <>
      <div className="flex gap-40 items-start">
        <div className="flex flex-col">
          <div className="text-h4 mb-12">{t('checkingForAutomatedFeedback.checking')} </div>
          <p className="text-16 leading-150  mb-4">
            {t('checkingForAutomatedFeedback.inspectingCode')}
          </p>
          <p className="text-16 leading-150 font-semibold mt-4 mb-16">
            {t('checkingForAutomatedFeedback.processTime')}
          </p>

          <LoadingBar animationDuration={10} />
        </div>
        <GraphicalIcon
          height={160}
          width={160}
          className="mb-16"
          icon="mentoring"
          category="graphics"
        />
      </div>
      {showTakingTooLong && <TakingTooLong />}
      <FooterButtonContainer>
        <button onClick={onClick} className="btn-secondary btn-s mr-auto">
          {t('checkingForAutomatedFeedback.continueWaiting')}
        </button>
      </FooterButtonContainer>
    </>
  )
}

function TakingTooLong(): JSX.Element {
  const { t } = useAppTranslation('components/modals/realtime-feedback-modal')
  return (
    <div className="c-textblock-caution mt-12 mb-20">
      <div className="c-textblock-content text-p-base leading-150">
        {t('checkingForAutomatedFeedback.takingLonger')}
      </div>
    </div>
  )
}

// === end file ===

// === file: ../components/modals/realtime-feedback-modal/FeedbackContent.tsx ===
import React from 'react'
import { IterationStatus } from '@/components/types'
import { useTakingTooLong } from './hooks'
import { CheckingForAutomatedFeedback } from './CheckingForAutomatedFeedback'
import { NoAutomatedFeedback, FoundAutomatedFeedback } from './feedback-content'
import type {
  RealtimeFeedbackModalProps,
  ResolvedIteration,
} from './RealTimeFeedbackModal'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export type FeedbackContentProps = {
  checkStatus: string
  onContinue: () => void
  latestIteration: ResolvedIteration | undefined
} & Pick<
  RealtimeFeedbackModalProps,
  | 'track'
  | 'onClose'
  | 'open'
  | 'links'
  | 'trackObjectives'
  | 'mentoringStatus'
  | 'hasAvailableMentoringSlot'
>

export function FeedbackContent({
  checkStatus,
  onContinue,
  open,
  track,
  latestIteration,
  onClose,
  links,
  trackObjectives,
  mentoringStatus,
  hasAvailableMentoringSlot,
}: FeedbackContentProps): JSX.Element {
  const { t } = useAppTranslation('components/modals/realtime-feedback-modal')
  const itIsTakingTooLong = useTakingTooLong(open)

  switch (checkStatus) {
    case 'loading':
    case 'pending':
      return (
        <CheckingForAutomatedFeedback
          onClick={onContinue}
          showTakingTooLong={itIsTakingTooLong}
        />
      )
    case IterationStatus.UNTESTED:
    case IterationStatus.DELETED:
    case IterationStatus.TESTS_FAILED:
    case IterationStatus.NO_AUTOMATED_FEEDBACK:
      return (
        <NoAutomatedFeedback
          hasAvailableMentoringSlot={hasAvailableMentoringSlot}
          links={links}
          mentoringStatus={mentoringStatus}
          onContinue={onContinue}
          track={track}
          trackObjectives={trackObjectives}
        />
      )
    default:
      return (
        <FoundAutomatedFeedback
          track={track}
          links={links}
          onClose={onClose}
          onContinue={onContinue}
          latestIteration={latestIteration}
        />
      )
  }
}

// === end file ===
```