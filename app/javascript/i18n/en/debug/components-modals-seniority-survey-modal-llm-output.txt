```ts
// i18n
export default {
  "bootcampAdvertismentView.meetOurNewCourse": "Meet our new",
  "bootcampAdvertismentView.codingFundamentals": "Coding Fundamentals",
  "bootcampAdvertismentView.courseDesignedForBeginners": "course is designed specifically for beginners! It will teach you how to think like a coder by solving puzzles and building games.",
  "bootcampAdvertismentView.weeksYouWillGoFromZeroToMaking": "In 12 weeks, you'll go from zero to making these...",
  "bootcampAdvertismentView.courseForAnyoneWhoWantsToGetReallyGood": "This is a course for anyone that wants to get really good at coding. It's affordable. It's fun. And most importantly, it's",
  "bootcampAdvertismentView.incrediblyEffective": "incredibly effective",
  "bootcampAdvertismentView.learnMore": "Learn more âœ¨",
  "bootcampAdvertismentView.close": "Close",
  "bootcampAdvertismentView.watchTheCourseIntro": "Watch the Course Intro ðŸ‘‡",
  "bootcampAdvertismentView.videoTutorials": "Video tutorials",
  "bootcampAdvertismentView.funProjects": "Fun projects",
  "bootcampAdvertismentView.helpfulMentors": "Helpful mentors",
  "bootcampAdvertismentView.exceededMyWildestExpectations": "exceeded my wildest expectations",
  "bootcampAdvertismentView.oneOfTheBestChoices": "one of the best choices you will ever make!",
  "bootcampAdvertismentView.absoluteBeginner": "Absolute Beginner",
  "senioritySurveyModal.inner": "Inner",
  "initialView.heyThere": "Hey there ðŸ‘‹",
  "initialView.expandingExercism": "We're expanding Exercism to add content relevant to a wide range of abilities. To ensure Exercism shows you the right content, please tell us how experienced you are.",
  "initialView.howExperiencedAreYou": "How experienced a developer are you?",
  "initialView.saveMyChoice": "Save my choice",
  "initialView.canBeUpdatedInSettings": "(This can be updated at any time in your settings)",
  "initialView.absoluteBeginner": "Absolute Beginner",
  "initialView.beginner": "Beginner",
  "initialView.juniorDeveloper": "Junior Developer",
  "initialView.midLevelDeveloper": "Mid-level Developer",
  "initialView.seniorDeveloper": "Senior Developer"
}

// modified_files
// === file: ../components/modals/seniority-survey-modal/BootcampAdvertismentView.tsx ===
// i18n-key-prefix: bootcampAdvertismentView
// i18n-namespace: components/modals/seniority-survey-modal
import React, { useContext } from 'react'
import { GraphicalIcon, Icon } from '@/components/common'
import { FormButton } from '@/components/common/FormButton'
import { ErrorBoundary, ErrorMessage } from '@/components/ErrorBoundary'
import { SenioritySurveyModalContext } from './SenioritySurveyModal'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const DEFAULT_ERROR = new Error('Unable to dismiss modal')

export function BootcampAdvertismentView() {
  const { t } = useAppTranslation('components/modals/seniority-survey-modal')
  const { patchCloseModal, links } = useContext(SenioritySurveyModalContext)

  return (
    <>
      <div className="lhs">
        <header>
          <h1 className="!font-medium">
            {t('bootcampAdvertismentView.meetOurNewCourse')}{' '}
            <strong className="font-semibold">
              {t('bootcampAdvertismentView.codingFundamentals')}
            </strong>{' '}
            course...
          </h1>

          <p className="mb-8">
            Our{' '}
            <strong className="!font-semibold text-black">
              {t('bootcampAdvertismentView.codingFundamentals')}
            </strong>{' '}
            {t('bootcampAdvertismentView.courseDesignedForBeginners')}
          </p>
          <p className="mb-6">
            {t('bootcampAdvertismentView.weeksYouWillGoFromZeroToMaking')}
          </p>
          <div className="grid grid-cols-4 gap-10 mb-12">
            <Icon
              category="bootcamp"
              alt="Image of a space invaders game"
              icon="space-invaders.gif"
              className="w-full"
            />
            <Icon
              category="bootcamp"
              alt="Image of a tic-tac-toe game"
              icon="tic-tac-toe.gif"
              className="w-full"
            />
            <Icon
              category="bootcamp"
              alt="Image of a breakout game"
              icon="breakout.gif"
              className="w-full"
            />
            <Icon
              category="bootcamp"
              alt="Image of a maze game"
              icon="maze.gif"
              className="w-full"
            />
          </div>
          <p className="mb-8">
            {t('bootcampAdvertismentView.courseForAnyoneWhoWantsToGetReallyGood')}{' '}
            <strong className="text-black font-semibold">
              {t('bootcampAdvertismentView.incrediblyEffective')}
            </strong>
            !
          </p>
        </header>
        <div className="flex gap-12 mt-auto flex-grow">
          <a
            href={links.codingFundamentalsCourse}
            className="btn-primary btn-l cursor-pointer flex-grow"
          >
            {t('bootcampAdvertismentView.learnMore')}
          </a>
          <FormButton
            status={patchCloseModal.status}
            className="btn-secondary btn-l w-[140px]"
            type="button"
            onClick={patchCloseModal.mutate}
          >
            {t('bootcampAdvertismentView.close')}
          </FormButton>
        </div>
        <ErrorBoundary resetKeys={[patchCloseModal.status]}>
          <ErrorMessage
            error={patchCloseModal.error}
            defaultError={DEFAULT_ERROR}
          />
        </ErrorBoundary>
      </div>
      <div className="rhs">
        <div className="font-semibold text-18 text-center mb-16">
          {t('bootcampAdvertismentView.watchTheCourseIntro')}
        </div>
        <div
          className="video relative rounded-8 overflow-hidden !mb-16"
          style={{
            padding: '56.25% 0 0 0',
            position: 'relative',
            background: '#333',
          }}
        >
          <iframe
            src="https://player.vimeo.com/video/1068683543?h=2de237a304&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479"
            title="Introducing Coding Fundamentals"
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
          />
        </div>
        <div className="bubbles">
          <div className="bubble">
            <Icon category="bootcamp" alt="wave-icon" icon="video-tutorial" />
            <div className="text">
              <strong>{t('bootcampAdvertismentView.videoTutorials')}</strong>
            </div>
          </div>
          <div className="bubble">
            <Icon category="bootcamp" alt="fun-icon" icon="fun" />
            <div className="text">
              <strong>{t('bootcampAdvertismentView.funProjects')}</strong>
            </div>
          </div>
          <div className="bubble">
            <Icon category="bootcamp" alt="help-icon" icon="help" />
            <div className="text">
              {t('bootcampAdvertismentView.helpfulMentors')}
            </div>
          </div>
        </div>
        <div className="quote">
          <div className="words">
            <GraphicalIcon
              category="bootcamp"
              icon="quote.png"
              className="mark left-mark"
            />
            <span>
              <p>
                I was brand new to coding and this course{' '}
                <strong>
                  {t('bootcampAdvertismentView.exceededMyWildestExpectations')}
                </strong>
                . In my humble opinion, it will be{' '}
                <strong>
                  {t('bootcampAdvertismentView.oneOfTheBestChoices')}
                </strong>
              </p>

              <GraphicalIcon
                category="bootcamp"
                icon="quote.png"
                className="mark right-mark"
              />
            </span>
          </div>
          <div className="person">
            <div className="flex flex-row items-center justify-end gap-8">
              <div className="text">
                <div className="name">Shaun</div>
                <div className="description">
                  {t('bootcampAdvertismentView.absoluteBeginner')}
                </div>
              </div>
              <Icon
                category="bootcamp/testimonials"
                alt="Picture of shaun"
                icon="shaun.jpg"
              />
            </div>
          </div>
        </div>
      </div>
    </>
  )
}

// === end file ===

// === file: ../components/modals/seniority-survey-modal/SenioritySurveyModal.tsx ===
// i18n-key-prefix: senioritySurveyModal
// i18n-namespace: components/modals/seniority-survey-modal
import React, {
  createContext,
  Dispatch,
  SetStateAction,
  useContext,
  useState,
} from 'react'
import { Modal, ModalProps } from '../Modal'
import { InitialView } from './InitialView'
import { useMutation } from '@tanstack/react-query'
import { sendRequest } from '@/utils/send-request'
import { BootcampAdvertismentView } from './BootcampAdvertismentView'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type ViewVariant = 'initial' | 'thanks' | 'bootcamp-advertisment'

type Links = {
  hideModalEndpoint: string
  apiUserEndpoint: string
  codingFundamentalsCourse: string
}

type SenioritySurveyModalContextProps = {
  currentView: ViewVariant
  setCurrentView: Dispatch<SetStateAction<ViewVariant>>
  setOpen: Dispatch<SetStateAction<boolean>>
  links: Links
  patchCloseModal: {
    mutate: () => void
  } & Pick<ReturnType<typeof useMutation>, 'status' | 'error'>
}

const DEFAULT_VIEW = 'initial'

export const SenioritySurveyModalContext =
  createContext<SenioritySurveyModalContextProps>({
    currentView: DEFAULT_VIEW,
    setCurrentView: () => {},
    setOpen: () => {},
    links: {
      apiUserEndpoint: '',
      hideModalEndpoint: '',
      codingFundamentalsCourse: '',
    },
    patchCloseModal: {
      mutate: () => null,
      status: 'idle',
      error: null,
    },
  })

export default function SenioritySurveyModal({
  links,
  ...props
}: Omit<ModalProps, 'className' | 'open' | 'onClose'> & {
  links: Links
}): JSX.Element {
  const { t } = useAppTranslation('components/modals/seniority-survey-modal')
  const [open, setOpen] = useState(true)
  const [currentView, setCurrentView] = useState<ViewVariant>(DEFAULT_VIEW)

  const {
    mutate: hideModalMutation,
    status: hideModalMutationStatus,
    error: hideModalMutationError,
  } = useMutation({
    mutationFn: () => {
      const { fetch } = sendRequest({
        endpoint: links.hideModalEndpoint,
        method: 'PATCH',
        body: null,
      })

      return fetch
    },
    onSuccess: () => {
      setOpen(false)
    },
  })

  return (
    <SenioritySurveyModalContext.Provider
      value={{
        currentView,
        setCurrentView,
        setOpen,
        links,
        patchCloseModal: {
          mutate: hideModalMutation,
          status: hideModalMutationStatus,
          error: hideModalMutationError,
        },
      }}
    >
      <Modal
        cover={true}
        open={open}
        {...props}
        style={{
          content: {
            maxWidth: currentView === 'bootcamp-advertisment' ? '' : '620px',
            placeSelf: 'center',
          },
        }}
        onClose={() => null}
        className="m-welcome"
      >
        <Inner />
      </Modal>
    </SenioritySurveyModalContext.Provider>
  )
}

function Inner() {
  const { t } = useAppTranslation('components/modals/seniority-survey-modal')
  const { currentView } = useContext(SenioritySurveyModalContext)
  switch (currentView) {
    case 'initial':
      return <InitialView />
    case 'bootcamp-advertisment':
      return <BootcampAdvertismentView />
  }
}

// === end file ===

// === file: ../components/modals/seniority-survey-modal/InitialView.tsx ===
// i18n-key-prefix: initialView
// i18n-namespace: components/modals/seniority-survey-modal
import React, { useContext, useState, useCallback } from 'react'
import { useMutation } from '@tanstack/react-query'
import { sendRequest } from '@/utils/send-request'
import { assembleClassNames } from '@/utils/assemble-classnames'
import { FormButton } from '@/components/common/FormButton'
import { ErrorBoundary, ErrorMessage } from '@/components/ErrorBoundary'
import { SenioritySurveyModalContext } from './SenioritySurveyModal'
import type { SeniorityLevel } from '../welcome-modal/WelcomeModal'
import { ErrorFallback } from '@/components/common/ErrorFallback'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const DEFAULT_ERROR = new Error('Unable to save seniority level.')

export const SENIORITIES: { label: string; value: SeniorityLevel }[] = [
  {
    label: 'Absolute Beginner',
    value: 'absolute_beginner',
  },
  {
    label: 'Beginner',
    value: 'beginner',
  },
  {
    label: 'Junior Developer',
    value: 'junior',
  },
  {
    label: 'Mid-level Developer',
    value: 'mid',
  },
  {
    label: 'Senior Developer',
    value: 'senior',
  },
]

export function InitialView() {
  const { t } = useAppTranslation('components/modals/seniority-survey-modal')
  const { links, setCurrentView, patchCloseModal } = useContext(
    SenioritySurveyModalContext
  )
  const [selected, setSelected] = useState<SeniorityLevel | ''>('')

  const {
    mutate: setSeniorityMutation,
    status: setSeniorityMutationStatus,
    error: setSeniorityMutationError,
  } = useMutation({
    mutationFn: (seniority: SeniorityLevel) => {
      const { fetch } = sendRequest({
        endpoint: links.apiUserEndpoint + `?user[seniority]=${seniority}`,
        method: 'PATCH',
        body: null,
      })

      return fetch
    },
    onSuccess: () => {
      if (selected.includes('beginner')) {
        setCurrentView('bootcamp-advertisment')
        return
      }

      patchCloseModal.mutate()
    },
  })

  const handleSaveSeniorityLevel = useCallback(() => {
    if (selected === '') return
    setSeniorityMutation(selected)
  }, [selected, setSeniorityMutation])

  return (
    <div className="lhs">
      <header>
        <h1>{t('initialView.heyThere')}</h1>
        <p className="mb-16">
          {t('initialView.expandingExercism')}
        </p>
        <h2>{t('initialView.howExperiencedAreYou')}</h2>
      </header>
      <div className="flex flex-col flex-wrap gap-8 mb-16 text-18">
        {SENIORITIES.map((seniority) => (
          <button
            key={seniority.value}
            className={assembleClassNames(
              'btn-m btn-slightly-enhanced',
              selected === seniority.value
                ? 'border-prominentLinkColor text-prominentLinkColor'
                : ''
            )}
            onClick={() => setSelected(seniority.value)}
          >
            {t(`initialView.${seniority.label.replace(' ', '')}`)}
          </button>
        ))}
      </div>

      <FormButton
        status={setSeniorityMutationStatus}
        disabled={selected === ''}
        className="btn-primary btn-l w-100"
        type="button"
        onClick={handleSaveSeniorityLevel}
      >
        {t('initialView.saveMyChoice')}
      </FormButton>
      <p className="!text-14 text-center mt-12">
        {t('initialView.canBeUpdatedInSettings')}
      </p>
      <ErrorBoundary
        FallbackComponent={ErrorFallback}
        resetKeys={[setSeniorityMutationStatus]}
      >
        <ErrorMessage
          error={setSeniorityMutationError}
          defaultError={DEFAULT_ERROR}
        />
      </ErrorBoundary>
      <ErrorBoundary resetKeys={[patchCloseModal.status]}>
        <ErrorMessage
          error={patchCloseModal.status}
          defaultError={DEFAULT_ERROR}
        />
      </ErrorBoundary>
    </div>
  )
}

// === end file ===
```