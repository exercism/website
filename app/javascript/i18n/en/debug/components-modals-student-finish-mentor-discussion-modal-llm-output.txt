```ts
// i18n
export default {
  "reportStep.howCanWeHelp": "How can we help?",
  "reportStep.explanation": "Weâ€™re really sorry that you experienced a problematic mentoring discussion, and would like to help ensure your next experience is a positive one.",
  "reportStep.resolveIssue": "How would you like to resolve the issue?",
  "reportStep.blockMentor": "Block further interactions with this mentor",
  "reportStep.requeueSolution": "Put your solution back in the queue for mentoring",
  "reportStep.reportDiscussion": "Report this discussion to an admin",
  "reportStep.whyReporting": "Why are you reporting this conversation?",
  "reportStep.whatWentWrong": "What went wrong?",
  "reportStep.reportAssurance": "Your report will be sent to our adminstrators who will investigate further",
  "reportStep.back": "Back",
  "reportStep.finish": "Finish",
  "rateMentorStep.reviewDiscussion": "It's time to review this discussion",
  "rateMentorStep.yourDiscussionTimedOut": "Your discussion timed out",
  "rateMentorStep.mentorFinishedMentoring": "{{mentorHandle}} has finished mentoring you on",
  "rateMentorStep.feedbackRequest": "To help us and our mentors understand how well we're doing, we'd love some feedback on your discussion with {mentorHandle}. Good mentors will answer your questions, introduce you to new ideas, or encourage you to try new things.",
  "rateMentorStep.howWasDiscussion": "How was your discussion with {mentorHandle}?",
  "rateMentorStep.problematic": "Problematic",
  "rateMentorStep.acceptable": "Acceptable",
  "rateMentorStep.itWasGood": "It was good!",
  "successfulDonationStep.youveDonatedSuccessfully": "You've donated {{amount}} successfully - thank you ðŸ’™",
  "successfulDonationStep.trulyAppreciateSupport": "We truly appreciate your support. Exercism would not be possible without awesome contributors like yourself. You'll be sent an email shortly with your donation confirmation and receipt.",
  "successfulDonationStep.youveEarnedBadge": "You've earned the ",
  "successfulDonationStep.supporter": "Supporter",
  "successfulDonationStep.badge": " badge!",
  "successfulDonationStep.continueToExercise": "Continue to Exercise",
  "requeuedStep.solutionRequeued": "Your solution has been requeued.",
  "requeuedStep.requedExplanation": "Your solution has been put back in the queue and another mentor will hopefully pick it up soon. We hope you have a positive mentoring session on this solution next time!",
  "requeuedStep.goToSolution": "Go back to your solution",
  "testimonialField.writeTestimonial": "Write your testimonial here",
  "testimonialField.minimum": "minimum",
  "unhappyStep.thankYouForReport": "Thank you for your report",
  "unhappyStep.reportExplanation": "Thanks for letting us know. We will look into your report and get back to you in the next few days. In the meantime we hope you have a better next experience.",
  "unhappyStep.solutionRequeued": "Your solution has been be requeued",
  "unhappyStep.requeueExplanation": "Your solution has been put back in the queue and another mentor will hopefully pick it up soon. We hope you have a positive mentoring session on this solution next time!",
  "unhappyStep.hopeBetterExperience": "We hope you have a better next experience",
  "unhappyStep.sorryExplanation": "Sorry this experience wasn't great. We hope the next one will be better.",
  "unhappyStep.goToSolution": "Go back to your solution",
  "addTestimonialStep.gladGoodDiscussion": "We're glad you had a good discussion!",
  "addTestimonialStep.mentorsVolunteerTime": "Mentors volunteer their time for free. A nice testimonial is a great way of thanking them, and encouraging them to continue helping others.",
  "addTestimonialStep.leaveTestimonial": "Leave {mentorHandle} a testimonial (optional)",
  "addTestimonialStep.back": "Back",
  "addTestimonialStep.skip": "Skip",
  "addTestimonialStep.finish": "Finish",
  "celebrationStep.thankYouForTestimonial": "Thank you for leaving a testimonial ðŸ’™",
  "celebrationStep.helpedMakeDay": "You've helped make {mentorHandle}'s day.",
  "celebrationStep.shareExperience": "Please share your experience of Exercism with others.",
  "celebrationStep.backToExercise": "Back to the exercise",
  "satisfiedStep.sorryMentoringWasntGreat": "Sorry that this mentoring wasn't great.",
  "satisfiedStep.putExerciseBack": "Would you like to put this exercise back in the queue for another mentor to look at?",
  "satisfiedStep.back": "Back",
  "satisfiedStep.noThanks": "No thanks",
  "satisfiedStep.yesPlease": "Yes please",
  "reasonSelect.codeOfConductViolation": "Code of Conduct violation",
  "reasonSelect.wrongOrMisleadingInformation": "Wrong or misleading information",
  "reasonSelect.other": "Other",
  "donationStep.oneMoreRequest": "One more requestâ€¦",
  "donationStep.findingExercismHelpful": "Are you finding Exercism helpful?",
  "donationStep.cantAffordIt": "Can't afford it?",
  "donationStep.pleaseShareExercism": "If you can't afford to donate, but would like to help in some other way, please share Exercism with your friends and colleagues, and shout about us on social media. The more people that use us, the more donations we get!",
  "donationStep.wantToKnowMore": "Want to know more?",
  "donationStep.whyWeNeedDonations": "I put together a short video that explains why we need donations and how we use them ðŸ‘‡",
  "donationStep.continueWithoutDonating": "Continue without donating",
  "donationStep.fewerThanOnePercent": "Fewer than 1% of who use Exercism choose to donate. If you can afford to do so, please be one of them."
}

// modified_files
// === file: ../components/modals/student/finish-mentor-discussion-modal/ReportStep.tsx ===
import React, { useCallback, useState, useRef } from 'react'
import { useMutation } from '@tanstack/react-query'
import { sendRequest } from '@/utils/send-request'
import { MentorDiscussion } from '@/components/types'
import { Avatar, GraphicalIcon } from '@/components/common'
import { FormButton } from '@/components/common/FormButton'
import { FetchingBoundary } from '@/components/FetchingBoundary'
import { MentorReport } from '../FinishMentorDiscussionModal'
import { ReasonSelect } from './ReasonSelect'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const DEFAULT_ERROR = new Error('Unable to submit mentor rating')

export const ReportStep = ({
  discussion,
  onSubmit,
  onBack,
}: {
  onSubmit: (report: MentorReport) => void
  onBack: () => void
  discussion: MentorDiscussion
}): JSX.Element => {
  const { t } = useAppTranslation('components/modals/student/finish-mentor-discussion-modal')
  const [state, setState] = useState<MentorReport>({
    requeue: true,
    report: false,
    reason: 'coc',
  })

  const messageRef = useRef<HTMLTextAreaElement>(null)
  const {
    mutate: mutation,
    status,
    error,
  } = useMutation({
    mutationFn: async () => {
      const { fetch } = sendRequest({
        endpoint: discussion.links.finish,
        method: 'PATCH',
        body: JSON.stringify({
          rating: 1,
          requeue: state.requeue,
          report: state.report,
          report_reason: state.reason,
          report_message: messageRef.current?.value,
        }),
      })

      return fetch
    },
    onSuccess: () => {
      onSubmit(state)
    },
    onError: (e) => {
      console.error('Error running mutation in ReportStep.tsx', e)
    },
  })

  const handleSubmit = useCallback(
    (e) => {
      e.preventDefault()
      mutation()
    },
    [mutation]
  )

  const handleBack = useCallback(() => {
    onBack()
  }, [onBack])

  return (
    <section className="report-step">
      <h2>{t('reportStep.howCanWeHelp')}</h2>
      <div className="container">
        <div className="lhs">
          <p className="explanation">
            {t('reportStep.explanation')}
          </p>
          <form data-turbo="false" onSubmit={handleSubmit}>
            <h3>{t('reportStep.resolveIssue')}</h3>

            <label className="c-checkbox-wrapper">
              <input type="checkbox" checked={true} disabled={true} />
              <div className="row">
                <div className="c-checkbox">
                  <GraphicalIcon icon="checkmark" />
                </div>
                {t('reportStep.blockMentor')}
              </div>
            </label>
            <label htmlFor="requeue" className="c-checkbox-wrapper">
              <input
                type="checkbox"
                checked={state.requeue}
                onChange={() => setState({ ...state, requeue: !state.requeue })}
                id="requeue"
              />
              <div className="row">
                <div className="c-checkbox">
                  <GraphicalIcon icon="checkmark" />
                </div>
                {t('reportStep.requeueSolution')}
              </div>
            </label>
            <label htmlFor="report" className="c-checkbox-wrapper">
              <input
                type="checkbox"
                checked={state.report}
                onChange={() => setState({ ...state, report: !state.report })}
                id="report"
              />
              <div className="row">
                <div className="c-checkbox">
                  <GraphicalIcon icon="checkmark" />
                </div>
                {t('reportStep.reportDiscussion')}
              </div>
            </label>

            {state.report ? (
              <div className="report">
                <div className="field">
                  <label htmlFor="reason">
                    {t('reportStep.whyReporting')}
                  </label>
                  <ReasonSelect
                    value={state.reason}
                    setValue={(reason) =>
                      setState({ ...state, reason: reason })
                    }
                  />
                </div>

                <div className="field">
                  <label htmlFor="message">{t('reportStep.whatWentWrong')}</label>
                  <textarea
                    required
                    ref={messageRef}
                    id="message"
                    placeholder="Please provide exactly why you are making this report, and tell us what happened."
                  />
                </div>
                <div className="assurance">
                  {t('reportStep.reportAssurance')}
                </div>
              </div>
            ) : null}

            <div className="form-buttons">
              <FormButton
                type="button"
                onClick={handleBack}
                status={status}
                className="btn-default btn-m"
              >
                <GraphicalIcon icon="arrow-left" />
                <span>{t('reportStep.back')}</span>
              </FormButton>
              <FormButton
                status={status}
                type="submit"
                className="btn-primary btn-m"
              >
                {t('reportStep.finish')}
              </FormButton>
            </div>
          </form>
          <FetchingBoundary
            status={status}
            error={error}
            defaultError={DEFAULT_ERROR}
          />
        </div>
        <div className="rhs">
          <Avatar
            src={discussion.mentor.avatarUrl}
            handle={discussion.mentor.handle}
          />
        </div>
      </div>
    </section>
  )
}

// === end file ===

// === file: ../components/modals/student/finish-mentor-discussion-modal/RateMentorStep.tsx ===
import React from 'react'
import { MentorDiscussion } from '../../../types'
import { Avatar, ExerciseIcon, GraphicalIcon } from '../../../common'
import { fromNow } from '../../../../utils/time'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const RateMentorStep = ({
  discussion,
  onHappy,
  onSatisfied,
  onUnhappy,
}: {
  discussion: MentorDiscussion
  onHappy: () => void
  onSatisfied: () => void
  onUnhappy: () => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/modals/student/finish-mentor-discussion-modal')
  const timedOut =
    discussion.finishedBy &&
    ['mentor_timed_out', 'student_timed_out'].includes(discussion.finishedBy)

  return (
    <section id="a11y-finish-mentor-discussion" className="rate-step">
      <h2>{t('rateMentorStep.reviewDiscussion')}</h2>
      <div className="container">
        <div className="lhs">
          {(discussion.finishedBy === 'mentor' ||
            discussion.finishedBy === 'mentor_timed_out' ||
            discussion.finishedBy === 'student_timed_out') &&
          discussion.finishedAt !== undefined ? (
            <div className="finished-info">
              <Avatar
                src={discussion.mentor.avatarUrl}
                handle={discussion.mentor.handle}
              />
              <div className="info">
                <div className="mentor">
                  {timedOut
                    ? t('rateMentorStep.yourDiscussionTimedOut')
                    : t('rateMentorStep.mentorFinishedMentoring', { mentorHandle: discussion.mentor.handle })}
                </div>
                <div className="exercise">
                  <ExerciseIcon iconUrl={discussion.exercise.iconUrl} />
                  <strong>{discussion.exercise.title}</strong> in{' '}
                  {discussion.track.title}
                </div>
              </div>
              <time>{fromNow(discussion.finishedAt)}</time>
            </div>
          ) : null}
          <p className="explanation">
            {t('rateMentorStep.feedbackRequest', { mentorHandle: discussion.mentor.handle })}
          </p>
          <div className="buttons-section">
            <h3>{t('rateMentorStep.howWasDiscussion', { mentorHandle: discussion.mentor.handle })}</h3>
            <div className="buttons">
              <button type="button" onClick={onUnhappy} className="sad">
                <GraphicalIcon icon="sad-face" />
                {t('rateMentorStep.problematic')}
              </button>
              <button type="button" onClick={onSatisfied} className="neutral">
                <GraphicalIcon icon="neutral-face" />
                {t('rateMentorStep.acceptable')}
              </button>
              <button type="button" onClick={onHappy} className="happy">
                <GraphicalIcon icon="happy-face" />
                {t('rateMentorStep.itWasGood')}
              </button>
            </div>
          </div>
        </div>
        <div className="rhs">
          <Avatar
            src={discussion.mentor.avatarUrl}
            handle={discussion.mentor.handle}
          />
        </div>
      </div>
    </section>
  )
}

// === end file ===

// === file: ../components/modals/student/finish-mentor-discussion-modal/SuccessfulDonationStep.tsx ===
import React from 'react'
import currency from 'currency.js'
import { GraphicalIcon } from '@/components/common'
import { BadgeMedallion } from '@/components/common/BadgeMedallion'
import type { BadgeRarity } from '@/components/types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const badge = { rarity: 'rare' as BadgeRarity, iconName: 'supporter' }

export function SuccessfulDonationStep({
  amount,
  closeLink,
}: {
  amount: currency | null
  closeLink: string
}): JSX.Element {
  const { t } = useAppTranslation('components/modals/student/finish-mentor-discussion-modal')
  return (
    <div className="successful-donation-step flex flex-col items-center text-center">
      <GraphicalIcon
        icon="completed-check-circle"
        height={64}
        width={64}
        className="mb-20"
      />
      <h2 className="text-h3 mb-8">
        {t('successfulDonationStep.youveDonatedSuccessfully', { amount: amount?.format() })}
      </h2>
      <p className="text-p-large mb-24">
        {t('successfulDonationStep.trulyAppreciateSupport')}
      </p>
      <div className="badge-container">
        <BadgeMedallion badge={badge} />
        <div className="text-textColor2 text-18 leading-150">
          {t('successfulDonationStep.youveEarnedBadge')}
          <strong className="font-medium">{t('successfulDonationStep.supporter')}</strong>
          {t('successfulDonationStep.badge')}
        </div>
      </div>

      <a href={closeLink} className="btn-primary btn-l w-[50%]">
        {t('successfulDonationStep.continueToExercise')}
      </a>
    </div>
  )
}

// === end file ===

// === file: ../components/modals/student/finish-mentor-discussion-modal/RequeuedStep.tsx ===
import React from 'react'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type Links = {
  exercise: string
}

export const RequeuedStep = ({ links }: { links: Links }): JSX.Element => {
  const { t } = useAppTranslation('components/modals/student/finish-mentor-discussion-modal')
  return (
    <section className="acceptable-final-step">
      <h2>{t('requeuedStep.solutionRequeued')}</h2>
      <p className="explanation">
        {t('requeuedStep.requedExplanation')}
      </p>

      <div className="form-buttons">
        <a href={links.exercise} className="btn-primary btn-m">
          {t('requeuedStep.goToSolution')}
        </a>
      </div>
    </section>
  )
}

// === end file ===

// === file: ../components/modals/student/finish-mentor-discussion-modal/TestimonialField.tsx ===
import React, { ChangeEvent } from 'react'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const TestimonialField = ({
  id,
  min,
  max,
  value,
  onChange,
}: {
  id: string
  min: number
  max: number
  value: string
  onChange: (e: ChangeEvent) => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/modals/student/finish-mentor-discussion-modal')
  return (
    <>
      <textarea
        value={value}
        onChange={onChange}
        id={id}
        placeholder={t('testimonialField.writeTestimonial')}
        minLength={min}
        maxLength={max}
      />
      <div className="counter">
        <div>
          {value.length} / {max}
        </div>
        <div>{min} {t('testimonialField.minimum')}</div>
      </div>
    </>
  )
}

// === end file ===

// === file: ../components/modals/student/finish-mentor-discussion-modal/UnhappyStep.tsx ===
import React from 'react'
import { MentorReport } from '../FinishMentorDiscussionModal'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type Links = {
  exercise: string
}

export const UnhappyStep = ({
  report,
  links,
}: {
  report: MentorReport
  links: Links
}): JSX.Element => {
  const { t } = useAppTranslation('components/modals/student/finish-mentor-discussion-modal')
  return (
    <section className="unhappy-final-step">
      {report.report ? (
        <React.Fragment>
          <h2>{t('unhappyStep.thankYouForReport')}</h2>
          <p className="explanation">
            {t('unhappyStep.reportExplanation')}
          </p>
        </React.Fragment>
      ) : report.requeue ? (
        <React.Fragment>
          <h2>{t('unhappyStep.solutionRequeued')}</h2>
          <p className="explanation">
            {t('unhappyStep.requeueExplanation')}
          </p>
        </React.Fragment>
      ) : (
        <React.Fragment>
          <h2>{t('unhappyStep.hopeBetterExperience')}</h2>
          <p className="explanation">
            {t('unhappyStep.sorryExplanation')}
          </p>
        </React.Fragment>
      )}

      <div className="form-buttons">
        <a href={links.exercise} className="btn-primary btn-m">
          {t('unhappyStep.goToSolution')}
        </a>
      </div>
    </section>
  )
}

// === end file ===

// === file: ../components/modals/student/finish-mentor-discussion-modal/AddTestimonialStep.tsx ===
import React, { useState, useCallback } from 'react'
import { useMutation } from '@tanstack/react-query'
import { sendRequest } from '@/utils/send-request'
import { MentorDiscussion } from '@/components/types'
import { Avatar, GraphicalIcon } from '@/components/common'
import { FormButton } from '@/components/common/FormButton'
import { FetchingBoundary } from '@/components/FetchingBoundary'
import { TestimonialField } from './TestimonialField'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const DEFAULT_ERROR = new Error('Unable to submit mentor rating')

export const AddTestimonialStep = ({
  onSubmit,
  onSkip,
  onBack,
  discussion,
}: {
  onSubmit: () => void
  onSkip: () => void
  onBack: () => void
  discussion: MentorDiscussion
}): JSX.Element => {
  const { t } = useAppTranslation('components/modals/student/finish-mentor-discussion-modal')
  const [value, setValue] = useState('')
  const {
    mutate: mutation,
    status,
    error,
  } = useMutation({
    mutationFn: async () => {
      const { fetch } = sendRequest({
        endpoint: discussion.links.finish,
        method: 'PATCH',
        body: JSON.stringify({
          rating: 5,
          testimonial: value,
        }),
      })

      return fetch
    },
    onSuccess: () => {
      value.length === 0 ? onSkip() : onSubmit()
    },
  })
  const handleSubmit = useCallback(
    (e) => {
      e.preventDefault()

      mutation()
    },
    [mutation]
  )
  const handleBack = useCallback(() => {
    onBack()
  }, [onBack])
  const handleChange = useCallback((e) => {
    setValue(e.target.value)
  }, [])
  const primaryButtonText = value.length === 0 ? t('addTestimonialStep.skip') : t('addTestimonialStep.finish')
  const primaryButtonClass =
    value.length === 0 ? 'btn-default btn-m' : 'btn-primary btn-m'

  return (
    <section className="testimonial-step">
      <h2>{t('addTestimonialStep.gladGoodDiscussion')}</h2>
      <div className="container">
        <div className="lhs">
          <p className="explanation">
            {t('addTestimonialStep.mentorsVolunteerTime')}
          </p>
          <form data-turbo="false" onSubmit={handleSubmit}>
            <label htmlFor="testimonial">
              {t('addTestimonialStep.leaveTestimonial', { mentorHandle: discussion.mentor.handle })}
            </label>
            <TestimonialField
              id="testimonial"
              min={30}
              max={160}
              value={value}
              onChange={handleChange}
            />
            <div className="form-buttons">
              <FormButton
                type="button"
                onClick={handleBack}
                status={status}
                className="btn-default btn-m"
              >
                <GraphicalIcon icon="arrow-left" />
                <span>{t('addTestimonialStep.back')}</span>
              </FormButton>

              <FormButton
                type="submit"
                status={status}
                className={primaryButtonClass}
              >
                <span>{primaryButtonText}</span>
              </FormButton>
            </div>
          </form>
          <FetchingBoundary
            status={status}
            error={error}
            defaultError={DEFAULT_ERROR}
          />
        </div>
        <div className="rhs">
          <div className="avatar-wrapper">
            <Avatar
              src={discussion.mentor.avatarUrl}
              handle={discussion.mentor.handle}
            />
            {value.length !== 0 ? (
              <GraphicalIcon icon="thumb-up-white-on-green" />
            ) : null}
          </div>
        </div>
      </div>
    </section>
  )
}

// === end file ===

// === file: ../components/modals/student/finish-mentor-discussion-modal/CelebrationStep.tsx ===
import React from 'react'
import { GraphicalIcon } from '../../../common'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type Links = {
  exercise: string
}

export const CelebrationStep = ({
  mentorHandle,
  links,
}: {
  mentorHandle: string
  links: Links
}): JSX.Element => {
  const { t } = useAppTranslation('components/modals/student/finish-mentor-discussion-modal')
  return (
    <section className="celebrate-step neon-cat">
      <img src="https://i.gifer.com/17xo.gif" className="gif" />
      <h2>{t('celebrationStep.thankYouForTestimonial')}</h2>
      <p>
        <strong>{t('celebrationStep.helpedMakeDay', { mentorHandle })}</strong>
        {t('celebrationStep.shareExperience')}
      </p>
      <a href={links.exercise} className="btn-enhanced btn-l --disabled">
        <span>{t('celebrationStep.backToExercise')}</span>
        <GraphicalIcon icon="arrow-right" />
      </a>
    </section>
  )
}

// === end file ===

// === file: ../components/modals/student/finish-mentor-discussion-modal/SatisfiedStep.tsx ===
import React, { useCallback } from 'react'
import { useMutation } from '@tanstack/react-query'
import { sendRequest } from '@/utils/send-request'
import { FormButton } from '@/components/common/FormButton'
import { FetchingBoundary } from '@/components/FetchingBoundary'
import { MentorDiscussion } from '@/components/types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const DEFAULT_ERROR = new Error('Unable to submit mentor rating')

export const SatisfiedStep = ({
  discussion,
  onRequeued,
  onNotRequeued,
  onBack,
}: {
  discussion: MentorDiscussion
  onRequeued: () => void
  onNotRequeued: () => void
  onBack: () => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/modals/student/finish-mentor-discussion-modal')
  const {
    mutate: finish,
    status,
    error,
  } = useMutation({
    mutationFn: async (requeue: boolean) => {
      const { fetch } = sendRequest({
        endpoint: discussion.links.finish,
        method: 'PATCH',
        body: JSON.stringify({ rating: 3, requeue: requeue }),
      })

      return fetch
    },
    onSuccess: (data, requeue) => {
      requeue ? onRequeued() : onNotRequeued()
    },
  })
  const handleBack = useCallback(() => {
    onBack()
  }, [onBack])

  return (
    <section className="acceptable-decision-step">
      <h2>{t('satisfiedStep.sorryMentoringWasntGreat')}</h2>
      <p className="explanation">
        {t('satisfiedStep.putExerciseBack')}
      </p>

      <div className="form-buttons">
        <FormButton
          type="button"
          onClick={handleBack}
          status={status}
          className="btn-default btn-m"
        >
          {t('satisfiedStep.back')}
        </FormButton>
        <FormButton
          type="button"
          onClick={() => finish(false)}
          status={status}
          className="btn-enhanced btn-m"
        >
          {t('satisfiedStep.noThanks')}
        </FormButton>
        <FormButton
          type="button"
          onClick={() => finish(true)}
          status={status}
          className="btn-enhanced btn-m"
        >
          {t('satisfiedStep.yesPlease')}
        </FormButton>
        <FetchingBoundary
          status={status}
          error={error}
          defaultError={DEFAULT_ERROR}
        />
      </div>
    </section>
  )
}

// === end file ===

// === file: ../components/modals/student/finish-mentor-discussion-modal/ReasonSelect.tsx ===
import React from 'react'
import { SingleSelect } from '../../../common/SingleSelect'
import { ReportReason } from '../FinishMentorDiscussionModal'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const OptionComponent = ({ option: reason }: { option: ReportReason }) => {
  const { t } = useAppTranslation('components/modals/student/finish-mentor-discussion-modal')
  switch (reason) {
    case 'coc':
      return <React.Fragment>{t('reasonSelect.codeOfConductViolation')}</React.Fragment>
    case 'incorrect':
      return <React.Fragment>{t('reasonSelect.wrongOrMisleadingInformation')}</React.Fragment>
    case 'other':
      return <React.Fragment>{t('reasonSelect.other')}</React.Fragment>
  }
}

export const ReasonSelect = ({
  value,
  setValue,
}: {
  value: ReportReason
  setValue: (value: ReportReason) => void
}): JSX.Element => {
  return (
    <SingleSelect<ReportReason>
      options={['coc', 'incorrect', 'other']}
      value={value}
      setValue={setValue}
      SelectedComponent={OptionComponent}
      OptionComponent={OptionComponent}
    />
  )
}

// === end file ===

// === file: ../components/modals/student/finish-mentor-discussion-modal/DonationStep.tsx ===
import React, { lazy, Suspense } from 'react'
import { MentoringSessionDonation } from '@/components/types'
import currency from 'currency.js'
import { DiscussionActionsLinks } from '@/components/student/mentoring-session/DiscussionActions'
import { PaymentIntentType } from '@/components/donations/stripe-form/useStripeForm'
import { PreviousDonorContent, NonDonorContent } from '../../BegModal'
const Form = lazy(() => import('@/components/donations/Form'))
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function DonationStep({
  donation,
  links,
  onSuccessfulDonation,
}: {
  donation: MentoringSessionDonation
  links: DiscussionActionsLinks
  onSuccessfulDonation: (type: PaymentIntentType, amount: currency) => void
}): JSX.Element {
  const { t } = useAppTranslation('components/modals/student/finish-mentor-discussion-modal')
  return (
    <div id="a11y-finish-mentor-discussion" className="flex flex-row">
      <div className="mr-64 max-w-[700px]">
        <h3 className="text-h4 mb-4 text-prominentLinkColor">
          {t('donationStep.oneMoreRequest')}
        </h3>
        <h1 className="text-h1 mb-12">{t('donationStep.findingExercismHelpful')}</h1>

        <div className="mb-20 pb-20 border-b-1 border-borderColor7">
          {!donation.previousDonor ? (
            <PreviousDonorContent />
          ) : (
            <NonDonorContent />
          )}
        </div>

        <h3 className="text-h4 mb-6">{t('donationStep.cantAffordIt')}</h3>
        <p className="text-p-large mb-20">
          {t('donationStep.pleaseShareExercism')}
        </p>

        <h3 className="text-h4 mb-6">{t('donationStep.wantToKnowMore')}</h3>
        <p className="text-p-large mb-20">
          {t('donationStep.whyWeNeedDonations')}
        </p>

        <div className="c-youtube-container mb-32">
          <iframe
            width="560"
            height="315"
            frameBorder="0"
            src="https://player.vimeo.com/video/855534271?h=97d3a4c8c2&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479&transparent=0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
          />
          <script src="https://player.vimeo.com/api/player.js" />
        </div>

        <div className="flex">
          <a
            href={links.exercise}
            className="btn-enhanced btn-l !shadow-xsZ1v3 py-16 px-24 mb-16"
          >
            {t('donationStep.continueWithoutDonating')}
          </a>
        </div>
      </div>
      <div className="flex flex-col items-end bg-transparent">
        <div className="w-[564px] shadow-lgZ1 rounded-8 mb-20">
          <Suspense fallback={<div className="c-loading-suspense" />}>
            <Form
              request={donation.request}
              defaultAmount={{
                payment