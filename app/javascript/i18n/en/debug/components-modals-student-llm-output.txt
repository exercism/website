```ts
// i18n
export default {
  "confirmFinishMentorDiscussionModal.areYouSure": "Are you sure you want to end this discussion?",
  "confirmFinishMentorDiscussionModal.feelLikeMentoringReachedConclusion": "When you feel like the mentoring has reached its natural conclusion, or you simply don't wish to proceed further, it's time to end the discussion.",
  "confirmFinishMentorDiscussionModal.cancel": "Cancel",
  "confirmFinishMentorDiscussionModal.reviewAndEndDiscussion": "Review and end discussionâ€¦",
  "iterationSelector.allIterations": "All iterations",
  "iterationSelector.singleIteration": "Single iteration",
  "iterationSelect.iteration": "Iteration {{idx}}",
  "finishMentorDiscussionModal.reportShouldNotBeNull": "Report should not be null"
}

// modified_files
// === file: ../components/modals/student/ConfirmFinishMentorDiscussionModal.tsx ===
// i18n-key-prefix: confirmFinishMentorDiscussionModal
// i18n-namespace: components/modals/student
import React from 'react'
import { Modal } from '../Modal'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const ConfirmFinishMentorDiscussionModal = ({
  open,
  onConfirm,
  onCancel,
}: {
  open: boolean
  onCancel: () => void
  onConfirm: () => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/modals/student')

  return (
    <Modal
      open={open}
      onClose={onCancel}
      className="m-confirm-finish-student-mentor-discussion"
    >
      <h3>{t('confirmFinishMentorDiscussionModal.areYouSure')}</h3>
      <p>
        {t('confirmFinishMentorDiscussionModal.feelLikeMentoringReachedConclusion')}
      </p>
      <div className="buttons">
        <button
          type="button"
          className="btn-small-discourage"
          onClick={() => onCancel()}
        >
          {t('confirmFinishMentorDiscussionModal.cancel')}
        </button>
        <button
          type="button"
          className="btn-primary btn-s"
          onClick={() => onConfirm()}
        >
          {t('confirmFinishMentorDiscussionModal.reviewAndEndDiscussion')}
        </button>
      </div>
    </Modal>
  )
}

// === end file ===

// === file: ../components/modals/student/IterationSelector.tsx ===
// i18n-key-prefix: iterationSelector
// i18n-namespace: components/modals/student
import React from 'react'
import { Iteration } from '../../types'
import { useIterationSelector } from './useIterationSelector'
import { IterationSelect } from './IterationSelect'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const IterationSelector = ({
  iterations,
  iterationIdx,
  setIterationIdx,
}: {
  iterations: readonly Iteration[]
  iterationIdx: number | null
  setIterationIdx: (idx: number | null) => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/modals/student')
  const { selected, onSelected } = useIterationSelector({
    iterationIdx,
    setIterationIdx,
    iterations,
  })

  return (
    <div className="iteration-selector">
      <label className="c-radio-wrapper">
        <input
          type="radio"
          name="published_iterations"
          checked={selected === 'allIterations'}
          onChange={() => onSelected('allIterations')}
        />
        <div className="row">
          <div className="c-radio" />
          <div className="label">{t('iterationSelector.allIterations')}</div>
        </div>
      </label>
      <label className="c-radio-wrapper">
        <input
          type="radio"
          name="published_iterations"
          checked={selected === 'singleIteration'}
          onChange={() => onSelected('singleIteration')}
        />
        <div className="row">
          <div className="c-radio" />
          <div className="label">{t('iterationSelector.singleIteration')}</div>
        </div>
      </label>
      {selected === 'singleIteration' ? (
        <IterationSelect
          iterations={iterations}
          value={iterationIdx}
          setValue={setIterationIdx}
        />
      ) : null}
    </div>
  )
}

// === end file ===

// === file: ../components/modals/student/IterationSelect.tsx ===
// i18n-key-prefix: iterationSelect
// i18n-namespace: components/modals/student
import React from 'react'
import { SingleSelect } from '../../common/SingleSelect'
import { Iteration } from '../../types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const OptionComponent = ({ option: idx }: { option: number }) => {
  const { t } = useAppTranslation('components/modals/student')
  return <React.Fragment>{t('iterationSelect.iteration', { idx })}</React.Fragment>
}

export const IterationSelect = ({
  iterations,
  value,
  setValue,
}: {
  iterations: readonly Iteration[]
  value: number | null
  setValue: (value: number) => void
}): JSX.Element => {
  return (
    <SingleSelect<number>
      options={iterations.map((i) => i.idx)}
      value={value || iterations[0].idx}
      setValue={setValue}
      SelectedComponent={OptionComponent}
      OptionComponent={OptionComponent}
    />
  )
}

// === end file ===

// === file: ../components/modals/student/useIterationSelector.tsx ===
// i18n-key-prefix: useIterationSelector
// i18n-namespace: components/modals/student
import React from 'react'
import { Iteration } from '../../types'

type IterationOption = 'allIterations' | 'singleIteration'

type IterationSelectorHandler = {
  onSelected: (option: IterationOption) => void
  selected: IterationOption
}

export const useIterationSelector = ({
  iterationIdx,
  setIterationIdx,
  iterations,
}: {
  iterationIdx: number | null
  setIterationIdx: (idx: number | null) => void
  iterations: readonly Iteration[]
}): IterationSelectorHandler => {
  return {
    onSelected: (option: IterationOption) => {
      option === 'allIterations'
        ? setIterationIdx(null)
        : setIterationIdx(iterations[0].idx)
    },
    selected: iterationIdx === null ? 'allIterations' : 'singleIteration',
  }
}

// === end file ===

// === file: ../components/modals/student/FinishMentorDiscussionModal.tsx ===
// i18n-key-prefix: finishMentorDiscussionModal
// i18n-namespace: components/modals/student
import React, { useEffect, useState } from 'react'
import { useMachine } from '@xstate/react'
import { createMachine } from 'xstate'
import { redirectTo } from '@/utils/redirect-to'
import { MentorDiscussion, MentoringSessionDonation } from '@/components/types'
import { Modal, ModalProps } from '../Modal'
import * as Step from './finish-mentor-discussion-modal'
import { DiscussionActionsLinks } from '@/components/student/mentoring-session/DiscussionActions'
import currency from 'currency.js'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export type ReportReason = 'coc' | 'incorrect' | 'other'

export type MentorReport = {
  requeue: boolean
  report: boolean
  reason: ReportReason
}

const modalStepMachine = createMachine({
  id: 'modalStep',
  initial: 'rateMentor',
  states: {
    rateMentor: {
      on: {
        HAPPY: 'addTestimonial',
        SATISFIED: 'satisfied',
        UNHAPPY: 'report',
      },
    },
    satisfied: {
      on: { REQUEUED: 'requeued', BACK: 'rateMentor' },
    },
    addTestimonial: {
      on: { SUBMIT: 'celebration', BACK: 'rateMentor' },
    },
    celebration: {
      on: { SUCCESSFUL_DONATION: 'successfulDonation' },
    },
    requeued: {},
    report: {
      on: { SUBMIT: 'unhappy', BACK: 'rateMentor' },
    },
    unhappy: {},
    successfulDonation: {},
  },
})

const Inner = ({
  discussion,
  links,
  donation,
}: {
  discussion: MentorDiscussion
  links: DiscussionActionsLinks
  donation: MentoringSessionDonation
}): JSX.Element => {
  const { t } = useAppTranslation('components/modals/student')
  const [currentStep, send] = useMachine(modalStepMachine)
  const [report, setReport] = useState<MentorReport | null>(null)
  const [donatedAmount, setDonatedAmount] = useState<currency>(currency(0))

  // React 18 renders components async, we need to wait for report to arrive,
  // otherwise it will start rendering `unhappy` step before report arrives from mutation in ReportStep.tsx
  useEffect(() => {
    if (report) send('SUBMIT')
  }, [report])

  switch (currentStep.value) {
    case 'rateMentor':
      return (
        <Step.RateMentorStep
          discussion={discussion}
          onHappy={() => send('HAPPY')}
          onSatisfied={() => send('SATISFIED')}
          onUnhappy={() => send('UNHAPPY')}
        />
      )
    case 'addTestimonial':
      return (
        <Step.AddTestimonialStep
          onSubmit={() => send('SUBMIT')}
          onSkip={() => redirectTo(links.exercise)}
          onBack={() => send('BACK')}
          discussion={discussion}
        />
      )
    case 'celebration':
      if (donation.showDonationModal) {
        return (
          <Step.DonationStep
            donation={donation}
            links={links}
            onSuccessfulDonation={(_, amount) => {
              setDonatedAmount(amount)
              send('SUCCESSFUL_DONATION')
            }}
          />
        )
      }
      return (
        <Step.CelebrationStep
          mentorHandle={discussion.mentor.handle}
          links={links}
        />
      )
    case 'satisfied':
      return (
        <Step.SatisfiedStep
          discussion={discussion}
          onRequeued={() => send('REQUEUED')}
          onBack={() => send('BACK')}
          onNotRequeued={() => {
            redirectTo(links.exercise)
          }}
        />
      )
    case 'requeued':
      return <Step.RequeuedStep links={links} />
    case 'report':
      return (
        <Step.ReportStep
          discussion={discussion}
          send={send}
          onSubmit={setReport}
          onBack={() => send('BACK')}
        />
      )
    case 'successfulDonation':
      return (
        <Step.SuccessfulDonationStep
          amount={donatedAmount}
          closeLink={links.exerciseMentorDiscussionUrl}
        />
      )
    case 'unhappy': {
      if (!report) {
        throw new Error(t('finishMentorDiscussionModal.reportShouldNotBeNull'))
      }

      return <Step.UnhappyStep report={report} links={links} />
    }
    default:
      throw new Error('Unknown modal step')
  }
}

export const FinishMentorDiscussionModal = ({
  links,
  discussion,
  donation,
  ...props
}: Omit<ModalProps, 'className'> & {
  links: DiscussionActionsLinks
  discussion: MentorDiscussion
  donation: MentoringSessionDonation
  onCancel: () => void
}): JSX.Element => {
  return (
    <Modal
      style={{ content: { maxWidth: 'fit-content' } }}
      cover
      aria={{ modal: true, describedby: 'a11y-finish-mentor-discussion' }}
      className="m-finish-student-mentor-discussion"
      ReactModalClassName="bg-unnamed15"
      shouldCloseOnOverlayClick={false}
      {...props}
    >
      <Inner links={links} discussion={discussion} donation={donation} />
    </Modal>
  )
}

// === end file ===
```