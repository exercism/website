```ts
// i18n
export default {
  "learningEnvironmentSelectorStep.onlineOrOnYourComputer": "Online or on your computer?",
  "learningEnvironmentSelectorStep.solveExercisesUsingEditorOrLocally": "You can solve the exercises using either our online editor, or locally within your own environment. If you use your own environment, you'll need to install both {{trackTitle}} and the Exercism CLI.",
  "learningEnvironmentSelectorStep.recommendStartingWithEditor": "We generally recommend starting by using our editor.",
  "learningEnvironmentSelectorStep.howWouldYouLikeToStartSolvingExercises": "How would you like to start solving the {{trackTitle}} exercises?",
  "learningEnvironmentSelectorStep.inTheOnlineEditor": "In the online editor",
  "learningEnvironmentSelectorStep.onMyLocalMachine": "On my local machine",
  "selectedOnlineEditorStep.youreAllSet": "You're all set!",
  "selectedOnlineEditorStep.changeMindInstructions": "If you change your mind later and want to work in your own environment, you'll find instructions for installing the Exercism CLI and language tooling on the right-hand side of each exercise.",
  "selectedOnlineEditorStep.letsJumpIntoFirstExercise": "Let's jump straight into the first exercise, \"Hello, World!\", which will ensure you're comfortable with the editor.",
  "selectedOnlineEditorStep.continueToOnlineEditor": "Continue to online editor",
  "selectedOnlineEditorStep.resetChoices": "Reset choices",
  "selectedLocalMachineStep.letsGetCoding": "Let's get coding!",
  "selectedLocalMachineStep.threeStepsToGetStarted": "There are three steps to get started:",
  "selectedLocalMachineStep.downloadThisExercise": "Download this exercise:",
  "selectedLocalMachineStep.allDoneClickContinue": "<strong>All done?</strong> Click \"Continue\" to see the instructions, then solve the exercise on your machine and submit it via ",
  "selectedLocalMachineStep.continue": "Continue",
  "hasNoLearningModeStep.youllBeInPracticeMode": "You'll be in Practice Mode",
  "hasNoLearningModeStep.trackIsDesignedToHelpPractice": "The {{trackTitle}} track is designed to help you practice the language. Unlike some tracks,&nbsp;{{trackTitle}} doesn't have a Learning Mode yet, so you'll be completing the track's {{numExercises}} exercises in Practice Mode.",
  "hasNoLearningModeStep.learnFromScratch": " If you&apos;d like to learn {{trackTitle}} from scratch, take a look at these supplementary resources that we've collated for you.",
  "hasNoLearningModeStep.continue": "Continue",
  "hasLearningModeStep.hereToLearnOrPractice": "Here to learn or practice?",
  "hasLearningModeStep.trackCanBeUsedForLearningOrPracticing": "This track can be used for learning {{trackTitle}} (Learning Mode) or for practicing your {{trackTitle}} skills (Practice Mode). ",
  "hasLearningModeStep.recommendLearningModeIfNew": "We recommend Learning Mode if you're new to {{trackTitle}}, and Practice Mode if you're experienced.",
  "hasLearningModeStep.startTrackInLearningOrPracticeMode": "Would you like to start the track in Learning Mode or Practice Mode? (You can always change later.)",
  "hasLearningModeStep.learningMode": "Learning Mode",
  "hasLearningModeStep.practiceMode": "Practice Mode"
}

// modified_files
// === file: ../components/modals/track-welcome-modal/LHS/steps/LearningEnvironmentSelectorStep.tsx ===
import React, { useContext } from 'react'
import { TrackContext } from '../../TrackWelcomeModal'
import { StepButton } from './components/StepButton'
import { BootcampRecommendationView } from '../BootcampRecommendationView'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function LearningEnvironmentSelectorStep({
  onSelectLocalMachine,
  onSelectOnlineEditor,
}: Record<
  'onSelectLocalMachine' | 'onSelectOnlineEditor',
  () => void
>): JSX.Element {
  const { track, shouldShowBootcampRecommendationView } =
    useContext(TrackContext)
  const { t } = useAppTranslation('components/modals/track-welcome-modal/LHS/steps')

  if (shouldShowBootcampRecommendationView) {
    return <BootcampRecommendationView />
  }

  return (
    <>
      <h3 className="text-h3 mb-8">{t('learningEnvironmentSelectorStep.onlineOrOnYourComputer')}</h3>
      <p className="mb-12">
        {t('learningEnvironmentSelectorStep.solveExercisesUsingEditorOrLocally', { trackTitle: track.title })}
      </p>
      <p className="mb-12">
        {t('learningEnvironmentSelectorStep.recommendStartingWithEditor')}
      </p>
      <p className="mb-16">
        <span className="font-semibold">
          {t('learningEnvironmentSelectorStep.howWouldYouLikeToStartSolvingExercises', { trackTitle: track.title })}
        </span>
      </p>

      <div className="grid grid-cols-2 gap-12 items-center">
        <StepButton onClick={onSelectOnlineEditor} className="btn-primary">
          {t('learningEnvironmentSelectorStep.inTheOnlineEditor')}
        </StepButton>
        <StepButton onClick={onSelectLocalMachine} className="btn-secondary">
          {t('learningEnvironmentSelectorStep.onMyLocalMachine')}
        </StepButton>
      </div>
    </>
  )
}

// === end file ===
// === file: ../components/modals/track-welcome-modal/LHS/steps/SelectedOnlineEditorStep.tsx ===
import React, { useContext } from 'react'
import { StepButton } from './components/StepButton'
import { TrackContext } from '../../TrackWelcomeModal'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function SelectedOnlineEdiorStep({
  onContinueToOnlineEditor,
}: Record<'onContinueToOnlineEditor', () => void>): JSX.Element {
  const { send } = useContext(TrackContext)
  const { t } = useAppTranslation('components/modals/track-welcome-modal/LHS/steps')

  return (
    <>
      <h3 className="text-h3 mb-8">{t('selectedOnlineEditorStep.youreAllSet')}</h3>
      <p className="mb-16">
        {t('selectedOnlineEditorStep.changeMindInstructions')}
      </p>
      <p className="mb-16">
        {t('selectedOnlineEditorStep.letsJumpIntoFirstExercise')}
      </p>

      <div className="flex gap-8">
        <StepButton
          onClick={onContinueToOnlineEditor}
          className="btn-primary flex-grow"
        >
          {t('selectedOnlineEditorStep.continueToOnlineEditor')}
        </StepButton>
        <StepButton
          onClick={() => send('RESET')}
          className="btn-secondary w-1-3"
        >
          {t('selectedOnlineEditorStep.resetChoices')}
        </StepButton>
      </div>
    </>
  )
}

// === end file ===
// === file: ../components/modals/track-welcome-modal/LHS/steps/OpenModalStep.tsx ===
import React, { useContext, useEffect } from 'react'
import { TrackContext } from '../../TrackWelcomeModal'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function OpenModalStep({
  onHasLearningMode,
  onHasNoLearningMode,
}: Record<
  'onHasLearningMode' | 'onHasNoLearningMode',
  () => void
>): JSX.Element {
  const { track } = useContext(TrackContext)
  const { t } = useAppTranslation('components/modals/track-welcome-modal/LHS/steps')

  useEffect(() => {
    if (track.course) {
      onHasLearningMode()
    } else onHasNoLearningMode()
  }, [onHasLearningMode, onHasNoLearningMode, track])

  return <div>Loading..</div>
}

// === end file ===
// === file: ../components/modals/track-welcome-modal/LHS/steps/SelectedLocalMachineStep.tsx ===
import React, { useContext } from 'react'
import { StepButton } from './components/StepButton'
import CopyToClipboardButton from '@/components/common/CopyToClipboardButton'
import { TrackContext } from '../../TrackWelcomeModal'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function SelectedLocalMachineStep({
  onContinueToLocalMachine,
}: Record<'onContinueToLocalMachine', () => void>): JSX.Element {
  const { track, send, links } = useContext(TrackContext)
    const { t } = useAppTranslation('components/modals/track-welcome-modal/LHS/steps')

  return (
    <>
      <h3 className="text-h3 mb-8">{t('selectedLocalMachineStep.letsGetCoding')}</h3>
      <p className="mb-8">{t('selectedLocalMachineStep.threeStepsToGetStarted')}</p>
      <ol className="list-decimal pl-16 mb-16">
        <li>
          Install{' '}
          <a
            href={links.cliWalkthrough}
            target="_blank"
            rel="noopener noreferrer"
          >
            Exercism's CLI
          </a>
          .
        </li>
        <li>
          Install{' '}
          <a
            href={links.trackTooling}
            target="_blank"
            rel="noopener noreferrer"
          >
            {track.title}'s tooling
          </a>
          .
        </li>
        <li>
          {t('selectedLocalMachineStep.downloadThisExercise')}:
          <CopyToClipboardButton textToCopy={links.downloadCmd} />
        </li>
      </ol>

      <div className="text-17 leading-huge mb-16">
        <strong className="font-semibold">{t('selectedLocalMachineStep.allDoneClickContinue')}</strong>
        <code className="inline-block bg-backgroundColorD px-8 rounded-2">
          <pre>exercism submit</pre>
        </code>
        .
      </div>
      <div className="flex gap-8">
        <StepButton
          onClick={onContinueToLocalMachine}
          className="btn-primary flex-grow"
        >
          {t('selectedLocalMachineStep.continue')}
        </StepButton>
        <StepButton
          onClick={() => send('RESET')}
          className="btn-secondary w-1-3"
        >
          {t('selectedOnlineEditorStep.resetChoices')}
        </StepButton>
      </div>
    </>
  )
}

// === end file ===
// === file: ../components/modals/track-welcome-modal/LHS/steps/HasNoLearningModeStep.tsx ===
import React, { useContext } from 'react'
import { TrackContext } from '../../TrackWelcomeModal'
import { StepButton } from './components/StepButton'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function HasNoLearningModeStep({
  onContinue,
}: {
  onContinue: () => void
}): JSX.Element {
  const { track, links } = useContext(TrackContext)
    const { t } = useAppTranslation('components/modals/track-welcome-modal/LHS/steps')

  return (
    <>
      <h3 className="text-h3 mb-8">{t('hasNoLearningModeStep.youllBeInPracticeMode')}</h3>
      <p className="mb-12">
        {t('hasNoLearningModeStep.trackIsDesignedToHelpPractice', { trackTitle: track.title, numExercises: track.numExercises })}
      </p>
      <p className="mb-12">
        {' '}
        {t('hasNoLearningModeStep.learnFromScratch', { trackTitle: track.title })}
        {' '}
        <a
          className="font-semibold text-prominentLinkColor"
          href={links.learningResources}
          target="_blank"
          rel="noopener noreferrer"
        >
          these supplementary resources
        </a>{' '}
        that we've collated for you.
      </p>
      <StepButton onClick={onContinue} className="btn-primary w-fit">
        {t('hasNoLearningModeStep.continue')}
      </StepButton>
    </>
  )
}

// === end file ===
// === file: ../components/modals/track-welcome-modal/LHS/steps/HasLearningModeStep.tsx ===
import React, { useContext } from 'react'
import { TrackContext } from '../../TrackWelcomeModal'
import { StepButton } from './components/StepButton'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function HasLearningModeStep({
  onSelectLearningMode,
  onSelectPracticeMode,
}: Record<
  'onSelectLearningMode' | 'onSelectPracticeMode',
  () => void
>): JSX.Element {
  const { track } = useContext(TrackContext)
  const { t } = useAppTranslation('components/modals/track-welcome-modal/LHS/steps')

  return (
    <>
      <h3 className="text-h3 mb-8">{t('hasLearningModeStep.hereToLearnOrPractice')}</h3>
      <p data-capy-element="welcome-modal-track-info" className="mb-12">
        {t('hasLearningModeStep.trackCanBeUsedForLearningOrPracticing', { trackTitle: track.title })}
      </p>
      <p className="mb-12">
        {t('hasLearningModeStep.recommendLearningModeIfNew', { trackTitle: track.title })}
      </p>
      <p className="mb-16">
        <span className="font-semibold">
          {t('hasLearningModeStep.startTrackInLearningOrPracticeMode', { trackTitle: track.title })}
        </span>{' '}
        (You can always change later.)
      </p>

      <div className="grid grid-cols-2 gap-12 items-center">
        <StepButton onClick={onSelectLearningMode} className="btn-primary">
          {t('hasLearningModeStep.learningMode')}
        </StepButton>
        <StepButton onClick={onSelectPracticeMode} className="btn-secondary">
          {t('hasLearningModeStep.practiceMode')}
        </StepButton>
      </div>
    </>
  )
}

// === end file ===
```