```ts
// i18n
export default {
  "uploadVideoForm.useDifferentVideo": "Use different video",
  "uploadVideoForm.submitVideo": "Submit video",
  "uploadVideoTextInput.pasteYourVideoUrlYoutube": "PASTE YOUR VIDEO URL (YOUTUBE)",
  "uploadVideoTextInput.videoTitle": "Video title",
  "uploadVideoTextInput.enterTheVideoTitle": "Enter the video title",
  "uploadVideoForm.isTheVideoYoursOrSomeoneElses": "IS THE VIDEO YOURS OR SOMEONE ELSE'S?",
  "uploadVideoForm.mine": "Mine",
  "uploadVideoForm.someoneElse": "Someone else",
  "retrieveVideoForm.pasteYourVideoUrlYoutube": "PASTE YOUR VIDEO URL (YOUTUBE)",
  "retrieveVideoForm.thisLinkIsInvalidPleaseCheckItAgain": "This link is invalid, please check it again!",
  "retrieveVideoForm.pasteYourVideoHere": "Paste your video here",
  "retrieveVideoForm.retrieveVideo": "Retrieve video",
  "uploadVideoModalHeader.submitACommunityWorkthrough": "Submit a community workthrough",
  "uploadVideoModalHeader.producedAVideoOfWorkingThroughThisExerciseYourselfWantToShareItWithTheExercismCommunity": "Produced a video of working through this exercise yourself? Want to share it with the Exercism community? <strong className=\"font-medium text\">Submit the form below and Jeremy will review and approve it.</strong>"
}

// modified_files
// === file: ../components/modals/upload-video/elements/UploadVideoForm.tsx ===
import React, { useCallback, useContext } from 'react'
import { useMutation } from '@tanstack/react-query'
import { sendRequest } from '@/utils/send-request'
import { Icon } from '@/components/common'
import RadioButton from '@/components/mentoring/representation/right-pane/RadioButton'
import { DigDeeperDataContext } from '@/components/track/DigDeeper'
import { ErrorBoundary, useErrorHandler } from '@/components/ErrorBoundary'
import type { CommunityVideoType } from '@/components/types'
import { UploadVideoTextInput } from '.'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type UploadVideoFormProps = {
  data: CommunityVideoType
  onUseDifferentVideoClick: () => void
  onSuccess: () => void
}

const DEFAULT_ERROR = new Error(
  'There was an error uploading this video. Please try again!'
)

const ErrorMessage = ({ error }: { error: unknown }) => {
  useErrorHandler(error, { defaultError: DEFAULT_ERROR })

  return null
}

const ErrorFallback = ({ error }: { error: Error }) => {
  return (
    <div className="c-alert--danger text-16 font-body my-16 normal-case">
      {error.message}
    </div>
  )
}

export function UploadVideoForm({
  data,
  onUseDifferentVideoClick,
  onSuccess,
}: UploadVideoFormProps): JSX.Element {
  const { links, track, exercise } = useContext(DigDeeperDataContext)
  const { t } = useAppTranslation('components/modals/upload-video/elements')

  async function UploadVideo(body: string) {
    const { fetch } = sendRequest({
      endpoint: links.video.create,
      body,
      method: 'POST',
    })
    return fetch
  }

  const { mutate: uploadVideo, error } = useMutation({
    mutationFn: async (body: string) => UploadVideo(body),
    onSuccess,
  })

  const handleSubmitVideo = useCallback(
    (e: React.FormEvent<HTMLFormElement>) => {
      e.preventDefault()
      const data = new FormData(e.currentTarget)
      if (data.get('submitter_is_author') === 'false') {
        data.delete('submitter_is_author')
      }

      uploadVideo(
        JSON.stringify({
          ...Object.fromEntries(data.entries()),
          track_slug: track.slug,
          exercise_slug: exercise.slug,
        })
      )
    },
    [exercise.slug, track.slug, uploadVideo]
  )
  return (
    <form onSubmit={handleSubmitVideo}>
      <img
        src={data.thumbnailUrl}
        alt="video thumbnail"
        style={{ height: '360px', width: '100%', objectFit: 'cover' }}
        className="rounded-16 mb-16"
      />

      <button
        type="button"
        onClick={onUseDifferentVideoClick}
        className="btn-m btn-default shadow-xsZ1v2 border-borderLight2 text-textColor6 mb-16"
      >
        <Icon icon="reset" alt="Reset" className="!ml-0" />
        {t('uploadVideoForm.useDifferentVideo')}
      </button>

      <UploadVideoTextInput
        name="video_url"
        label={t('uploadVideoTextInput.pasteYourVideoUrlYoutube')}
        defaultValue={data.url}
        readOnly
      />

      <UploadVideoTextInput
        name="title"
        label={t('uploadVideoTextInput.videoTitle')}
        placeholder={t('uploadVideoTextInput.enterTheVideoTitle')}
        className="mb-24"
        defaultValue={data.title}
      />

      <fieldset className="flex flex-row font-body mb-32">
        <legend className="text-label text-btnBorder mb-16">
          {t('uploadVideoForm.isTheVideoYoursOrSomeoneElses')}
        </legend>
        <RadioButton
          className="mr-24"
          labelClassName="text-16"
          name="submitter_is_author"
          label={t('uploadVideoForm.mine')}
          value="true"
          defaultChecked
        />
        <RadioButton
          name="submitter_is_author"
          label={t('uploadVideoForm.someoneElse')}
          value="false"
          labelClassName="text-16"
        />
      </fieldset>

      <ErrorBoundary FallbackComponent={ErrorFallback}>
        <ErrorMessage error={error} />
      </ErrorBoundary>

      <div className="flex">
        <button type="submit" className="w-full btn-primary btn-l grow">
          {t('uploadVideoForm.submitVideo')}
        </button>
      </div>
    </form>
  )
}

// === end file ===

// === file: ../components/modals/upload-video/elements/UploadVideoTextInput.tsx ===
import React from 'react'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type UploadVideoInputProps = {
  label: string
  readOnly?: boolean
  className?: string
  defaultValue?: string
  onChange?: React.ChangeEventHandler<HTMLInputElement>
  name: string
  error?: boolean
  errorMessage?: string
  placeholder?: string
}

export function UploadVideoTextInput({
  label,
  readOnly = false,
  className = '',
  name,
  defaultValue,
  error,
  errorMessage,
  placeholder,
}: UploadVideoInputProps): JSX.Element {
  const { t } = useAppTranslation('components/modals/upload-video/elements')

  return (
    <label
      className={`text-label text-btnBorder flex flex-col mb-16 ${className}`}
    >
      <span className="mb-8">{label}</span>
      <input
        type="text"
        name={name}
        defaultValue={defaultValue}
        readOnly={readOnly}
        required
        placeholder={placeholder}
        className={`font-body ${readOnly ? '!bg-disabledLight' : ''} `}
      />
      {error && (
        <span className="c-alert--danger text-16 font-body mt-16 normal-case">
          {errorMessage}
        </span>
      )}
    </label>
  )
}

// === end file ===

// === file: ../components/modals/upload-video/elements/ExerciseTrackIndicator.tsx ===
import React, { useContext } from 'react'
import { DigDeeperDataContext } from '@/components/track/DigDeeper'
import { TrackIcon, ExerciseIcon } from '../../../common'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type ExerciseTrackIndicatorProps = {
  videoRetrieved: boolean
}

export function ExerciseTrackIndicator({
  videoRetrieved,
}: ExerciseTrackIndicatorProps): JSX.Element {
  const { exercise, track } = useContext(DigDeeperDataContext)
  const { t } = useAppTranslation('components/modals/upload-video/elements')

  return (
    <div
      className={`py-8 px-24 bg-gray border-2 border-gradient rounded-100 flex flex-row items-center mb-${
        videoRetrieved ? 16 : 32
      }`}
    >
      <TrackIcon
        iconUrl={track.iconUrl}
        title={track.title}
        className="h-[40px], w-[40px] mr-12"
      />
      <ExerciseIcon iconUrl={exercise.iconUrl} className="h-48 mr-12" />
      <div className="flex flex-col">
        <div className="text-h5">{exercise.title}</div>
        <div className="textColor-6 font-normal leading-150 text-16">
          {track.title}
        </div>
      </div>
    </div>
  )
}

// === end file ===

// === file: ../components/modals/upload-video/elements/RetrieveVideoForm.tsx ===
import React, { useCallback, useContext, useState } from 'react'
import { useMutation } from '@tanstack/react-query'
import { sendRequest } from '@/utils/send-request'
import { DigDeeperDataContext } from '@/components/track/DigDeeper'
import type { CommunityVideoType } from '@/components/types'
import { UploadVideoTextInput } from '.'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export type VideoDataResponse =
  | { communityVideo: CommunityVideoType }
  | undefined
  | null

type RetrieveVideoForm = {
  onSuccess: (data: VideoDataResponse) => void
}

export function RetrieveVideoForm({
  onSuccess,
}: RetrieveVideoForm): JSX.Element {
  const { links } = useContext(DigDeeperDataContext)
  const { t } = useAppTranslation('components/modals/upload-video/elements')

  async function VerifyVideo(link: string) {
    const URL = `${links.video.lookup}?video_url=${link}`
    const { fetch } = sendRequest({ endpoint: URL, body: null, method: 'GET' })
    return fetch
  }

  const [retrievalError, setRetrievalError] = useState(false)

  const { mutate: verifyVideo } = useMutation({
    mutationFn: async (url: any) => VerifyVideo(url),
    onSuccess: (data: VideoDataResponse) => onSuccess(data),
    onError: () => setRetrievalError(true),
  })

  const handleRetrieveVideo = useCallback(
    (e: React.FormEvent<HTMLFormElement>) => {
      e.preventDefault()
      const data = new FormData(e.currentTarget)
      const videoUrl = data.get('videoUrl')
      verifyVideo(videoUrl)
    },
    [verifyVideo]
  )

  return (
    <form onSubmit={handleRetrieveVideo}>
      <UploadVideoTextInput
        label={t('retrieveVideoForm.pasteYourVideoUrlYoutube')}
        name="videoUrl"
        error={retrievalError}
        errorMessage={t('retrieveVideoForm.thisLinkIsInvalidPleaseCheckItAgain')}
        placeholder={t('retrieveVideoForm.pasteYourVideoHere')}
      />
      <div className="flex">
        <button type="submit" className="w-full btn-primary btn-l grow">
          {t('retrieveVideoForm.retrieveVideo')}
        </button>
      </div>
    </form>
  )
}

// === end file ===

// === file: ../components/modals/upload-video/elements/UploadVideoModalHeader.tsx ===
import React from 'react'
import { ExerciseTrackIndicator } from './ExerciseTrackIndicator'
import { useAppTranslation } from '@/i18n/useAppTranslation'
import { Trans } from 'react-i18next'

export function UploadVideoModalHeader({
  videoRetrieved = false,
}: {
  videoRetrieved?: boolean
}): JSX.Element {
  const { t } = useAppTranslation('components/modals/upload-video/elements')

  return (
    <>
      <h2 className="text-h2 mb-8">{t('uploadVideoModalHeader.submitACommunityWorkthrough')}</h2>
      <p className="text-prose mb-24">
        <Trans
          i18nKey="uploadVideoModalHeader.producedAVideoOfWorkingThroughThisExerciseYourselfWantToShareItWithTheExercismCommunity"
          components={[
            <strong className="font-medium text" />,
          ]}
        />
      </p>
      <ExerciseTrackIndicator videoRetrieved={videoRetrieved} />
    </>
  )
}

// === end file ===
```