```ts
// i18n
export default {
  "useNotificationMutation.unableToMarkAllNotificationsAsRead": "Unable to mark all notifications as read",
  "list.youHaveNoNotifications": "You have no notifications",
  "markAllNotificationsAsReadModal.markAllAsRead": "Mark all as read?",
  "markAllNotificationsAsReadModal.areYouSure": "Are you sure you want to mark all notifications as read?",
  "markAllNotificationsAsReadModal.continue": "Continue",
  "markAllNotificationsAsReadModal.cancel": "Cancel"
}

// modified_files
// === file: ../components/notifications/notifications-list/useNotificationMutation.tsx ===
import { sendRequest } from '../../../utils/send-request'
import {
  MutationStatus,
  UseMutateFunction,
  useMutation,
} from '@tanstack/react-query'

export const useNotificationMutation = ({
  endpoint,
  body,
}: {
  endpoint: string
  body: { uuids: readonly string[] } | null
}): {
  mutation: UseMutateFunction
  status: MutationStatus
  error: unknown
} => {
  const {
    mutate: mutation,
    status,
    error,
  } = useMutation({
    mutationFn: async () => {
      const { fetch } = sendRequest({
        endpoint: endpoint,
        method: 'PATCH',
        body: JSON.stringify(body),
      })

      return fetch
    },
  })

  return {
    mutation,
    status,
    error,
  }
}

// === end file ===
// === file: ../components/notifications/notifications-list/List.tsx ===
import React, { useCallback } from 'react'
import { Notification as NotificationType } from '../../types'
import { Notification } from './Notification'
import { EmptyList } from './EmptyList'
import { GraphicalIcon } from '../../common'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const List = ({
  notifications,
  selected,
  onSelect,
  disabled,
}: {
  notifications: readonly NotificationType[]
  selected: readonly NotificationType[]
  onSelect: (notification: NotificationType) => void
  disabled: boolean
}): JSX.Element => {
  const { t } = useAppTranslation('components/notifications/notifications-list')
  const handleChange = useCallback(
    (notification: NotificationType) => {
      return () => onSelect(notification)
    },
    [onSelect]
  )

  if (notifications.length === 0) {
    return <EmptyList />
  }

  return (
    <div className="notifications">
      {notifications.map((notification) => (
        <div key={notification.uuid} className="notification-row">
          <label
            className={`c-checkbox-wrapper notification-cb-${notification.uuid}`}
          >
            <input
              disabled={disabled}
              type="checkbox"
              checked={selected.map((s) => s.uuid).includes(notification.uuid)}
              onChange={handleChange(notification)}
              id={`notification-cb-${notification.uuid}`}
            />
            <div className="row">
              <div className="c-checkbox">
                <GraphicalIcon icon="checkmark" />
              </div>
            </div>
          </label>
          <Notification {...notification} />
        </div>
      ))}
    </div>
  )
}

// === end file ===
// === file: ../components/notifications/notifications-list/MarkAllNotificationsAsReadModal.tsx ===
import React, { useCallback } from 'react'
import { MutationStatus } from '@tanstack/react-query'
import { Modal, ModalProps } from '@/components/modals/Modal'
import { FormButton } from '@/components/common/FormButton'
import { ErrorBoundary, ErrorMessage } from '@/components/ErrorBoundary'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const DEFAULT_ERROR = new Error('Unable to mark all notifications as read')

export const MarkAllNotificationsAsReadModal = ({
  mutation,
  onClose,
  onSubmit,
  ...props
}: Omit<ModalProps, 'className'> & {
  mutation: {
    status: MutationStatus
    error: unknown
  }
  onSubmit: () => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/notifications/notifications-list')
  const handleClose = useCallback(() => {
    if (mutation.status === 'pending') {
      return
    }

    onClose()
  }, [mutation.status, onClose])

  const handleSubmit = useCallback(
    (e) => {
      e.preventDefault()

      onSubmit()
      handleClose()
    },
    [onSubmit, handleClose]
  )

  return (
    <Modal className="m-generic-confirmation" onClose={handleClose} {...props}>
      <h3>{t('markAllNotificationsAsReadModal.markAllAsRead')}</h3>
      <p>{t('markAllNotificationsAsReadModal.areYouSure')}</p>
      <form data-turbo="false" onSubmit={handleSubmit} className="buttons">
        <FormButton
          type="submit"
          status={mutation.status}
          className="btn-primary btn-s"
        >
          {t('markAllNotificationsAsReadModal.continue')}
        </FormButton>
        <FormButton
          type="button"
          status={mutation.status}
          onClick={handleClose}
          className="btn-enhanced btn-s"
        >
          {t('markAllNotificationsAsReadModal.cancel')}
        </FormButton>
      </form>
      <ErrorBoundary resetKeys={[mutation.status]}>
        <ErrorMessage error={mutation.error} defaultError={DEFAULT_ERROR} />
      </ErrorBoundary>
    </Modal>
  )
}

// === end file ===
// === file: ../components/notifications/notifications-list/EmptyList.tsx ===
import React from 'react'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const EmptyList = (): JSX.Element => {
  const { t } = useAppTranslation('components/notifications/notifications-list')
  return <div>{t('list.youHaveNoNotifications')}</div>
}

// === end file ===
// === file: ../components/notifications/notifications-list/MutationButton.tsx ===
import React from 'react'
import { MutationStatus } from '@tanstack/react-query'
import { FormButton } from '@/components/common/FormButton'
import { ErrorBoundary, ErrorMessage } from '@/components/ErrorBoundary'

export const MutationButton = ({
  onClick,
  disabled,
  mutation,
  defaultError,
  children,
}: React.PropsWithChildren<{
  onClick: () => void
  disabled: boolean
  mutation: { status: MutationStatus; error: unknown }
  defaultError: Error
}>): JSX.Element => {
  return (
    <React.Fragment>
      <FormButton
        type="button"
        onClick={onClick}
        disabled={disabled}
        status={mutation.status}
        className="btn-s btn-enhanced"
      >
        {children}
      </FormButton>
      <ErrorBoundary resetKeys={[mutation.status]}>
        <ErrorMessage error={mutation.error} defaultError={defaultError} />
      </ErrorBoundary>
    </React.Fragment>
  )
}

// === end file ===
// === file: ../components/notifications/notifications-list/Notification.tsx ===
import React from 'react'
import { Notification as NotificationType } from '../../types'
import { fromNow } from '../../../utils/time'
import { GraphicalIcon } from '../../common'

const NotificationImage = ({
  imageType,
  imageUrl,
  iconFilter,
}: Pick<NotificationType, 'imageType' | 'imageUrl' | 'iconFilter'>) => {
  switch (imageType) {
    case 'avatar':
      return (
        <div
          className="c-avatar"
          style={{ backgroundImage: `url(${imageUrl})` }}
        />
      )
    default:
      return (
        <img alt="" src={imageUrl} className={`icon filter-${iconFilter}`} />
      )
  }
}

const NotificationStatus = ({ isRead }: Pick<NotificationType, 'isRead'>) => {
  const className = isRead ? 'read' : 'unread'

  return <div className={className} />
}

const NotificationContent = ({
  text,
  createdAt,
}: Pick<NotificationType, 'text' | 'createdAt'>) => {
  return (
    <div className="content">
      <div className="text" dangerouslySetInnerHTML={{ __html: text }} />
      <div className="created-at">{fromNow(createdAt)}</div>
    </div>
  )
}

export const Notification = ({
  url,
  imageType,
  imageUrl,
  text,
  createdAt,
  isRead,
  iconFilter,
}: NotificationType): JSX.Element => {
  return (
    <a href={url} className={`notification ${isRead ? '--read' : '--unread'}`}>
      <NotificationImage
        iconFilter={iconFilter}
        imageType={imageType}
        imageUrl={imageUrl}
      />
      <NotificationContent text={text} createdAt={createdAt} />
      <NotificationStatus isRead={isRead} />
      <GraphicalIcon icon="chevron-right" className="action-icon" />
    </a>
  )
}

// === end file ===
```