```ts
// i18n
export default {
  "photo.yourProfilePicture": "Your profile picture",
  "photo.uploadNewImage": "Upload new image",
  "photo.cropping": "You can crop the image after uploading.",
  "photo.youCanAlso": "You can also <deleteButton/>.",
  "croppingModal.cropFinished": "Crop Finished"
}

// modified_files
// === file: ../components/profile/avatar-selector/Photo.tsx ===
import React from 'react'
import { Avatar } from '../../common'
import { DeletePhotoButton } from './photo/DeletePhotoButton'
import { User } from '../../types'
import { useAppTranslation } from '@/i18n/useAppTranslation'
import { Trans } from 'react-i18next'

type Links = {
  delete: string
}

export const Photo = ({
  user,
  onAttach,
  onDelete,
  links,
}: {
  user: User
  onAttach: (e: React.ChangeEvent<HTMLInputElement>) => void
  onDelete: (user: User) => void
  links: Links
}): JSX.Element => {
  const { t } = useAppTranslation('components/profile/avatar-selector')

  return (
    <div className="c-avatar-selector">
      <label htmlFor="avatar">
        <Avatar handle={user.handle} src={user.avatarUrl} />
      </label>
      <div className="--details">
        <h2>{t('photo.yourProfilePicture')}</h2>
        <div className="faux-button">
          <div className="btn btn-enhanced btn-s">{t('photo.uploadNewImage')}</div>
          <input type="file" id="avatar" onChange={onAttach} />
          <div className="hover-bg" />
        </div>
        <div className="cropping">{t('photo.cropping')}</div>
        {user.hasAvatar ? (
          <div className="deleting">
            <Trans
              i18nKey="photo.youCanAlso"
              components={{ deleteButton: <DeletePhotoButton links={links} onDelete={onDelete} /> }}
            />
          </div>
        ) : null}
      </div>
    </div>
  )
}
// === end file ===

// === file: ../components/profile/avatar-selector/CroppingModal.tsx ===
import React, { useCallback } from 'react'
import { State, Action } from './use-image-crop'
import { Modal } from '../../modals/Modal'
import { CroppingStep } from './cropping-modal/CroppingStep'
import { CropFinishedStep } from './cropping-modal/CropFinishedStep'
import 'react-image-crop/dist/ReactCrop.css'
import { User } from '../../types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type Links = {
  update: string
}

export const CroppingModal = ({
  state,
  dispatch,
  onUpload,
  links,
}: {
  state: State
  dispatch: React.Dispatch<Action>
  onUpload: (user: User) => void
  links: Links
}): JSX.Element => {
  const { t } = useAppTranslation('components/profile/avatar-selector')
  const handleClose = useCallback(() => null, [])

  let step

  switch (state.status) {
    case 'cropping':
      step = <CroppingStep state={state} dispatch={dispatch} />

      break
    case 'cropFinished':
      step = (
        <CropFinishedStep
          state={state}
          dispatch={dispatch}
          onUpload={onUpload}
          links={links}
        />
      )

      break
    default:
      step = undefined

      break
  }

  return (
    <Modal
      open={step !== undefined}
      onClose={handleClose}
      className="m-crop-avatar"
    >
      {step}
    </Modal>
  )
}
// === end file ===
```