```ts
// i18n
export default {
  "otherContributionsList.generic": "Generic",
  "maintainingContributionsList.generic": "Generic",
  "buildingContributionsList.generic": "Generic"
}

// modified_files
// === file: ../components/profile/contributions-list/OtherContributionsList.tsx ===
// i18n-key-prefix: otherContributionsList
// i18n-namespace: components/profile/contributions-list
import React from 'react'
import { usePaginatedRequestQuery, type Request } from '@/hooks/request-query'
import { useList } from '@/hooks/use-list'
import { fromNow } from '@/utils/date'
import { scrollToTop } from '@/utils/scroll-to-top'
import {
  TrackIcon,
  Reputation,
  GraphicalIcon,
  Pagination,
} from '@/components/common'
import { FetchingBoundary } from '@/components/FetchingBoundary'
import { ResultsZone } from '@/components/ResultsZone'
import type {
  Contribution as ContributionProps,
  PaginatedResult,
} from '@/components/types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const DEFAULT_ERROR = new Error('Unable to load other contributions')

export const OtherContributionsList = ({
  request: initialRequest,
}: {
  request: Request
}): JSX.Element => {
  const { t } = useAppTranslation('components/profile/contributions-list')
  const { request, setPage } = useList(initialRequest)
  const {
    status,
    data: resolvedData,
    isFetching,
    error,
  } = usePaginatedRequestQuery<
    PaginatedResult<ContributionProps[]>,
    Error | Response
  >([request.endpoint, request.query], {
    ...request,
    options: { ...request.options, staleTime: 1000 },
  })

  return (
    <ResultsZone isFetching={isFetching}>
      <FetchingBoundary
        error={error}
        status={status}
        defaultError={DEFAULT_ERROR}
      >
        {resolvedData ? (
          <React.Fragment>
            <div className="other">
              {resolvedData.results.map((contribution) => (
                <Contribution key={contribution.uuid} {...contribution} />
              ))}
            </div>
            <Pagination
              disabled={resolvedData === undefined}
              current={request.query.page || 1}
              total={resolvedData.meta.totalPages}
              setPage={(p) => {
                setPage(p)
                scrollToTop('profile-contributions', 32)
              }}
            />
          </React.Fragment>
        ) : null}
      </FetchingBoundary>
    </ResultsZone>
  )
}

const Contribution = ({
  value,
  text,
  iconUrl,
  internalUrl,
  externalUrl,
  createdAt,
  track,
}: ContributionProps): JSX.Element => {
  const { t } = useAppTranslation('components/profile/contributions-list')
  const url = internalUrl || externalUrl
  const linkIcon = url === internalUrl ? 'chevron-right' : 'external-link'

  return (
    <a href={url} className="reputation-token">
      <img alt="" src={iconUrl} className="c-icon primary-icon" />
      <div className="info">
        <div className="title">{text}</div>
        <div className="extra">
          {track ? (
            <div className="exercise">
              in
              <TrackIcon
                iconUrl={track.iconUrl}
                title={track.title}
                className="primary-icon"
              />
              <div className="name">{track.title}</div>
            </div>
          ) : (
            <div className="generic">{t('otherContributionsList.generic')}</div>
          )}
          <time dateTime={createdAt}>{fromNow(createdAt)}</time>
        </div>
      </div>
      <Reputation value={`+ ${value}`} type="primary" size="small" />
      <GraphicalIcon icon={linkIcon} className="action-button" />
    </a>
  )
}

// === end file ===
// === file: ../components/profile/contributions-list/MaintainingContributionsList.tsx ===
// i18n-key-prefix: maintainingContributionsList
// i18n-namespace: components/profile/contributions-list
import React from 'react'
import { usePaginatedRequestQuery, type Request } from '@/hooks/request-query'
import { useList } from '@/hooks/use-list'
import { fromNow } from '@/utils/date'
import { scrollToTop } from '@/utils/scroll-to-top'
import {
  TrackIcon,
  Reputation,
  GraphicalIcon,
  Pagination,
} from '@/components/common'
import { FetchingBoundary } from '@/components/FetchingBoundary'
import { ResultsZone } from '@/components/ResultsZone'
import type {
  Contribution as ContributionProps,
  PaginatedResult,
} from '@/components/types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const DEFAULT_ERROR = new Error('Unable to load maintaining contributions')

export const MaintainingContributionsList = ({
  request: initialRequest,
}: {
  request: Request
}): JSX.Element => {
  const { t } = useAppTranslation('components/profile/contributions-list')
  const { request, setPage } = useList(initialRequest)
  const {
    status,
    data: resolvedData,
    isFetching,
    error,
  } = usePaginatedRequestQuery<
    PaginatedResult<ContributionProps[]>,
    Error | Response
  >([request.endpoint, request.query], request)

  return (
    <ResultsZone isFetching={isFetching}>
      <FetchingBoundary
        error={error}
        status={status}
        defaultError={DEFAULT_ERROR}
      >
        {resolvedData ? (
          <React.Fragment>
            <div className="maintaining">
              {resolvedData.results.map((contribution) => (
                <Contribution key={contribution.uuid} {...contribution} />
              ))}
            </div>
            <Pagination
              disabled={resolvedData === undefined}
              current={request.query.page || 1}
              total={resolvedData.meta.totalPages}
              setPage={(p) => {
                setPage(p)
                scrollToTop('profile-contributions', 32)
              }}
            />
          </React.Fragment>
        ) : null}
      </FetchingBoundary>
    </ResultsZone>
  )
}

const Contribution = ({
  value,
  text,
  iconUrl,
  internalUrl,
  externalUrl,
  createdAt,
  track,
}: ContributionProps): JSX.Element => {
  const { t } = useAppTranslation('components/profile/contributions-list')
  const url = internalUrl || externalUrl
  const linkIcon = url === internalUrl ? 'chevron-right' : 'external-link'
  const parsedText = text
    .replace(/^You reviewed/, 'Reviewed')
    .replace(/^You merged/, 'Merged')

  return (
    <a href={url} className="reputation-token">
      <img alt="" src={iconUrl} className="c-icon primary-icon" />
      <div className="info">
        <div
          className="title"
          dangerouslySetInnerHTML={{
            __html: parsedText,
          }}
        />
        <div className="extra">
          {track ? (
            <div className="exercise">
              in
              <TrackIcon
                iconUrl={track.iconUrl}
                title={track.title}
                className="primary-icon"
              />
              <div className="name">{track.title}</div>
            </div>
          ) : (
            <div className="generic">{t('maintainingContributionsList.generic')}</div>
          )}
          <time className="sm:block hidden" dateTime={createdAt}>
            {fromNow(createdAt)}
          </time>
        </div>
      </div>
      <Reputation value={`+ ${value}`} type="primary" size="small" />
      <GraphicalIcon
        icon={linkIcon}
        className="action-button sm:block hidden"
      />
    </a>
  )
}

// === end file ===
// === file: ../components/profile/contributions-list/BuildingContributionsList.tsx ===
// i18n-key-prefix: buildingContributionsList
// i18n-namespace: components/profile/contributions-list
import React from 'react'
import { usePaginatedRequestQuery, Request } from '@/hooks/request-query'
import { useList } from '@/hooks/use-list'
import { fromNow } from '@/utils/date'
import { scrollToTop } from '@/utils/scroll-to-top'
import {
  TrackIcon,
  Reputation,
  GraphicalIcon,
  Pagination,
} from '@/components/common'
import { missingExerciseIconErrorHandler } from '@/components/common/imageErrorHandler'
import { FetchingBoundary } from '@/components/FetchingBoundary'
import { ResultsZone } from '@/components/ResultsZone'
import type {
  Contribution as ContributionProps,
  PaginatedResult,
} from '@/components/types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const DEFAULT_ERROR = new Error('Unable to load building contributions')

export const BuildingContributionsList = ({
  request: initialRequest,
}: {
  request: Request
}): JSX.Element => {
  const { t } = useAppTranslation('components/profile/contributions-list')
  const { request, setPage } = useList(initialRequest)
  const {
    status,
    data: resolvedData,
    isFetching,
    error,
  } = usePaginatedRequestQuery<
    PaginatedResult<ContributionProps[]>,
    Error | Response
  >([request.endpoint, request.query], request)

  return (
    <ResultsZone isFetching={isFetching}>
      <FetchingBoundary
        error={error}
        status={status}
        defaultError={DEFAULT_ERROR}
      >
        {resolvedData ? (
          <React.Fragment>
            <div className="maintaining">
              {resolvedData.results.map((contribution) => (
                <Contribution key={contribution.uuid} {...contribution} />
              ))}
            </div>
            <Pagination
              disabled={resolvedData === undefined}
              current={request.query.page || 1}
              total={resolvedData.meta.totalPages}
              setPage={(p) => {
                setPage(p)
                scrollToTop('profile-contributions', 32)
              }}
            />
          </React.Fragment>
        ) : null}
      </FetchingBoundary>
    </ResultsZone>
  )
}

const Contribution = ({
  value,
  text,
  iconUrl,
  internalUrl,
  externalUrl,
  createdAt,
  track,
}: ContributionProps): JSX.Element => {
  const { t } = useAppTranslation('components/profile/contributions-list')
  const url = internalUrl || externalUrl
  const linkIcon = url === internalUrl ? 'chevron-right' : 'external-link'

  const parsedText = text
    .replace(/^You created/, 'Created')
    .replace(/^You contributed/, 'Contributed')
    .replace(/^You authored/, 'Authored')

  return (
    <a href={url} className="reputation-token">
      <img
        alt=""
        src={iconUrl}
        className="c-icon primary-icon"
        onError={missingExerciseIconErrorHandler}
      />
      <div className="info">
        <div
          className="title"
          dangerouslySetInnerHTML={{
            __html: parsedText,
          }}
        />
        <div className="extra">
          {track ? (
            <div className="exercise">
              in
              <TrackIcon
                iconUrl={track.iconUrl}
                title={track.title}
                className="primary-icon"
              />
              <div className="name">{track.title}</div>
            </div>
          ) : (
            <div className="generic">{t('buildingContributionsList.generic')}</div>
          )}
          <time className="sm:block hidden" dateTime={createdAt}>
            {fromNow(createdAt)}
          </time>
        </div>
      </div>
      <Reputation value={`+ ${value}`} type="primary" size="small" />
      <GraphicalIcon
        icon={linkIcon}
        className="action-button sm:block hidden"
      />
    </a>
  )
}

// === end file ===
// === file: ../components/profile/contributions-list/AuthoringContributionsList.tsx ===
// i18n-key-prefix: authoringContributionsList
// i18n-namespace: components/profile/contributions-list
import React from 'react'
import { usePaginatedRequestQuery, type Request } from '@/hooks/request-query'
import { useList } from '@/hooks/use-list'
import { Pagination } from '@/components/common'
import ExerciseWidget from '@/components/common/ExerciseWidget'
import { FetchingBoundary } from '@/components/FetchingBoundary'
import { ResultsZone } from '@/components/ResultsZone'
import type { ExerciseAuthorship, PaginatedResult } from '@/components/types'
import { scrollToTop } from '@/utils/scroll-to-top'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const DEFAULT_ERROR = new Error('Unable to load authoring contributions')

export const AuthoringContributionsList = ({
  request: initialRequest,
}: {
  request: Request
}): JSX.Element => {
  const { t } = useAppTranslation('components/profile/contributions-list')
  const { request, setPage } = useList(initialRequest)
  const {
    status,
    data: resolvedData,
    isFetching,
    error,
  } = usePaginatedRequestQuery<
    PaginatedResult<ExerciseAuthorship[]>,
    Error | Response
  >([request.endpoint, request.query], request)

  return (
    <ResultsZone isFetching={isFetching}>
      <FetchingBoundary
        error={error}
        status={status}
        defaultError={DEFAULT_ERROR}
      >
        {resolvedData ? (
          <React.Fragment>
            <div className="authoring">
              <div className="exercises">
                {resolvedData.results.map((authorship) => {
                  return (
                    /*large*/
                    <ExerciseWidget
                      key={authorship.exercise.slug}
                      exercise={authorship.exercise}
                      track={authorship.track}
                    />
                  )
                })}
              </div>
            </div>
            <Pagination
              disabled={resolvedData === undefined}
              current={request.query.page || 1}
              total={resolvedData.meta.totalPages}
              setPage={(p) => {
                setPage(p)
                scrollToTop('profile-contributions', 32)
              }}
            />
          </React.Fragment>
        ) : null}
      </FetchingBoundary>
    </ResultsZone>
  )
}

// === end file ===
```