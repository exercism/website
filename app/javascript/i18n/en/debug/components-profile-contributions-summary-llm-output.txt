```ts
// i18n
export default {
  "totalReputation.addressHas": "{{handle}} has",
  "totalReputation.youHave": "You have",
  "totalReputation.reputation": "Reputation",
  "trackSelect.rep": "rep",
  "categorySummary.noRep": "No rep",
  "categorySummary.rep": "{{reputation}} rep"
}

// modified_files
// === file: ../components/profile/contributions-summary/TotalReputation.tsx ===
import React from 'react'
import { GraphicalIcon } from '../../common'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const TotalReputation = ({
  handle,
  reputation,
}: {
  handle?: string
  reputation: number
}): JSX.Element => {
  const { t } = useAppTranslation('components/profile/contributions-summary')
  const address = handle ? t('totalReputation.addressHas', { handle }) : t('totalReputation.youHave')

  return (
    <div className="c-primary-reputation --large">
      {address}
      <GraphicalIcon icon="reputation" />
      {reputation.toLocaleString()} {t('totalReputation.reputation')}
    </div>
  )
}

// === end file ===
// === file: ../components/profile/contributions-summary/TrackSelect.tsx ===
import React, { useCallback } from 'react'
import { TrackContribution } from '@/components/types'
import {
  TrackSelect as BaseTrackSelect,
  TrackLogo,
} from '@/components/common/TrackSelect'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const OptionComponent = ({
  option: track,
}: {
  option: TrackContribution
}): JSX.Element => {
  return (
    <React.Fragment>
      <TrackLogo track={track} />
      <div className="title">{track.title}</div>
      <div className="count">{track.totalReputation.toLocaleString()} rep</div>
    </React.Fragment>
  )
}

const SelectedComponent = ({
  option: track,
}: {
  option: TrackContribution
}): JSX.Element => {
  return (
    <React.Fragment>
      <TrackLogo track={track} />
      <div className="track-title">{track.title}</div>
      <div className="count">{track.totalReputation.toLocaleString()} rep</div>
    </React.Fragment>
  )
}

export const TrackSelect = ({
  tracks,
  value,
  setValue,
}: {
  tracks: readonly TrackContribution[]
  value: TrackContribution
  setValue: (value: TrackContribution) => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/profile/contributions-summary')
  const handleSet = useCallback(
    (track) => {
      const matchingTrack = tracks.find((t) => t.slug === track.slug)

      if (!matchingTrack) {
        throw new Error('No matching track')
      }

      setValue(matchingTrack)
    },
    [setValue, tracks]
  )

  return (
    <BaseTrackSelect<TrackContribution>
      tracks={tracks}
      value={value}
      setValue={handleSet}
      SelectedComponent={SelectedComponent}
      OptionComponent={OptionComponent}
      size="large"
    />
  )
}

// === end file ===
// === file: ../components/profile/contributions-summary/CategorySummary.tsx ===
import React from 'react'
import { CATEGORY_ICONS, CATEGORY_TITLES } from '../ContributionsSummary'
import { ContributionCategory } from '../../types'
import { GraphicalIcon } from '../../common'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const CategorySummary = ({
  category,
}: {
  category: ContributionCategory
}): JSX.Element => {
  const { t } = useAppTranslation('components/profile/contributions-summary')
  return (
    <div className="category">
      <GraphicalIcon icon={CATEGORY_ICONS[category.id]} hex />
      <div className="info">
        <div className="title">{CATEGORY_TITLES[category.id]}</div>
        {category.metricFull ? (
          <div className="subtitle">{category.metricFull}</div>
        ) : null}
      </div>
      <div className="reputation">
        {category.reputation === 0
          ? t('categorySummary.noRep')
          : t('categorySummary.rep', { reputation: category.reputation.toLocaleString() })}
      </div>
    </div>
  )
}

// === end file ===
```