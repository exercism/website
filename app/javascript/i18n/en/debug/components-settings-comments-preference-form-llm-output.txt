```ts
// i18n
export default {
  "commentsPreferenceForm.commentsOnYourSolutions": "Comments on your solutions",
  "commentsPreferenceForm.settingToControlComments": "Use this setting to control whether or not people can post comments on <span className=\"font-medium\">future solutions that you publish</span>. This can be overriden on a per-solution basis and you can update all existing solutions below.",
  "commentsPreferenceForm.updatePreference": "Update preference",
  "commentsPreferenceForm.yourPreferencesHaveBeenUpdated": "Your preferences have been updated",
  "manageExistingSolutions.manageExistingSolutions": "Manage existing solutions",
  "manageExistingSolutions.canCommentOnPublishedSolutions": "Currently, people can comment on {commentStatusPhrase} of your published solutions. Use the buttons below to <span className=\"font-medium\">enable or disable comments on all your existing solutions.</span>.",
  "manageExistingSolutions.allowCommentsOnExistingSolutions": "Allow comments on all existing solutions",
  "manageExistingSolutions.disableCommentsOnExistingSolutions": "Disable comments on all existing solutions",
  "useCommentsPreferenceForm.none": "none",
  "useCommentsPreferenceForm.all": "all",
  "useCommentsPreferenceForm.xOutOfY": "{{numCommentsEnabled}} / {{numPublished}}"
}

// modified_files
// === file: ../components/settings/comments-preference-form/CommentsPreferenceForm.tsx ===
import React from 'react'
import { Icon, GraphicalIcon } from '@/components/common'
import { FormButton } from '@/components/common/FormButton'
import { FormMessage } from '../FormMessage'
import { useCommentsPreferenceForm } from './useCommentsPreferenceForm'
import { ManageExistingSolution } from './ManageExistingSolutions'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type Links = Record<
  'update' | 'enableCommentsOnAllSolutions' | 'disableCommentsOnAllSolutions',
  string
>

export type CommentsPreferenceFormProps = {
  links: Links
  currentPreference: boolean
  label: string
  numPublishedSolutions: number
  numSolutionsWithCommentsEnabled: number
}

const DEFAULT_ERROR = new Error('Unable to change preferences')

export default function CommentsPreferenceForm({
  currentPreference,
  links,
  label,
  numPublishedSolutions,
  numSolutionsWithCommentsEnabled,
}: CommentsPreferenceFormProps): JSX.Element {
  const { t } = useAppTranslation('components/settings/comments-preference-form')
  const {
    handleSubmit,
    commentStatusPhrase,
    disableAllMutation,
    enableAllMutation,
    mutationsError,
    mutationsStatus,
    successId,
    handleCommentsPreferenceChange,
    allowCommentsByDefault,
    numPublished,
    numCommentsEnabled,
  } = useCommentsPreferenceForm({
    currentPreference,
    links,
    numPublishedSolutions,
    numSolutionsWithCommentsEnabled,
  })

  return (
    <>
      <form data-turbo="false" onSubmit={handleSubmit}>
        <h2 className="!mb-8">{t('commentsPreferenceForm.commentsOnYourSolutions')}</h2>
        <p className="text-p-base mb-12">
          <Trans
            i18nKey="commentsPreferenceForm.settingToControlComments"
            components={[<span className="font-medium" />]}
          />
        </p>
        <label className="c-checkbox-wrapper">
          <input
            type="checkbox"
            checked={allowCommentsByDefault}
            onChange={handleCommentsPreferenceChange}
          />
          <div className="row">
            <div className="c-checkbox">
              <GraphicalIcon icon="checkmark" />
            </div>
            {label}
          </div>
        </label>

        <div className="form-footer !border-0 !pt-0 !mt-0">
          <FormButton status={mutationsStatus} className="btn-primary btn-m">
            {t('commentsPreferenceForm.updatePreference')}
          </FormButton>
          <FormMessage
            key={successId}
            status={mutationsStatus}
            defaultError={DEFAULT_ERROR}
            error={mutationsError}
            SuccessMessage={SuccessMessage}
          />
        </div>
      </form>
      <ManageExistingSolution
        numPublished={numPublished}
        numCommentsEnabled={numCommentsEnabled}
        commentStatusPhrase={commentStatusPhrase}
        enableAllMutation={enableAllMutation}
        disableAllMutation={disableAllMutation}
      />
    </>
  )
}

const SuccessMessage = () => {
  const { t } = useAppTranslation('components/settings/comments-preference-form')
  return (
    <div className="status success">
      <Icon icon="completed-check-circle" alt="Success" />
      {t('commentsPreferenceForm.yourPreferencesHaveBeenUpdated')}
    </div>
  )
}

// === end file ===

// === file: ../components/settings/comments-preference-form/ManageExistingSolutions.tsx ===
import React from 'react'
import { useAppTranslation } from '@/i18n/useAppTranslation'
import { Trans } from 'react-i18next'

type ManageExistingSolutionProps = {
  numPublished: number
  numCommentsEnabled: number
  commentStatusPhrase: string
  enableAllMutation: () => void
  disableAllMutation: () => void
}

export function ManageExistingSolution({
  numPublished,
  commentStatusPhrase,
  disableAllMutation,
  enableAllMutation,
  numCommentsEnabled,
}: ManageExistingSolutionProps): JSX.Element | null {
  const { t } = useAppTranslation('components/settings/comments-preference-form')
  if (numPublished === 0) return null
  return (
    <div className="form-footer">
      <div className="flex flex-col items-start">
        <h3 className="text-h5 mb-4">
          {t('manageExistingSolutions.manageExistingSolutions')}
        </h3>
        <p className="text-p-base mb-12">
          <Trans
            i18nKey="manageExistingSolutions.canCommentOnPublishedSolutions"
            values={{ commentStatusPhrase }}
            components={[<span className="font-medium" />]}
          />
        </p>
        <div className="flex gap-12">
          <button
            onClick={() => enableAllMutation()}
            disabled={numCommentsEnabled === numPublished}
            className="btn-m btn-enhanced"
          >
            {t('manageExistingSolutions.allowCommentsOnExistingSolutions')}
          </button>

          <button
            onClick={() => disableAllMutation()}
            disabled={numCommentsEnabled === 0}
            className="btn-m btn-enhanced"
          >
            {t('manageExistingSolutions.disableCommentsOnExistingSolutions')}
          </button>
        </div>
      </div>
    </div>
  )
}

// === end file ===

// === file: ../components/settings/comments-preference-form/useCommentsPreferenceForm.tsx ===
import { useState, useEffect, useCallback } from 'react'
import { QueryStatus } from '@tanstack/react-query'
import { useSettingsMutation } from '../useSettingsMutation'
import { CommentsPreferenceFormProps } from './CommentsPreferenceForm'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type ExtendedQueryStatus = QueryStatus | 'idle'
type useCommentPreferencesFormReturns = {
  commentStatusPhrase: string
  mutationsStatus: ExtendedQueryStatus
  mutationsError: unknown
  successId: number
  allowCommentsByDefault: boolean
  numPublished: number
  numCommentsEnabled: number
  handleSubmit: (e: React.FormEvent) => void
  handleCommentsPreferenceChange: (e: React.FormEvent) => void
  enableAllMutation: () => void
  disableAllMutation: () => void
}

export function useCommentsPreferenceForm({
  currentPreference,
  numPublishedSolutions,
  numSolutionsWithCommentsEnabled,
  links,
}: Omit<
  CommentsPreferenceFormProps,
  'label'
>): useCommentPreferencesFormReturns {
  const { t } = useAppTranslation('components/settings/comments-preference-form')
  const [allowCommentsByDefault, setAllowCommentsByDefault] =
    useState(currentPreference)
  const [numPublished, setNumPublished] = useState(numPublishedSolutions)
  const [numCommentsEnabled, setNumCommentsEnabled] = useState(
    numSolutionsWithCommentsEnabled
  )
  const [commentStatusPhrase, setCommentStatusPhrase] = useState('')
  const [mutationsStatus, setMutationsStatus] =
    useState<ExtendedQueryStatus>('idle')
  const [mutationsError, setMutationsError] = useState<unknown>(null)

  const [successId, setSuccessId] = useState(0)

  const { mutation } = useSettingsMutation({
    endpoint: links.update,
    method: 'PATCH',
    body: {
      user_preferences: {
        allow_comments_on_published_solutions: allowCommentsByDefault,
      },
    },
    onSuccess: () => {
      setMutationsStatus('success')
      setSuccessId((s) => s + 1)
    },
    onError: (e) => {
      setMutationsError(e)
    },
  })

  function useCommentMutation(endpoint: string) {
    const { mutation } = useSettingsMutation({
      endpoint,
      method: 'PATCH',
      body: {},
      onSuccess: (d: {
        numPublishedSolutions: number
        numSolutionsWithCommentsEnabled: number
      }) => {
        setNumPublished(d.numPublishedSolutions)
        setNumCommentsEnabled(d.numSolutionsWithCommentsEnabled)
        setMutationsStatus('success')
        setSuccessId((s) => s + 1)
      },
      onError: (e) => {
        setMutationsError(e)
      },
    })

    return { mutation }
  }
  const { mutation: enableAllMutation } = useCommentMutation(
    links.enableCommentsOnAllSolutions
  )

  const { mutation: disableAllMutation } = useCommentMutation(
    links.disableCommentsOnAllSolutions
  )

  useEffect(() => {
    setCommentStatusPhrase(
      numCommentsEnabled === 0
        ? t('useCommentsPreferenceForm.none')
        : numCommentsEnabled === numPublished
        ? t('useCommentsPreferenceForm.all')
        : t('useCommentsPreferenceForm.xOutOfY', {
            numCommentsEnabled,
            numPublished,
          })
    )
  }, [numPublished, numCommentsEnabled, t])

  const handleSubmit = useCallback(
    (e) => {
      e.preventDefault()

      mutation()
    },
    [mutation]
  )

  const handleCommentsPreferenceChange = useCallback((e) => {
    setAllowCommentsByDefault(e.target.checked)
  }, [])

  return {
    handleSubmit,
    handleCommentsPreferenceChange,
    enableAllMutation,
    disableAllMutation,
    commentStatusPhrase,
    mutationsError,
    mutationsStatus,
    successId,
    allowCommentsByDefault,
    numPublished,
    numCommentsEnabled,
  }
}

// === end file ===
```