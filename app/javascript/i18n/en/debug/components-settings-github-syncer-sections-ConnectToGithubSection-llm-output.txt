```ts
// i18n
export default {
  "index.backupYourSolutionsToGithub": "Backup your Solutions to GitHub",
  "index.automatedBackupDescription": "Automatically backup your solutions to GitHub with our automated backup tool.",
  "index.safeBackup": "Safe Backup",
  "index.greenSquares": "Green Squares",
  "index.itsFree": "Its Free!",
  "index.createGithubRepository": "Create a new GitHub repository for your solutions (or reuse an existing one if you were backing up manually)",
  "index.clickButtonToConnect": "Click the button below to connect your GitHub account.",
  "index.backupEverythingOption": "Use the \"Backup Everything\" option to backup all your existing solutions.",
  "index.futureSolutionsAutoBackup": "Future solutions will be automatically backed up as you complete exercises.",
  "index.setupBackup": "Setup Backup",
  "connectModal.connectARepository": "Connect a Repository",
  "connectModal.ensureRepositoryReady": "Before continuing, please ensure you have either created a new GitHub repository, or that you have an existing one ready to sync.",
  "connectModal.permissionWarning": "On the next screen you will be asked to give permission to that repository. Please ensure you <strong>select only one repository</strong> (sadly, GitHub doesn't give us a way to enforce that!)",
  "connectModal.connectGithubRepository": "Connect a GitHub repository",
  "connectModal.cancel": "Cancel"
}

// modified_files
// === file: ../components/settings/github-syncer/sections/ConnectToGithubSection/index.tsx ===
// i18n-key-prefix: index
// i18n-namespace: components/settings/github-syncer/sections/ConnectToGithubSection
import React from 'react'
import { GraphicalIcon, Icon } from '@/components/common'
import { ConnectModal } from './ConnectModal'
import { useAppTranslation } from '@/i18n/useAppTranslation'
import { Trans } from 'react-i18next'

export function ConnectToGithubSection() {
  const [isModalOpen, setIsModalOpen] = React.useState(false)
  const { t } = useAppTranslation('components/settings/github-syncer/sections/ConnectToGithubSection')

  return (
    <section>
      <div className="flex flex-col items-center max-w-[500px] mx-auto pb-12">
        <div className="flex gap-20 items-center mb-8">
          <Icon
            icon="exercism-face"
            category="icons"
            alt="Exercism"
            className="mb-16 h-[128px]"
          />
          <Icon
            icon="sync"
            category="graphics"
            alt="Sync with"
            className="mb-16 h-[90px]"
          />
          <Icon
            icon="external-site-github"
            category="icons"
            alt="Github"
            className="mb-16 h-[128px]"
          />
        </div>
        <h2 className="!text-[30px] !mb-4">{t('index.backupYourSolutionsToGithub')}</h2>
        <p className="text-[19px] leading-140 mb-16 text-balance text-center">
          {t('index.automatedBackupDescription')}
        </p>
        <div className="flex gap-10 text-15 font-semibold">
          <div className="flex items-center rounded-100 font-medium bg-bootcamp-light-purple text-purple border-1 border-purple py-6 px-12 gap-6">
            <GraphicalIcon icon="safe-duo" className="h-[20px]" />
            {t('index.safeBackup')}
          </div>
          <div className="flex items-center rounded-100 font-medium bg-bootcamp-light-purple text-purple border-1 border-purple py-6 px-12 gap-6">
            <GraphicalIcon icon="gh-duo" className="h-[20px]" />
            {t('index.greenSquares')}
          </div>
          <div className="flex items-center rounded-100 font-medium bg-bootcamp-light-purple text-purple border-1 border-purple py-6 px-12 gap-6">
            <GraphicalIcon icon="free-duo" className="h-[20px]" />
            {t('index.itsFree')}
          </div>
        </div>
        <GraphicalIcon icon="arrow-down-duo" className="h-[32px] my-32" />

        <ol className="text-[18px] leading-140 mb-16 ml-[45px]">
          <li className="mb-16 relative">
            <GraphicalIcon
              icon="1-duo.svg"
              className="h-[32px] !absolute left-[-45px]"
            />
            {t('index.createGithubRepository')}
          </li>

          <li className="mb-16 relative">
            <GraphicalIcon
              icon="2-duo.svg"
              className="h-[32px] !absolute left-[-45px]"
            />
            {t('index.clickButtonToConnect')}
          </li>

          <li className="mb-16 relative">
            <GraphicalIcon
              icon="3-duo.svg"
              className="h-[32px] !absolute left-[-45px]"
            />
            {t('index.backupEverythingOption')}
          </li>

          <li className="mb-16 relative">
            <GraphicalIcon
              icon="4-duo.svg"
              className="h-[32px] !absolute left-[-45px]"
            />
            {t('index.futureSolutionsAutoBackup')}
          </li>
        </ol>
        <button
          className="btn btn-l btn-primary w-fit"
          onClick={() => setIsModalOpen(true)}
        >
          {t('index.setupBackup')}
        </button>
      </div>
      <ConnectModal onClose={() => setIsModalOpen(false)} open={isModalOpen} />
    </section>
  )
}

// === end file ===

// === file: ../components/settings/github-syncer/sections/ConnectToGithubSection/ConnectModal.tsx ===
// i18n-key-prefix: connectModal
// i18n-namespace: components/settings/github-syncer/sections/ConnectToGithubSection
import React, { useContext } from 'react'
import Modal, { ModalProps } from '@/components/modals/Modal'
import { GitHubSyncerContext } from '../../GitHubSyncerForm'
import { GraphicalIcon, Icon } from '@/components/common'
import { useAppTranslation } from '@/i18n/useAppTranslation'
import { Trans } from 'react-i18next'

type ConfirmationModalProps = Omit<ModalProps, 'className'> & {
  confirmButtonClass?: string
}

export function ConnectModal({
  onClose,
  ...props
}: ConfirmationModalProps): JSX.Element {
  const { links } = useContext(GitHubSyncerContext)
  const { t } = useAppTranslation('components/settings/github-syncer/sections/ConnectToGithubSection')

  return (
    <Modal className="m-generic-confirmation" onClose={onClose} {...props}>
      <div className="flex flex-col items-center max-w-[540px] mx-auto pb-12">
        <div className="flex gap-20 items-center mb-8">
          <Icon
            icon="exercism-face"
            category="icons"
            alt="Exercism"
            className="mb-16 h-[64px]"
          />
          <Icon
            icon="sync"
            category="graphics"
            alt="Sync with"
            className="mb-16 h-[64px]"
          />
          <Icon
            icon="external-site-github"
            category="icons"
            alt="Github"
            className="mb-16 h-[64px]"
          />
        </div>
        <h3 className="!text-[24px] !mb-4">{t('connectModal.connectARepository')}</h3>
        <p className="!text-18 leading-140 mb-16 text-balance text-center">
          {t('connectModal.ensureRepositoryReady')}
        </p>
        <p className="!text-18 leading-140 mb-16 text-balance text-center">
          <Trans
            i18nKey="connectModal.permissionWarning"
            components={{ strong: <strong /> }}
          />
        </p>
      </div>

      <div className="flex gap-8 items-center">
        <a
          className="btn btn-l btn-primary w-fit"
          href={links?.connectToGithub}
        >
          {t('connectModal.connectGithubRepository')}
        </a>
        <button className="btn btn-default btn-l" onClick={onClose}>
          {t('connectModal.cancel')}
        </button>
      </div>
    </Modal>
  )
}

// === end file ===
```