```ts
// i18n
export default {
  "index.syncerConnected": "Syncer connected",
  "dangerZoneSection.pauseSyncer": "Pause Syncer",
  "dangerZoneSection.wantToPause": "Want to pause your syncer for a while?",
  "dangerZoneSection.useButtonBelow": "Use the button below. You can restart it at any time.",
  "dangerZoneSection.disconnectSyncer": "Disconnect Syncer",
  "dangerZoneSection.wantToDisconnect": "Want to disconnect the syncer from your GitHub repository? Use the button below.",
  "dangerZoneSection.noteWillDeleteSettings": "<strong>Note: </strong> This will also delete all settings on this page, so please manually save any settings you might wish to reuse in the future (e.g. your path template).",
  "dangerZoneSection.disconnectGithub": "Disconnect GitHub",
  "dangerZoneSection.areYouSureDisconnect": "Are you sure you want to disconnect your GitHub repository?",
  "dangerZoneSection.thisActionCannotUndone": "This action cannot be undone.",
  "dangerZoneSection.disconnectSyncerConfirm": "Disconnect Syncer",
  "dangerZoneSection.cancel": "Cancel",
  "fileStructureSection.fileStructure": "File structure",
  "fileStructureSection.configureFolderStructure": "Use this option to configure the folder structure for your repository.",
  "fileStructureSection.placeholderValues": "You can use the following placeholder values, which will be interpolated for each commit:",
  "fileStructureSection.trackSlug": "<code>$track_slug</code>: The slug of the track (e.g. \"csharp\").",
  "fileStructureSection.trackTitle": "<code>$track_title</code>: The name of the track (e.g. \"C#\")",
  "fileStructureSection.exerciseSlug": "<code>$exercise_slug</code>: The slug of the exercise (e.g.  \"hello-world\")",
  "fileStructureSection.exerciseTitle": "<code>$exercise_title</code>: The name of the exercise (e.g. \"Hello World\")",
  "fileStructureSection.iterationIdx": "<code>$iteration_idx</code>: The iteration index of the exercise (e.g. \"1\")",
  "fileStructureSection.note1YourPath": "<strong className=\"font-medium\">Note 1:</strong> Your path must contain a track placeholder (<code>$track_slug</code> or <code>$track_title</code>) and an exercise placeholder ( <code>$exercise_slug</code> or <code>$exercise_title</code>.",
  "fileStructureSection.note2Iteration": "<strong className=\"font-medium\">Note 2:</strong> The <code>$iteration_idx</code> placeholder is optional, but if you omit it, each iteration will override the previous one. This allows you to use Git for version controlling your solutions. Including the iteration index will result in a different folder for every iteration.",
  "fileStructureSection.pathTemplateMustInclude": "Your path template must include either <code>$track_slug</code> or <code>$track_title</code>, and either <code>$exercise_slug</code> or <code>$exercise_title</code>.",
  "fileStructureSection.saveChanges": "Save changes",
  "fileStructureSection.revertToDefault": "Revert to default",
  "fileStructureSection.areYouSureWantRevert": "Are you sure you want to revert your path template to default?",
  "fileStructureSection.revert": "Revert",
  "statusSection.status": "Status: <span style={{ color: textColor }}>{status}</span>",
  "statusSection.githubSyncerLinked": "Your GitHub syncer is linked to <code>{syncer?.repoFullName}</code>.",
  "statusSection.enableSyncer": "Enable Syncer",
  "statusSection.areYouSureResumeSyncing": "Are you sure you want to resume syncing solutions with GitHub?",
  "statusSection.resume": "Resume",
  "commitMessageTemplateSection.heading": "Commit message template",
  "commitMessageTemplateSection.intro": "Use this option to configure the commit messages our bot will use when pushing your code to GitHub.",
  "commitMessageTemplateSection.placeholder_intro": "You can use the following placeholder values, which will be interpolated for each commit:",
  "commitMessageTemplateSection.placeholders.track_slug": "The slug of the track (e.g. \"csharp\").",
  "commitMessageTemplateSection.placeholders.track_title": "The name of the track (e.g. \"C#\")",
  "commitMessageTemplateSection.placeholders.exercise_slug": "The slug of the exercise (e.g. \"hello-world\")",
  "commitMessageTemplateSection.placeholders.exercise_title": "The name of the exercise (e.g. \"Hello World\")",
  "commitMessageTemplateSection.placeholders.iteration_idx": "The iteration index of the exercise (e.g. \"1\")",
  "commitMessageTemplateSection.placeholders.sync_object": "Describes what is being synchronized (e.g. 'exercise', 'test')",
  "commitMessageTemplateSection.note.note": "Note",
  "commitMessageTemplateSection.note.text": "By default, all the Exercism exercises will be added to the repository with the same commit message. If you change this, the changes only apply for future commits.",
  "commitMessageTemplateSection.save_button": "Save changes",
  "commitMessageTemplateSection.revert_button": "Revert to default",
  "commitMessageTemplateSection.confirm_modal.title": "Are you sure you want to revert your commit message template to default?",
  "commitMessageTemplateSection.confirm_modal.confirm": "Revert",
  "commitMessageTemplateSection.confirm_modal.cancel": "Cancel",
  "processingMethodSection.processingMethod": "Processing method",
  "processingMethodSection.commitDirectly": "Commit directly",
  "processingMethodSection.createPullRequest": "Create pull request",
  "processingMethodSection.whatIsTheName": "What is the name of your main branch?",
  "justConnectedModal.repositoryConnected": "Repository connected successfully!",
  "justConnectedModal.accountConnected": "We've connected your Exercism account to your chosen repository.",
  "justConnectedModal.happyWithDefaults": "If you're happy with the defaults, you can back everything up now. Or you can tweak your settings, then use the button at the bottom of the settings page to back up later. Do you want to backup everything now?",
  "justConnectedModal.backUpEverythingNow": "Back up everything now",
  "justConnectedModal.backUpLater": "Back up later",
  "manualSyncSection.backupTrack": "Backup a track",
  "manualSyncSection.backupTrackInfo": "If you want to backup a track to GitHub, you can use this function.",
  "manualSyncSection.pleaseUseSparing": "<strong className=\"font-medium\">Note:</strong> Please use this sparingly, for example when you want to backup a track for the first time. This is not designed to be part of your normal workflow and will likely hit rate-limits if over-used.",
  "manualSyncSection.selectTrackToBackup": "Select track to backup",
  "manualSyncSection.backupTrackButton": "Backup Track",
  "manualSyncSection.backupEverything": "Backup everything",
  "manualSyncSection.backupEverythingInfo": "If you want to backup all your exercises across all tracks to GitHub, you can use this function.",
  "manualSyncSection.pleaseUseSparingBootstrap": "<strong className=\"font-medium\">Note:</strong> Please use this sparingly, for example when you want to bootstrap a new repo. This is not designed to be part of your normal workflow.",
  "manualSyncSection.backupEverythingButton": "Backup Everything",
  "iterationFilesSection.iterationFiles": "Iteration files",
  "iterationFilesSection.whenSyncing": "When syncing, do you want all the files in the exercise (e.g. your solution, the tests, the README, the hints, etc) to be synced to GitHub, or only your solution file(s)?",
  "iterationFilesSection.theFullExercise": "The full exercise",
  "iterationFilesSection.onlyMySolutionFiles": "Only my solution file(s)",
  "syncBehaviourSection.syncBehaviour": "Sync behaviour",
  "syncBehaviourSection.chooseWhetherSyncing": "Choose whether syncing should happen automatically when you create a new iteration, or manually when you trigger it yourself. <strong>Automatic</strong> keeps your GitHub repo up to date, while <strong>manual</strong> gives you full control.",
  "syncBehaviourSection.automatic": "Automatic",
  "syncBehaviourSection.manual": "Manual"
}

// modified_files
// === file: ../components/settings/github-syncer/sections/ConnectedSection/index.tsx ===
import React from 'react'
import { CommitMessageTemplateSection } from './CommitMessageTemplateSection'
import { DangerZoneSection } from './DangerZoneSection'
import { FileStructureSection } from './FileStructureSection'
import { ProcessingMethodSection } from './ProcessingMethodSection'
import { IterationFilesSection } from './IterationFilesSection'
import { StatusSection } from './StatusSection'
import { ManualSyncSection } from './ManualSyncSection'
import { SyncBehaviourSection } from './SyncBehaviourSection'
import { JustConnectedModal } from './JustConnectedModal'

export function ConnectedSection() {
  return (
    <>
      <StatusSection />
      <ProcessingMethodSection />
      <SyncBehaviourSection />
      <IterationFilesSection />
      <FileStructureSection />
      <CommitMessageTemplateSection />
      <ManualSyncSection />
      <DangerZoneSection />
      <JustConnectedModal />
    </>
  )
}

// === end file ===
// === file: ../components/settings/github-syncer/sections/ConnectedSection/DangerZoneSection.tsx ===
// i18n-key-prefix: dangerZoneSection
// i18n-namespace: components/settings/github-syncer/sections/ConnectedSection
import React, { useState, useCallback } from 'react'
import toast from 'react-hot-toast'
import { ConfirmationModal } from '../../common/ConfirmationModal'
import { fetchWithParams, handleJsonErrorResponse } from '../../fetchWithParams'
import { GitHubSyncerContext } from '../../GitHubSyncerForm'
import { GraphicalIcon } from '@/components/common'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function DangerZoneSection() {
  const { t } = useAppTranslation('components/settings/github-syncer/sections/ConnectedSection')
  const { links, isSyncingEnabled, setIsSyncingEnabled, setIsUserConnected } =
    React.useContext(GitHubSyncerContext)

  const [isDeleting, setIsDeleting] = useState(false)

  const [isDeleteConfirmationModalOpen, setDeleteConfirmationModalOpen] =
    useState(false)
  const handleDeleteConfirmationModalClose = useCallback(() => {
    setDeleteConfirmationModalOpen(false)
  }, [])

  const [
    isActivityChangeConfirmationModalOpen,
    setActivityChangeConfirmationModalOpen,
  ] = useState(false)
  const handleActivityChangeConfirmationModalClose = useCallback(() => {
    setActivityChangeConfirmationModalOpen(false)
  }, [])

  const handlePauseSyncer = useCallback(() => {
    fetchWithParams({
      url: links.settings,
      params: { enabled: false },
    })
      .then((response) => {
        if (response.ok) {
          toast.success('Paused code sync with GitHub.')
          setActivityChangeConfirmationModalOpen(false)
          setIsSyncingEnabled(false)
        } else {
          toast.error(`Failed to change status.`)
          setActivityChangeConfirmationModalOpen(false)
        }
      })
      .catch((error) => {
        console.error('Error:', error)
        setActivityChangeConfirmationModalOpen(false)
      })
  }, [links.settings])

  const handleDelete = useCallback(() => {
    setIsDeleting(true)
    fetchWithParams({ url: links.settings, method: 'DELETE' })
      .then(async (response) => {
        if (response.ok) {
          toast.success('GitHub sync deleted successfully')
          setIsUserConnected(false)
          setDeleteConfirmationModalOpen(false)
        } else {
          handleJsonErrorResponse(response, 'Failed to delete GitHub sync.')
        }
      })
      .catch((error) => {
        toast.error(
          `Oops! We received an unexpected error while deleting the GitHub sync.`
        )
        console.error('Error:', error)
      })
      .finally(() => setIsDeleting(false))
  }, [links.settings])

  return (
    <section className="danger-zone">
      <div className="flex gap-48 items-start">
        <div>
          {isSyncingEnabled && (
            <>
              <h2>{t('dangerZoneSection.pauseSyncer')}</h2>
              <p className="text-16 leading-140 mb-4">
                {t('dangerZoneSection.wantToPause')}
              </p>
              <p className="text-16 leading-140 mb-12">
                {t('dangerZoneSection.useButtonBelow')}
              </p>

              <button
                onClick={() => setActivityChangeConfirmationModalOpen(true)}
                className="btn-m mb-16 btn-warning"
              >
                {t('dangerZoneSection.pauseSyncer')}
              </button>
              <ConfirmationModal
                title="Are you sure you want to pause syncing solutions with GitHub?"
                confirmLabel="Pause"
                declineLabel="Cancel"
                onConfirm={handlePauseSyncer}
                open={isActivityChangeConfirmationModalOpen}
                onClose={handleActivityChangeConfirmationModalClose}
              />
              <div className="border-t-1 border-borderColor6 my-32" />
            </>
          )}

          <h2>{t('dangerZoneSection.disconnectSyncer')}</h2>
          <p className="text-16 leading-140 mb-8">
            {t('dangerZoneSection.wantToDisconnect')}
          </p>
          <p className="text-16 leading-140 mb-8">
            <strong className="font-medium" dangerouslySetInnerHTML={{ __html: t('dangerZoneSection.noteWillDeleteSettings') }} />
          </p>
          <button
            onClick={() => setDeleteConfirmationModalOpen(true)}
            className="btn-m btn-alert"
          >
            {t('dangerZoneSection.disconnectGithub')}
          </button>
          {/* DELETE CONFIRMATION MODAL */}
          <ConfirmationModal
            title={t('dangerZoneSection.areYouSureDisconnect')}
            description={t('dangerZoneSection.thisActionCannotUndone')}
            confirmLabel={t('dangerZoneSection.disconnectSyncerConfirm')}
            confirmButtonClass="btn-alert"
            isConfirmButtonDisabled={isDeleting}
            declineLabel={t('dangerZoneSection.cancel')}
            onConfirm={handleDelete}
            open={isDeleteConfirmationModalOpen}
            onClose={handleDeleteConfirmationModalClose}
          />
        </div>
        <GraphicalIcon
          icon="github-syncer-danger"
          category="graphics"
          className="w-[200px] opacity-[0.5]"
        />
      </div>
    </section>
  )
}

// === end file ===
// === file: ../components/settings/github-syncer/sections/ConnectedSection/FileStructureSection.tsx ===
// i18n-key-prefix: fileStructureSection
// i18n-namespace: components/settings/github-syncer/sections/ConnectedSection
import React, { useCallback, useState } from 'react'
import { flushSync } from 'react-dom'
import toast from 'react-hot-toast'
import { ConfirmationModal } from '../../common/ConfirmationModal'
import { fetchWithParams, handleJsonErrorResponse } from '../../fetchWithParams'
import { GitHubSyncerContext } from '../../GitHubSyncerForm'
import { SectionHeader } from '../../common/SectionHeader'
import { assembleClassNames } from '@/utils/assemble-classnames'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function FileStructureSection() {
  const { t } = useAppTranslation('components/settings/github-syncer/sections/ConnectedSection')
  const { links, isUserInsider, syncer, defaultPathTemplate } =
    React.useContext(GitHubSyncerContext)

  const [pathTemplate, setPathTemplate] = useState<string>(
    syncer?.pathTemplate || defaultPathTemplate
  )
  const [isRevertPathTemplateModalOpen, setIsRevertPathTemplateModalOpen] =
    useState(false)

  const [isTemplateInvalid, setIsTemplateInvalid] = useState<boolean>(false)

  const handleSaveChanges = useCallback(
    (template: string) => {
      if (!isUserInsider) return

      if (!isPathTemplateValid(template)) {
        setIsTemplateInvalid(true)
        return
      } else {
        setIsTemplateInvalid(false)
      }

      fetchWithParams({
        url: links.settings,
        params: {
          path_template: template,
        },
      })
        .then(async (response) => {
          if (response.ok) {
            toast.success('Saved changes successfully!')
          } else {
            await handleJsonErrorResponse(response, 'Failed to save changes.')
          }
        })
        .catch((error) => {
          console.error('Error:', error)
          toast.error(
            'Something went wrong while saving changes. Please try again.'
          )
        })
    },
    [isUserInsider, links.settings]
  )

  const handleRevertPathTemplate = useCallback(() => {
    flushSync(() => {
      setPathTemplate(defaultPathTemplate)
    })
    handleSaveChanges(defaultPathTemplate)
    setIsRevertPathTemplateModalOpen(false)
  }, [defaultPathTemplate, handleSaveChanges])

  return (
    <section className={isUserInsider ? '' : 'disabled'}>
      <SectionHeader title={t('fileStructureSection.fileStructure')} />
      <p className="text-18 leading-150 mb-16">
        {t('fileStructureSection.configureFolderStructure')}
      </p>
      <p className="text-16 leading-150 mb-12">
        {t('fileStructureSection.placeholderValues')}
      </p>

      <ul className="text-16 leading-150 mb-16">
        <li>
          <code dangerouslySetInnerHTML={{ __html: t('fileStructureSection.trackSlug') }}/>
        </li>
        <li>
          <code dangerouslySetInnerHTML={{ __html: t('fileStructureSection.trackTitle') }}/>
        </li>
        <li>
          <code dangerouslySetInnerHTML={{ __html: t('fileStructureSection.exerciseSlug') }}/>
        </li>
        <li>
          <code dangerouslySetInnerHTML={{ __html: t('fileStructureSection.exerciseTitle') }}/>
        </li>
        <li>
          <code dangerouslySetInnerHTML={{ __html: t('fileStructureSection.iterationIdx') }}/>
        </li>
      </ul>
      <input
        type="text"
        value={pathTemplate}
        style={{ color: !isUserInsider ? '#aaa' : '' }}
        className={assembleClassNames(
          'font-mono font-semibold text-16 leading-140 border border-1 w-full mb-16',
          isTemplateInvalid && '!border-orange'
        )}
        onChange={(e) => {
          setPathTemplate(e.target.value)
          setIsTemplateInvalid(false)
        }}
      />
      <p className="text-16 leading-150 mb-12">
        <strong className="font-medium" dangerouslySetInnerHTML={{ __html: t('fileStructureSection.note1YourPath') }} />
      </p>
      <p className="text-16 leading-150 mb-16">
        <strong className="font-medium" dangerouslySetInnerHTML={{ __html: t('fileStructureSection.note2Iteration') }} />
      </p>

      {isTemplateInvalid && (
        <div className="text-orange font-semibold mb-16">
          {t('fileStructureSection.pathTemplateMustInclude')}
        </div>
      )}

      <div className="flex gap-8">
        <button
          disabled={!isUserInsider}
          className="btn btn-primary"
          onClick={() => handleSaveChanges(pathTemplate)}
        >
          {t('fileStructureSection.saveChanges')}
        </button>

        <button
          disabled={!isUserInsider || pathTemplate === defaultPathTemplate}
          className="btn btn-secondary"
          onClick={() => setIsRevertPathTemplateModalOpen(true)}
        >
          {t('fileStructureSection.revertToDefault')}
        </button>
      </div>
      <ConfirmationModal
        title={t('fileStructureSection.areYouSureWantRevert')}
        confirmLabel={t('fileStructureSection.revert')}
        declineLabel={t('fileStructureSection.cancel')}
        onConfirm={handleRevertPathTemplate}
        open={isRevertPathTemplateModalOpen}
        onClose={() => setIsRevertPathTemplateModalOpen(false)}
      />
    </section>
  )
}

function isPathTemplateValid(pathTemplate: string): boolean {
  const hasTrackPlaceholder =
    pathTemplate.includes('$track_slug') ||
    pathTemplate.includes('$track_title')

  const hasExercisePlaceholder =
    pathTemplate.includes('$exercise_slug') ||
    pathTemplate.includes('$exercise_title')

  return hasTrackPlaceholder && hasExercisePlaceholder
}

// === end file ===
// === file: ../components/settings/github-syncer/sections/ConnectedSection/StatusSection.tsx ===
// i18n-key-prefix: statusSection
// i18n-namespace: components/settings/github-syncer/sections/ConnectedSection
import React, { useCallback, useState } from 'react'
import toast from 'react-hot-toast'
import { GitHubSyncerContext } from '../../GitHubSyncerForm'
import { fetchWithParams } from '../../fetchWithParams'
import { ConfirmationModal } from '../../common/ConfirmationModal'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function StatusSection() {
  const { t } = useAppTranslation('components/settings/github-syncer/sections/ConnectedSection')
  const { links, isSyncingEnabled, setIsSyncingEnabled, syncer } =
    React.useContext(GitHubSyncerContext)

  const borderColor = isSyncingEnabled ? 'var(--successColor)' : '#F69605'
  const textColor = isSyncingEnabled ? '#2E8C70' : 'rgb(229, 138, 0)'
  const bgColor = isSyncingEnabled
    ? 'rgba(61, 181, 145, 0.1)'
    : 'rgba(246, 150, 5, 0.1)'
  const status = isSyncingEnabled ? 'Active' : 'Paused'

  const [
    isActivityChangeConfirmationModalOpen,
    setActivityChangeConfirmationModalOpen,
  ] = useState(false)
  const handleActivityChangeConfirmationModalClose = useCallback(() => {
    setActivityChangeConfirmationModalOpen(false)
  }, [])

  const handleEnableSyncing = useCallback(() => {
    fetchWithParams({
      url: links.settings,
      params: { enabled: true },
    })
      .then((response) => {
        if (response.ok) {
          toast.success('Resumed code sync with GitHub.')
          setActivityChangeConfirmationModalOpen(false)
          setIsSyncingEnabled(true)
        } else {
          toast.error(`Failed to change status.`)
          setActivityChangeConfirmationModalOpen(false)
        }
      })
      .catch((error) => {
        console.error('Error:', error)
        setActivityChangeConfirmationModalOpen(false)
      })
  }, [links.settings])

  return (
    <section
      style={{ borderColor: borderColor, backgroundColor: bgColor }}
      className="border-2"
    >
      <h2 className="!mb-6" dangerouslySetInnerHTML={{ __html: t('statusSection.status', { status }) }} />
      <p className="text-18 leading-140">
        {t('statusSection.githubSyncerLinked', { syncerRepoFullName: syncer?.repoFullName })}
      </p>

      {!isSyncingEnabled && (
        <>
          <button
            onClick={() => setActivityChangeConfirmationModalOpen(true)}
            className="btn-m mt-16 btn-primary"
          >
            {t('statusSection.enableSyncer')}
          </button>
          <ConfirmationModal
            title="Are you sure you want to resume syncing solutions with GitHub?"
            confirmLabel="Resume"
            declineLabel="Cancel"
            onConfirm={handleEnableSyncing}
            open={isActivityChangeConfirmationModalOpen}
            onClose={handleActivityChangeConfirmationModalClose}
          />
        </>
      )}
    </section>
  )
}

// === end file ===
// === file: ../components/settings/github-syncer/sections/ConnectedSection/CommitMessageTemplateSection.tsx ===
// i18n-key-prefix: commitMessageTemplateSection
// i18n-namespace: components/settings/github-syncer/sections/ConnectedSection
import React, { useCallback, useState } from 'react'
import toast from 'react-hot-toast'
import { ConfirmationModal } from '../../common/ConfirmationModal'
import { fetchWithParams, handleJsonErrorResponse } from '../../fetchWithParams'
import { GitHubSyncerContext } from '../../GitHubSyncerForm'
import { SectionHeader } from '../../common/SectionHeader'
import { flushSync } from 'react-dom'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function CommitMessageTemplateSection() {
  const { links, isUserInsider, syncer, defaultCommitMessageTemplate } =
    React.useContext(GitHubSyncerContext)

  const [commitMessageTemplate, setCommitMessageTemplate] = useState<string>(
    syncer?.commitMessageTemplate || defaultCommitMessageTemplate
  )

  const { t } = useAppTranslation('components/settings/github-syncer/sections/ConnectedSection')

  const [
    isRevertCommitMessageTemplateModalOpen,
    setIsRevertCommitMessageTemplateModalOpen,
  ] = useState(false)

  const handleSaveChanges = useCallback(
    (template: string) => {
      if (!isUserInsider) return
      fetchWithParams({
        url: links.settings,
        params: {
          commit_message_template: template,
        },
      })
        .then(async (response) => {
          if (response.ok) {
            toast.success('Saved changes successfully!')
          } else {
            await handleJsonErrorResponse(response, 'Failed to save changes.')
          }
        })
        .catch((error) => {
          console.error('Error:', error)
          toast.error(
            'Something went wrong while saving changes. Please try again.'
          )
        })
    },
    [links.settings, isUserInsider]
  )

  const handleRevertCommitMessageTemplate = useCallback(() => {
    flushSync(() => {
      setCommitMessageTemplate(defaultCommitMessageTemplate)
    })
    handleSaveChanges(defaultCommitMessageTemplate)
    setIsRevertCommitMessageTemplateModalOpen(false)
  }, [defaultCommitMessageTemplate, handleSaveChanges])

  return (
    <section className={isUserInsider ? '' : 'disabled'}>
      <SectionHeader title={t('commitMessageTemplateSection.heading')} />
      <p className="text-18 leading-150 mb-16">
        {t('commitMessageTemplateSection.intro')}
      </p>
      <p className="text-16 leading-150 mb-12">
        {t('commitMessageTemplateSection.placeholder_intro')}
      </p>

      <ul className="text-16 leading-150 mb-16">
        <li>
          <code>$track_slug</code>:{' '}
          {t('commitMessageTemplateSection.placeholders.track_slug')}
        </li>
        <li>
          <code>$track_title</code>:{' '}
          {t('commitMessageTemplateSection.placeholders.track_title')}
        </li>
        <li>
          <code>$exercise_slug</code>:{' '}
          {t('commitMessageTemplateSection.placeholders.exercise_slug')}
        </li>
        <li>
          <code>$exercise_title</code>:{' '}
          {t('commitMessageTemplateSection.placeholders.exercise_title')}
        </li>
        <li>
          <code>$iteration_idx</code>:{' '}
          {t('commitMessageTemplateSection.placeholders.iteration_idx')}
        </li>
        <li>
          <code>$sync_object</code>:{' '}
          {t('commitMessageTemplateSection.placeholders.sync_object')}
        </li>
      </ul>

      <input
        type="text"
        value={commitMessageTemplate}
        style={{ color: !isUserInsider ? '#aaa' : '' }}
        className="font-mono font-semibold text-16 leading-140 border border-1 w-full mb-16"
        onChange={(e) => setCommitMessageTemplate(e.target.value)}
      />
      <p className="text-16 leading-150 mb-16">
        <strong className="font-medium">
          {t('commitMessageTemplateSection.note.note')}:
        </strong>{' '}
        {t('commitMessageTemplateSection.note.text')}
      </p>

      <div className="flex gap-8">
        <button
          disabled={!isUserInsider}
          className="btn btn-primary"
          onClick={() => handleSaveChanges(commitMessageTemplate)}
        >
          {t('commitMessageTemplateSection.save_button')}
        </button>

        <button
          disabled={
            !isUserInsider ||
            commitMessageTemplate === defaultCommitMessageTemplate
          }
          className="btn btn-secondary"
          onClick={() => setIsRevertCommitMessageTemplateModalOpen(true)}
        >
          {t('commitMessageTemplateSection.revert_button')}
        </button>
      </div>

      <ConfirmationModal
        title={t('commitMessageTemplateSection.confirm_modal.title')}
        confirmLabel={t('commitMessageTemplateSection.confirm_modal.confirm')}
        declineLabel={t('commitMessageTemplateSection.confirm_modal.cancel')}
        onConfirm={handleRevertCommitMessageTemplate}
        open={isRevertCommitMessageTemplateModalOpen}
        onClose={() => setIsRevertCommitMessageTemplateModalOpen(false)}
      />
    </section>
  )
}

// === end file ===
// === file: ../components/settings/github-syncer/sections/ConnectedSection/ProcessingMethodSection.tsx ===
// i18n-key-prefix: processingMethodSection
// i18n-namespace: components/settings/github-syncer/sections/ConnectedSection
import React, { useState, useCallback } from 'react'
import toast from 'react-hot-toast'
import { GraphicalIcon } from '@/components/common'
import { assembleClassNames } from '@/utils/assemble-classnames'
import { fetchWithParams, handleJsonErrorResponse } from '../../fetchWithParams'
import { GitHubSyncerContext } from '../../GitHubSyncerForm'
import { SectionHeader } from '../../common/SectionHeader'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function ProcessingMethodSection() {
  const { t } = useAppTranslation('components/settings/github-syncer/sections/ConnectedSection')
  const { links, isUserInsider, syncer } = React.useContext(GitHubSyncerContext)
  const [selectedProcessingMethod, setSelectedProcessingMethod] = useState<
    'commit' | 'pull_request'
  >(syncer?.processingMethod || 'commit')

  const [mainBranchName, setMainBranchName] = useState<string>(
    syncer?.mainBranchName || 'main'
  )

  const handleSaveChanges = useCallback(() => {
    if (!isUserInsider) return
    fetchWithParams({
      url: links.settings,
      params: {
        processing_method: selectedProcessingMethod,
        main_branch_name: mainBranchName,
      },
    })
      .then(async (response) => {
        if (response.ok) {
          toast.success('Saved changes successfully!')
        } else {
          await handleJsonErrorResponse(response, 'Failed to save changes.')
        }
      })
      .catch((error) => {
        console.error('Error:', error)
        toast.error(
          'Something went wrong while saving changes. Please try again.'
        )
      })
  }, [selectedProcessingMethod, links.settings, mainBranchName])

  return (
    <section className={isUserInsider ? '' : 'disabled'}>
      <div className="flex gap-48 items-start">
        <div>
          <SectionHeader title={t('processingMethodSection.processingMethod')} />
          <p className="text-16 leading-150 mb-16">
            Our bot can commit directly to your repository for a fully automated
            setup, or create a pull request which you can approve each time.
            Which method would you prefer?
          </p>
          <div className="flex gap-8 mb-16">
            <button
              onClick={() => setSelectedProcessingMethod('commit')}
              className={assembleClassNames(
                'toggle-button',
                selectedProcessingMethod === 'commit' ? 'selected' : ''
              )}
            >
              {t('processingMethodSection.commitDirectly')}
            </button>

            <button
              onClick={() => setSelectedProcessingMethod('pull_request')}
              className={assembleClassNames(
                'toggle-button',
                selectedProcessingMethod === 'pull_request' ? 'selected' : ''
              )}
            >
              {t('processingMethodSection.createPullRequest')}
            </button>
          </div>

          {selectedProcessingMethod === 'commit' && (
            <label className="flex flex-col mb-16">
              <span className="text-16 leading-150 mb-8">
                {t('processingMethodSection.whatIsTheName')}
              </span>
              <input
                type="text"
                className="font-mono font-semibold text-16 leading-140 border border-1"
                style={{ color: !isUserInsider ? '#aaa' : '' }}
                value={mainBranchName}
                onChange={(e) => setMainBranchName(e.target.value)}
              />
            </label>
          )}

          <button
            disabled={!isUserInsider}
            className="btn btn-primary"
            onClick={handleSaveChanges}
          >
            Save changes
          </button>
        </div>
        <GraphicalIcon
          icon="github-syncer-pr-vs-commit"
          category="graphics"
          className="w-[200px] opacity-[0.5]"
        />
      </div>
    </section>
  )
}

// === end file ===
// === file: ../components/