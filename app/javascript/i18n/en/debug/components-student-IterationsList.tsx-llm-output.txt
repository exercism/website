```ts
// i18n
export default {
  "iterationsList.emptyIterations": "No iterations yet. Start solving!",
  "iterationsList.getMentoring": "Get mentoring",
  "iterationsList.solvingExercisesLocally": "Learn how to solve exercises locally",
  "iterationsList.automatedFeedbackInfo": "More info about automated feedback",
  "iterationsList.startExercise": "Start solving",
  "iterationsList.toolingHelp": "Tooling help",
  "iterationsList.githubSyncerSettings": "GitHub Syncer settings",
  "iterationsList.syncIteration": "Sync iteration"
}

// modified_files
// === file: ../components/student/IterationsList.tsx ===
import React, { useEffect, useState } from 'react'
import { useQueryClient } from '@tanstack/react-query'
import { Loading } from '../common'
import { Iteration } from '../types'
import { IterationReport } from './iterations-list/IterationReport'
import { EmptyIterations } from './iterations-list/EmptyIterations'
import { usePaginatedRequestQuery } from '../../hooks/request-query'
import { SolutionChannel } from '../../channels/solutionChannel'
import { GithubSyncerSettings } from '../settings/github-syncer/GitHubSyncerForm'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export type Exercise = {
  title: string
  slug: string
  downloadCmd: string
  hasTestRunner: boolean
}

export type Track = {
  title: string
  slug: string
  iconUrl: string
  highlightjsLanguage: string
  indentSize: number
}

export type Links = {
  getMentoring: string
  automatedFeedbackInfo: string
  startExercise: string
  solvingExercisesLocally: string
  toolingHelp: string
  githubSyncerSettings: string
  syncIteration: string
}

export type IterationsListRequest = {
  endpoint: string
  options: {
    initialData: {
      iterations: readonly Iteration[]
    }
  }
}

export const getCacheKey = (
  trackSlug: string,
  exerciseSlug: string
): string => {
  return `iterations-${trackSlug}-${exerciseSlug}`
}

export type IterationsListProps = {
  solutionUuid: string
  request: IterationsListRequest
  exercise: Exercise
  track: Track
  links: Links
  syncer: GithubSyncerSettings | null
  isGithubSyncerVisible: boolean
}

export default function IterationsList({
  solutionUuid,
  request,
  exercise,
  track,
  links,
  syncer,
  isGithubSyncerVisible,
}: IterationsListProps): JSX.Element {
  const [isOpen, setIsOpen] = useState<boolean[]>([])
  const { t } = useAppTranslation('components/student/IterationsList.tsx')

  const queryClient = useQueryClient()
  const CACHE_KEY = getCacheKey(track.slug, exercise.slug)

  useEffect(() => {
    queryClient.setQueryData([CACHE_KEY], request.options.initialData)
  }, [])

  const { data: resolvedData } = usePaginatedRequestQuery<{
    iterations: readonly Iteration[]
  }>([CACHE_KEY], {
    ...request,
    options: { ...request.options, staleTime: 1000 },
  })

  const handleDelete = (deletedIteration: Iteration) => {
    queryClient.setQueryData<{ iterations: readonly Iteration[] }>(
      [CACHE_KEY],
      (result) => {
        if (!result) {
          return { iterations: [] }
        }

        return {
          ...result,
          iterations: result.iterations.map((i) =>
            i.uuid === deletedIteration.uuid ? deletedIteration : i
          ),
        }
      }
    )
  }

  useEffect(() => {
    const solutionChannel = new SolutionChannel(
      { uuid: solutionUuid },
      (response) => {
        queryClient.setQueryData([CACHE_KEY], {
          iterations: response.iterations,
        })
      }
    )

    return () => {
      solutionChannel.disconnect()
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [CACHE_KEY, solutionUuid])

  useEffect(() => {
    if (
      !resolvedData ||
      !resolvedData.iterations ||
      resolvedData.iterations.length === 0
    ) {
      return
    }

    if (isOpen.length === 0) {
      setIsOpen(resolvedData.iterations.map((_, i) => i === 0))

      return
    }

    const newIterationsLength = resolvedData.iterations.length - isOpen.length

    if (newIterationsLength > 0) {
      const newIsOpen = Array.from(Array(newIterationsLength)).map((_, i) =>
        i === 0 ? !isOpen.some((o) => o === true) : false
      )

      setIsOpen([...newIsOpen, ...isOpen])
    }
  }, [isOpen, isOpen.length, resolvedData])

  if (!resolvedData) {
    return <Loading />
  }

  if (resolvedData.iterations.length === 0) {
    return <EmptyIterations
             links={{
               ...links,
               getMentoring: t('iterationsList.getMentoring'),
               automatedFeedbackInfo: t('iterationsList.automatedFeedbackInfo'),
               startExercise: t('iterationsList.startExercise'),
               solvingExercisesLocally: t('iterationsList.solvingExercisesLocally'),
               toolingHelp: t('iterationsList.toolingHelp'),
               githubSyncerSettings: t('iterationsList.githubSyncerSettings'),
               syncIteration: t('iterationsList.syncIteration'),
             }}
             exercise={exercise}
           />
  }

  return (
    <div className="lg-container container">
      <section className="iterations">
        {resolvedData.iterations
          .slice()
          .sort((it1: Iteration, it2: Iteration) => {
            return it2.idx > it1.idx ? 1 : -1
          })
          .map((iteration, index) => {
            return (
              <IterationReport
                key={index}
                iteration={iteration}
                syncer={syncer}
                exercise={exercise}
                isGithubSyncerVisible={isGithubSyncerVisible}
                track={track}
                links={{
                  ...links,
                  getMentoring: t('iterationsList.getMentoring'),
                  automatedFeedbackInfo: t('iterationsList.automatedFeedbackInfo'),
                  startExercise: t('iterationsList.startExercise'),
                  solvingExercisesLocally: t('iterationsList.solvingExercisesLocally'),
                  toolingHelp: t('iterationsList.toolingHelp'),
                  githubSyncerSettings: t('iterationsList.githubSyncerSettings'),
                  syncIteration: t('iterationsList.syncIteration'),
                }}
                isOpen={isOpen[index]}
                onExpanded={() => {
                  setIsOpen(isOpen.map((o, i) => (index === i ? true : o)))
                }}
                onCompressed={() => {
                  setIsOpen(isOpen.map((o, i) => (index === i ? false : o)))
                }}
                onDelete={handleDelete}
              />
            )
          })}
      </section>
    </div>
  )
}

const EmptyIterations = ({ links, exercise }: { links: Links, exercise: Exercise }) => {
  const { t } = useAppTranslation('components/student/IterationsList.tsx')
  return (
    <div className="container--fluid container--full-height">
      <section className="iterations--empty">
        <div className="iterations--empty-info">
          <h3 className="iterations--empty-title">
            {t('iterationsList.emptyIterations')}
          </h3>
          <ul className="iterations--empty-links">
            <li className="iterations--empty-links-item">
              <a href={links.getMentoring}>{t('iterationsList.getMentoring')}</a>
            </li>
            <li className="iterations--empty-links-item">
              <a href={links.solvingExercisesLocally}>
                {t('iterationsList.solvingExercisesLocally')}
              </a>
            </li>
            <li className="iterations--empty-links-item">
              <a href={links.automatedFeedbackInfo}>
                {t('iterationsList.automatedFeedbackInfo')}
              </a>
            </li>
          </ul>
          <a
            href={links.startExercise}
            className="button iterations--empty-button"
          >
            {t('iterationsList.startExercise')} {exercise.title}
          </a>
          <ul className="iterations--empty-links">
            <li>
              <a href={links.toolingHelp}>{t('iterationsList.toolingHelp')}</a>
            </li>
            <li>
              <a href={links.githubSyncerSettings}>
                {t('iterationsList.githubSyncerSettings')}
              </a>
            </li>
            <li>
              <a href={links.syncIteration}>{t('iterationsList.syncIteration')}</a>
            </li>
          </ul>
        </div>
      </section>
    </div>
  )
}
// === end file ===
```