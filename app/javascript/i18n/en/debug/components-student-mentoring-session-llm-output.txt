```ts
// i18n
export default {
  "iterationView.thisIterationHasBeenDeleted": "This iteration has been deleted",
  "sessionInfo.youreBeingMentoredByOn": "You&apos;re being mentored by&nbsp;",
  "sessionInfo.on": "on",
  "sessionInfo.getMentoringOn": "Get mentoring on",
  "discussionInfo.endedThisDiscussion": "{{mentorHandle}} ended this discussion.",
  "discussionInfo.itsTimeToReviewMentoring": "It&apos;s time to review {{mentorHandle}}&apos;s mentoring",
  "discussionInfo.youllBeAbleToLeaveFeedback": "You&apos;ll be able to leave feedback and share what you thought of your experience.",
  "discussionInfo.reviewFinishDiscussion": "Review &amp; finish discussion",
  "discussionInfo.thisDiscussionTimedOut": "This discussion timed out.",
  "discussionInfo.reviewDiscussion": "Review discussion",
  "mentorInfo.meetYourMentor": "Meet your mentor",
  "discussionActions.ended": "Ended",
  "discussionActions.reviewDiscussion": "Review discussion",
  "discussionActions.endDiscussion": "End discussion"
}

// modified_files
// === file: ../components/student/mentoring-session/IterationView.tsx ===
import React from 'react'
import {
  Iteration,
  IterationStatus,
  MentorDiscussion,
  TestFile,
} from '../../types'
import { IterationsList } from '../../mentoring/session/IterationsList'
import { FilePanel } from '../../mentoring/session/FilePanel'
import { IterationHeader } from './iteration-view/IterationHeader'
import { usePaginatedRequestQuery } from '../../../hooks/request-query'
import { FetchingBoundary } from '../../FetchingBoundary'
import { File } from '../../types'
import { ResultsZone } from '../../ResultsZone'
import { LinkButton } from '../../mentoring/session/LinkButton'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const DEFAULT_ERROR = new Error('Unable to load files')

export const IterationView = ({
  iterations,
  instructions,
  testFiles,
  currentIteration,
  onClick,
  language,
  indentSize,
  isOutOfDate,
  isLinked,
  setIsLinked,
  discussion,
}: {
  iterations: readonly Iteration[]
  instructions?: string
  testFiles?: readonly TestFile[]
  currentIteration: Iteration
  onClick: (iteration: Iteration) => void
  language: string
  indentSize: number
  isOutOfDate: boolean
  isLinked: boolean
  setIsLinked: (linked: boolean) => void
  discussion?: MentorDiscussion
}): JSX.Element => {
  const { t } = useAppTranslation('components/student/mentoring-session')
  /* TODO: (required) Don't do this if currentIteration.links.files is null */
  const {
    data: resolvedData,
    error,
    status,
    isFetching,
  } = usePaginatedRequestQuery<{
    files: File[]
  }>([currentIteration.links.files], {
    endpoint: currentIteration.links.files,
    options: {},
  })

  return (
    <React.Fragment>
      <IterationHeader iteration={currentIteration} isOutOfDate={isOutOfDate} />

      {currentIteration.status == IterationStatus.DELETED ? (
        <div className="deleted">{t('iterationView.thisIterationHasBeenDeleted')}</div>
      ) : (
        <ResultsZone isFetching={isFetching}>
          <FetchingBoundary
            error={error}
            status={status}
            defaultError={DEFAULT_ERROR}
          >
            {resolvedData ? (
              <FilePanel
                files={resolvedData.files}
                language={language}
                indentSize={indentSize}
                instructions={instructions}
                testFiles={testFiles}
              />
            ) : null}
          </FetchingBoundary>
        </ResultsZone>
      )}
      {iterations.length > 1 ? (
        <footer className="c-iterations-footer">
          <IterationsList
            iterations={iterations}
            onClick={onClick}
            current={currentIteration}
          />
          {discussion ? (
            <LinkButton value={isLinked} setValue={setIsLinked} />
          ) : null}
        </footer>
      ) : null}
    </React.Fragment>
  )
}

// === end file ===

// === file: ../components/student/mentoring-session/SessionInfo.tsx ===
import React from 'react'
import { TrackIcon, ExerciseIcon, HandleWithFlair } from '@/components/common'
import { Mentor } from '../MentoringSession'
import type {
  MentorSessionTrack as Track,
  MentorSessionExercise as Exercise,
} from '@/components/types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const SessionInfo = ({
  mentor,
  track,
  exercise,
}: {
  mentor?: Mentor
  track: Track
  exercise: Exercise
}): JSX.Element => {
  const { t } = useAppTranslation('components/student/mentoring-session')
  return (
    <>
      <TrackIcon title={track.title} iconUrl={track.iconUrl} />
      <ExerciseIcon iconUrl={exercise.iconUrl} />
      <div className="info-for-student">
        {mentor ? (
          <React.Fragment>
            <div className="flex items-center">
              {t('sessionInfo.youreBeingMentoredByOn')}
              <strong className="flex">
                {
                  <HandleWithFlair
                    handle={mentor.handle}
                    flair={mentor.flair}
                    size="small"
                  />
                }
                &nbsp;
              </strong>
              {t('sessionInfo.on')}
            </div>{' '}
            <div className="exercise-title">{exercise.title}</div>
          </React.Fragment>
        ) : (
          <React.Fragment>
            {t('sessionInfo.getMentoringOn')}
            <div className="exercise-title">{exercise.title}</div>
          </React.Fragment>
        )}
      </div>
    </>
  )
}

// === end file ===

// === file: ../components/student/mentoring-session/MentoringRequest.tsx ===
import React from 'react'
import { MentoringRequestForm } from './mentoring-request/MentoringRequestForm'
import { MentoringRequestInfo } from './mentoring-request/MentoringRequestInfo'
import {
  Iteration,
  MentorSessionRequest as Request,
  MentorSessionTrack as Track,
  MentorSessionExercise as Exercise,
  DiscussionLinks,
} from '@/components/types'
import { Video } from '../MentoringSession'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const MentoringRequest = ({
  trackObjectives,
  track,
  exercise,
  request,
  latestIteration,
  videos,
  links,
  onCreate,
}: {
  trackObjectives: string
  track: Track
  exercise: Exercise
  request?: Request
  latestIteration: Iteration
  videos: Video[]
  links: DiscussionLinks
  onCreate: (mentorRequest: Request) => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/student/mentoring-session')
  return request ? (
    <MentoringRequestInfo
      request={request}
      links={links}
      track={track}
      videos={videos}
      iteration={latestIteration}
    />
  ) : (
    <MentoringRequestForm
      trackObjectives={trackObjectives}
      track={track}
      exercise={exercise}
      onSuccess={onCreate}
      links={links}
    />
  )
}

// === end file ===

// === file: ../components/student/mentoring-session/FinishButton.tsx ===
import React, { useState } from 'react'
import { FinishMentorDiscussionModal } from '../../modals/student/FinishMentorDiscussionModal'
import { ConfirmFinishMentorDiscussionModal } from '../../modals/student/ConfirmFinishMentorDiscussionModal'
import { MentorDiscussion, MentoringSessionDonation } from '../../types'
import { DiscussionActionsLinks } from './DiscussionActions'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type Status = 'initialized' | 'confirming' | 'finishing'

export const FinishButton = ({
  discussion,
  donation,
  className,
  children,
  links,
}: React.PropsWithChildren<{
  className: string
  discussion: MentorDiscussion
  donation: MentoringSessionDonation
  links: DiscussionActionsLinks
}>): JSX.Element => {
  const { t } = useAppTranslation('components/student/mentoring-session')
  const [status, setStatus] = useState<Status>('initialized')

  const timedOut =
    discussion.finishedBy &&
    ['mentor_timed_out', 'student_timed_out'].includes(discussion.finishedBy)

  return (
    <React.Fragment>
      <button
        type="button"
        className={className}
        onClick={() => {
          timedOut ? setStatus('finishing') : setStatus('confirming')
        }}
      >
        {children}
      </button>
      <ConfirmFinishMentorDiscussionModal
        open={status === 'confirming'}
        onConfirm={() => {
          setStatus('finishing')
        }}
        onCancel={() => {
          setStatus('initialized')
        }}
      />
      <FinishMentorDiscussionModal
        discussion={discussion}
        links={links}
        open={status === 'finishing'}
        onClose={() => {
          setStatus('initialized')
        }}
        onCancel={() => {
          setStatus('initialized')
        }}
        donation={donation}
      />
    </React.Fragment>
  )
}

// === end file ===

// === file: ../components/student/mentoring-session/DiscussionInfo.tsx ===
import React from 'react'
import { DiscussionPostList } from '../../mentoring/discussion/DiscussionPostList'
import { AddDiscussionPost } from '../../mentoring/discussion/AddDiscussionPost'
import { NewMessageAlert } from '../../mentoring/discussion/NewMessageAlert'
import { PostsWrapper } from '../../mentoring/discussion/PostsContext'
import { MentorInfo } from './MentorInfo'
import {
  MentorDiscussion,
  Iteration,
  MentoringSessionDonation,
} from '../../types'
import { Mentor } from '../MentoringSession'
import { GraphicalIcon } from '../../common'
import { FinishButton } from './FinishButton'
import { QueryStatus } from '@tanstack/react-query'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type Links = {
  exercise: string
}

export const DiscussionInfo = ({
  discussion,
  mentor,
  userHandle,
  iterations,
  onIterationScroll,
  links,
  status,
  donation,
}: {
  discussion: MentorDiscussion
  mentor: Mentor
  userHandle: string
  iterations: readonly Iteration[]
  onIterationScroll: (iteration: Iteration) => void
  links: DiscussionActionsLinks
  status: QueryStatus
  donation: MentoringSessionDonation
}): JSX.Element => {
  const { t } = useAppTranslation('components/student/mentoring-session')
  const timedOut =
    discussion.finishedBy &&
    ['mentor_timed_out', 'student_timed_out'].includes(discussion.finishedBy)

  const timedOutStatus =
    discussion.status &&
    ['mentor_timed_out', 'student_timed_out'].includes(discussion.status)

  return (
    <PostsWrapper discussion={discussion}>
      <div id="panel-discussion">
        <MentorInfo mentor={mentor} />
        <div className="c-discussion-timeline">
          <DiscussionPostList
            iterations={iterations}
            userIsStudent={true}
            discussionUuid={discussion.uuid}
            userHandle={userHandle}
            onIterationScroll={onIterationScroll}
            status={status}
          />
          {discussion.status === 'mentor_finished' && (
            <DiscussionMentorFinished
              discussion={discussion}
              mentor={mentor}
              links={links}
              donation={donation}
            />
          )}
          {timedOut && timedOutStatus && (
            <DiscussionMentorTimedOut
              discussion={discussion}
              donation={donation}
              mentor={mentor}
              links={links}
            />
          )}
        </div>
      </div>
      <section className="comment-section --comment">
        <NewMessageAlert />
        <AddDiscussionPost discussion={discussion} />
      </section>
    </PostsWrapper>
  )
}

function DiscussionMentorFinished({
  mentor,
  discussion,
  links,
  donation,
}: {
  mentor: Mentor
  discussion: MentorDiscussion
  links: DiscussionActionsLinks
  donation: MentoringSessionDonation
}) {
  const { t } = useAppTranslation('components/student/mentoring-session')
  return (
    <div className="student-review timeline-entry">
      <GraphicalIcon
        icon="completed-check-circle"
        className="timeline-marker"
      />
      <div className="--details timeline-content">
        <h3>{t('discussionInfo.endedThisDiscussion', { mentorHandle: mentor.handle })}</h3>
        <p>
          <strong>
            {t('discussionInfo.itsTimeToReviewMentoring', { mentorHandle: mentor.handle })}
          </strong>
          {t('discussionInfo.youllBeAbleToLeaveFeedback')}
        </p>
        <FinishButton
          discussion={discussion}
          links={links}
          donation={donation}
          className="btn-primary btn-s"
        >
          {t('discussionInfo.reviewFinishDiscussion')}
        </FinishButton>
      </div>
    </div>
  )
}

function DiscussionMentorTimedOut({
  mentor,
  discussion,
  links,
  donation,
}: {
  mentor: Mentor
  discussion: MentorDiscussion
  links: DiscussionActionsLinks
  donation: MentoringSessionDonation
}) {
  const { t } = useAppTranslation('components/student/mentoring-session')
  return (
    <div className="student-review timeline-entry">
      <GraphicalIcon
        icon="completed-check-circle"
        className="timeline-marker"
      />
      <div className="--details timeline-content">
        <h3>{t('discussionInfo.thisDiscussionTimedOut')}</h3>
        <p>
          <strong>
            {t('discussionInfo.itsTimeToReviewMentoring', { mentorHandle: mentor.handle })}
          </strong>
          {t('discussionInfo.youllBeAbleToLeaveFeedback')}
        </p>
        <FinishButton
          discussion={discussion}
          links={links}
          donation={donation}
          className="btn-primary btn-s"
        >
          {t('discussionInfo.reviewDiscussion')}
        </FinishButton>
      </div>
    </div>
  )
}

// === end file ===

// === file: ../components/student/mentoring-session/MentorInfo.tsx ===
import React from 'react'
import { Avatar, HandleWithFlair, Reputation } from '@/components/common'
import { Mentor } from '../MentoringSession'
import { Pronouns } from '@/components/common/Pronouns'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const MentorInfo = ({ mentor }: { mentor: Mentor }): JSX.Element => {
  const { t } = useAppTranslation('components/student/mentoring-session')
  return (
    <div className="mentor-info">
      <div className="flex mb-8">
        <div className="flex-grow">
          <div className="subtitle">{t('mentorInfo.meetYourMentor')}</div>
          <div className="handle-block">
            <div className="handle">
              <HandleWithFlair
                handle={mentor.handle}
                flair={mentor.flair}
                size="medium"
              />
            </div>
            <Reputation
              value={mentor.reputation.toString()}
              type="primary"
              size="small"
            />
          </div>
          <div className="name">{mentor.name}</div>
          <Pronouns handle={mentor.handle} pronouns={mentor.pronouns} />
        </div>
        <Avatar src={mentor.avatarUrl} handle={mentor.handle} />
      </div>
      <div className="bio">{mentor.bio}</div>
      {/* TODO: (required) View previous sessions as a student */}
    </div>
  )
}

// === end file ===

// === file: ../components/student/mentoring-session/DiscussionActions.tsx ===
import React from 'react'
import {
  MentorDiscussion,
  MentoringSessionDonation,
  MentoringSessionLinks,
} from '@/components/types'
import { FinishButton } from './FinishButton'
import GraphicalIcon from '@/components/common/GraphicalIcon'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type DiscussionActionsProps = {
  discussion: MentorDiscussion
  donation: MentoringSessionDonation
  links: DiscussionActionsLinks
}

export type DiscussionActionsLinks = MentoringSessionLinks & {
  exerciseMentorDiscussionUrl: string
}

export const DiscussionActions = ({
  discussion,
  links,
  donation,
}: DiscussionActionsProps): JSX.Element => {
  const { t } = useAppTranslation('components/student/mentoring-session')
  const timedOut =
    discussion.finishedBy &&
    ['mentor_timed_out', 'student_timed_out'].includes(discussion.finishedBy)

  return discussion.isFinished || discussion.status === 'mentor_finished' ? (
    <div className="finished">
      <GraphicalIcon icon="completed-check-circle" />
      {t('discussionActions.ended')}
    </div>
  ) : (
    <FinishButton
      discussion={discussion}
      links={links}
      donation={donation}
      className={`btn-xs ${
        timedOut ? 'btn-primary' : 'btn-enhanced'
      } finish-button`}
    >
      <div className="--hint">
        {timedOut ? t('discussionActions.reviewDiscussion') : t('discussionActions.endDiscussion')}
      </div>
    </FinishButton>
  )
}

// === end file ===
```