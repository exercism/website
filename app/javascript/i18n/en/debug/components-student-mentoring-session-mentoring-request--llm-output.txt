```ts
// i18n
export default {
  "cancelRequestModal.cancelMentoringRequest": "Cancel mentoring request?",
  "cancelRequestModal.areYouSure": "Are you sure you want to cancel this mentoring request? Please note that if someone has started giving feedback in the last few minutes, the session may continue regardless of this cancellation.",
  "cancelRequestModal.cancelMentoringRequestButton": "Cancel mentoring request",
  "cancelRequestModal.close": "Close",
  "cancelRequestButton.cancelRequest": "Cancel Request",
  "mentoringRequestInfo.waitingOnMentor": "Waiting on a mentorâ€¦",
  "mentoringRequestInfo.learnHowToGetMost": "Learn how to get the most out of mentoring",
  "mentoringRequestInfo.mentoringRelies": "Mentoring relies on mentors and students having a shared understanding of how it works.",
  "mentoringRequestInfo.readOurGuide": "Read our guide",
  "mentoringRequestInfo.newWindowOrTab": "The link opens in a new window or tab",
  "mentoringRequestInfo.waitingOnMentorQuestion": "Waiting on a mentor?",
  "mentoringRequestInfo.howToGetMostOutOfMentoring": "Learn how to get the most out of mentoring",
  "mentoringRequestInfo.wantAFriend": "Want a friend to mentor your solution?",
  "mentoringRequestInfo.sendThisLink": "Send this link to a friend for private mentoring.",
  "mentoringRequestForm.sendThisLinkFriend": "Send this link to a friend for private mentoring.",
  "mentoringRequestForm.learnMore": "Learn more",
  "mentoringRequestForm.itsTimeToDeepen": "It's time to deepen your knowledge.",
  "mentoringRequestForm.startMentoringDiscussion": "Start a mentoring discussion on <strong>{{exerciseTitle}}</strong> to discover new and exciting ways to approach it. Expand and deepen your knowledge.",
  "mentoringRequestForm.submitMentoringRequest": "Submit mentoring request",
  "mentoringRequestForm.unableToCreateRequest": "Unable to create mentor request",
  "mentoringRequestForm.openForMentor": "Once you submit, your request will be open for a mentor to join and start providing feedback."
}

// modified_files
// === file: ../components/student/mentoring-session/mentoring-request/CancelRequestModal.tsx ===
import React, { useCallback } from 'react'
import { useMutation } from '@tanstack/react-query'
import { sendRequest } from '@/utils/send-request'
import { redirectTo } from '@/utils/redirect-to'
import { Modal, ModalProps } from '@/components/modals/Modal'
import { FormButton } from '@/components/common/FormButton'
import { ErrorBoundary, ErrorMessage } from '@/components/ErrorBoundary'
import { MentorSessionRequest } from '@/components/types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const DEFAULT_ERROR = new Error('Unable to cancel request')

type APIResponse = {
  links: {
    home: string
  }
}

export const CancelRequestModal = ({
  open,
  onClose,
  request,
  ...props
}: Omit<ModalProps, 'className'> & {
  request: MentorSessionRequest
}): JSX.Element => {
  const { t } = useAppTranslation('components/student/mentoring-session/mentoring-request/')
  const {
    mutate: mutation,
    status,
    error,
  } = useMutation<APIResponse>({
    mutationFn: async () => {
      const { fetch } = sendRequest({
        endpoint: request.links.cancel,
        method: 'PATCH',
        body: null,
      })

      return fetch
    },
    onSuccess: (response) => {
      redirectTo(response.links.home)
    },
  })

  const handleSubmit = useCallback(
    (e) => {
      e.preventDefault()

      mutation()
    },
    [mutation]
  )

  const handleClose = useCallback(() => {
    if (status === 'pending') {
      return
    }

    onClose()
  }, [status, onClose])

  return (
    <Modal
      open={open}
      onClose={handleClose}
      className="m-generic-confirmation"
      {...props}
    >
      <h3>{t('cancelRequestModal.cancelMentoringRequest')}</h3>
      <p>
        {t('cancelRequestModal.areYouSure')}
      </p>
      <form data-turbo="false" onSubmit={handleSubmit} className="buttons">
        <FormButton status={status} type="submit" className="btn-primary btn-s">
          {t('cancelRequestModal.cancelMentoringRequestButton')}
        </FormButton>
        <FormButton
          status={status}
          type="button"
          className="btn-enhanced btn-s"
          onClick={handleClose}
        >
          {t('cancelRequestModal.close')}
        </FormButton>
      </form>
      <ErrorBoundary resetKeys={[status]}>
        <ErrorMessage error={error} defaultError={DEFAULT_ERROR} />
      </ErrorBoundary>
    </Modal>
  )
}

// === end file ===

// === file: ../components/student/mentoring-session/mentoring-request/CancelRequestButton.tsx ===
import React, { useState, useCallback } from 'react'
import { MentorSessionRequest } from '../../../types'
import { CancelRequestModal } from './CancelRequestModal'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const CancelRequestButton = ({
  request,
}: {
  request: MentorSessionRequest
}): JSX.Element => {
  const { t } = useAppTranslation('components/student/mentoring-session/mentoring-request/')
  const [modalOpen, setModalOpen] = useState(false)

  const handleModalOpen = useCallback(() => {
    setModalOpen(true)
  }, [])

  const handleModalClose = useCallback(() => {
    setModalOpen(false)
  }, [])

  return (
    <React.Fragment>
      <button type="button" onClick={handleModalOpen}>
        {t('cancelRequestButton.cancelRequest')}
      </button>
      <CancelRequestModal
        open={modalOpen}
        request={request}
        onClose={handleModalClose}
      />
    </React.Fragment>
  )
}

// === end file ===

// === file: ../components/student/mentoring-session/mentoring-request/MentoringRequestInfo.tsx ===
import React, { useState } from 'react'
import { timeFormat } from '@/utils/time'
import { GraphicalIcon, Icon } from '@/components/common'
import { MedianWaitTime } from '@/components/common/MedianWaitTime'
import CopyToClipboardButton from '@/components/common/CopyToClipboardButton'
import { IterationMarker } from '@/components/mentoring/session/IterationMarker'
import {
  DiscussionPost,
  DiscussionPostProps,
  DiscussionPostAction,
} from '@/components/mentoring/discussion/DiscussionPost'
import { CancelRequestButton } from './CancelRequestButton'
import type {
  MentorSessionRequest as Request,
  Iteration,
  MentorSessionTrack as Track,
} from '@/components/types'
import type { Video as VideoProps } from '../../MentoringSession'
import { useAppTranslation } from '@/i18n/useAppTranslation'
import { Trans } from 'react-i18next'

type Links = {
  privateMentoring: string
  mentoringGuide: string
}

const placeholder = {
  contentMarkdown: '',
  contentHtml:
    "<p>Please update this comment to tell a mentor what you'd like to learn in this exercise</p>",
}

export const MentoringRequestInfo = ({
  track,
  links,
  videos,
  request,
  iteration,
}: {
  track: Track
  links: Links
  videos: VideoProps[]
  request: Request
  iteration: Iteration
}): JSX.Element => {
  const { t } = useAppTranslation('components/student/mentoring-session/mentoring-request/')
  if (!request.comment) {
    throw 'Request comment expected'
  }

  const [action, setAction] = useState<DiscussionPostAction>('viewing')
  const [post, setPost] = useState<DiscussionPostProps>(request.comment)
  const showPlaceholder = post.contentHtml.length === 0

  const postProps = {
    action,
    post: showPlaceholder ? { ...post, ...placeholder } : post,
    onEdit: () => setAction('editing'),
    onEditCancel: () => setAction('viewing'),
    onUpdate: (post: DiscussionPostProps) => setPost(post),
  }

  return (
    <div className="mentoring-requested-section" id="panel-discussion">
      <div className="content">
        <div className="status">
          <div className="info">
            <h3>{t('mentoringRequestInfo.waitingOnMentor')}</h3>
            <MedianWaitTime seconds={track.medianWaitTime} />
          </div>
          <CancelRequestButton request={request} />
        </div>
        <div className="placeholder">
          <div className="info">
            <div className="title">
              <div className="name" />
              <div className="rep" />
            </div>
            <div className="desc" />
          </div>
          <div className="avatar">
            <GraphicalIcon icon="avatar-placeholder" />
          </div>
        </div>

        <div className="c-discussion-timeline">
          <IterationMarker iteration={iteration} userIsStudent={false} />
          <DiscussionPost {...postProps} />
        </div>

        <div className="waiting-box">
          <h3>{t('mentoringRequestInfo.waitingOnMentorQuestion')}</h3>
          <h4>{t('mentoringRequestInfo.howToGetMostOutOfMentoring')}</h4>
          <p>
            {t('mentoringRequestInfo.mentoringRelies')}{' '}
            <a href={links.mentoringGuide} target="_blank" rel="noreferrer">
              {t('mentoringRequestInfo.readOurGuide')}
              <Icon
                icon="external-link"
                alt={t('mentoringRequestInfo.newWindowOrTab')}
              />
            </a>{' '}
            or watch the videos below to get that understanding.
          </p>
          <div className="videos">
            {videos.map((video, i) => (
              <Video key={i} {...video} />
            ))}
          </div>
        </div>
        <div className="direct">
          <h3>{t('mentoringRequestInfo.wantAFriend')}</h3>
          <p>{t('mentoringRequestInfo.sendThisLink')}</p>
          <CopyToClipboardButton textToCopy={links.privateMentoring} />
        </div>
      </div>
    </div>
  )
}

const Video = ({ title, date, thumb, url }: VideoProps) => {
  return (
    <a href={url} target="_blank" rel="noreferrer" className="video">
      <div
        className="img"
        style={{
          backgroundImage: `url('${thumb}')`,
        }}
      />
      <div className="info">
        <div className="title">{title}</div>
        <time dateTime={date} className="date">
          {timeFormat(date, 'DD MMM YYYY')}
        </time>
      </div>
      <Icon icon="external-link" alt={t('mentoringRequestInfo.newWindowOrTab')} />
    </a>
  )
}

// === end file ===

// === file: ../components/student/mentoring-session/mentoring-request/MentoringRequestForm.tsx ===
import React from 'react'
import { GraphicalIcon } from '@/components/common'
import { MedianWaitTime } from '@/components/common/MedianWaitTime'
import CopyToClipboardButton from '@/components/common/CopyToClipboardButton'
import { FormButton } from '@/components/common/FormButton'
import { FetchingBoundary } from '@/components/FetchingBoundary'
import { useMentoringRequest } from './MentoringRequestFormComponents'
import type {
  MentorSessionTrack as Track,
  MentorSessionExercise as Exercise,
  MentorSessionRequest as Request,
  DiscussionLinks,
} from '@/components/types'
import {
  TrackObjectivesTextArea,
  SolutionCommentTextArea,
} from './MentoringRequestFormComponents'
import { useAppTranslation } from '@/i18n/useAppTranslation'
import { Trans } from 'react-i18next'

const DEFAULT_ERROR = new Error('Unable to create mentor request')

export const MentoringRequestForm = ({
  trackObjectives,
  track,
  exercise,
  links,
  onSuccess,
}: {
  trackObjectives: string
  track: Track
  exercise: Exercise
  links: DiscussionLinks
  onSuccess: (mentorRequest: Request) => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/student/mentoring-session/mentoring-request/')
  const {
    error,
    handleSubmit,
    solutionCommentRef,
    status,
    trackObjectivesRef,
  } = useMentoringRequest(links, onSuccess)

  return (
    <div className="mentoring-request-section">
      <div className="direct">
        <h3>
          {t('mentoringRequestForm.sendThisLinkFriend')}.{' '}
          <a href={links.learnMoreAboutPrivateMentoring}>{t('mentoringRequestForm.learnMore')}</a>.
        </h3>
        <CopyToClipboardButton textToCopy={links.privateMentoring} />
      </div>
      <form
        data-turbo="false"
        className="c-mentoring-request-form"
        onSubmit={handleSubmit}
      >
        <div className="heading">
          <div className="info">
            <h2>{t('mentoringRequestForm.itsTimeToDeepen')}</h2>
            <p>
              <Trans
                i18nKey="mentoringRequestForm.startMentoringDiscussion"
                values={{ exerciseTitle: exercise.title }}
                components={{ strong: <strong /> }}
              />
            </p>
          </div>
          <GraphicalIcon icon="mentoring" category="graphics" />
        </div>
        <TrackObjectivesTextArea
          defaultValue={trackObjectives}
          track={track}
          ref={trackObjectivesRef}
        />
        <SolutionCommentTextArea ref={solutionCommentRef} />
        <FormButton status={status} className="btn-primary btn-m">
          {t('mentoringRequestForm.submitMentoringRequest')}
        </FormButton>
        <FetchingBoundary
          status={status}
          error={error}
          defaultError={DEFAULT_ERROR}
        />
        <p className="flow-explanation">
          {t('mentoringRequestForm.openForMentor')}
          <MedianWaitTime seconds={track.medianWaitTime} />
        </p>
      </form>
    </div>
  )
}

// === end file ===
```