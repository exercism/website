```ts
// i18n
export default {
  "communitySolutions.learnFromOthersSolutions": "Learn from others' solutions",
  "communitySolutions.thisIsWhereWeWouldUsuallyLink": "This is where weâ€™d usually link you to other peoplesâ€™ solutions to the same exercise.",
  "communitySolutions.exploreTheirApproaches": "Explore their approaches to learn new tips and tricks. Discover popular solutions to this exercise.",
  "communitySolutions.viewCommunitySolutions": "View community solutions",
  "mentoring.getMentoredByAHuman": "Get mentored by a human",
  "mentoring.youAlsoGetTheOpportunityToBeMentored": "You also get the opportunity to be mentored by {{trackTitle}} experts.",
  "mentoring.onAverageStudentsIterate": "On average, students iterate a further 3.5 times when mentored on a solution.",
  "mentoring.learnMore": "Learn more",
  "header.yourSolutionLooksGood": "Your solution looks good!",
  "header.goodJobYourSolutionHasPassedAllTests": "<strong>Good job.</strong> Your solution to \"{{exerciseTitle}}!\" has passed all the tests ðŸ˜Š",
  "header.testsPassed": "Tests Passed",
  "header.yourSolutionIsBeingProcessed": "Your solution is being processedâ€¦",
  "header.yourSolutionIsCurrentlyBeingTested": "Your solution is currently being tested, analysed, and compared to other solutions to find potential improvements. This should only take a few seconds.",
  "header.yourSolutionFailedTheTests": "Your solution failed the tests.",
  "header.hmmmItLooksLikeYourSolutionIsntWorking": "Hmmm, it looks like your solution isn't working. Please check that the tests pass locally on your machine. If they do pass for you, please read <articleLink>this article</articleLink>",
  "header.testsFailed": "Tests Failed",
  "header.yourSolutionWorkedButYouCanTakeItFurther": "Your solution worked, but you can take it furtherâ€¦",
  "header.weveAnalysedYourSolutionAndHave": "Weâ€™ve analysed your solution and have {{comments}}. Address the essential improvements before proceeding.",
  "header.yourSolutionLooksGreat": "Your solution looks great!",
  "header.yourSolutionPassedTheTestsAndWeDontHave": "Your solution passed the tests and we don't have any recommendations. {{mentorOffer}} <strong>Great Job! ðŸŽ‰</strong>",
  "header.youMightWantToWorkWithAMentor": "You might want to work with a mentor to make it even better.",
  "header.weveAnalysedYourSolutionAndNotFundAnythingThatNeedsChanging": "Weâ€™ve analysed your solution and not found anything that needs changing. We do have <comments>{{commentCount}} additional {commentPlural}</comments> that you might like to check. {{mentorOffer}} <strong>Great Job! ðŸŽ‰</strong>",
  "header.considerWorkingWithAMentor": "Consider working with a mentor to make it even better. ",
  "header.comment_one": "comment",
  "header.comment_other": "comments",
  "header.yourSolutionIsGoodEnoughToContinue": "Your solution is good enough to continue!",
  "header.weveAnalysedYourSolutionAndHaveComments": "Weâ€™ve analysed your solution and have {{comments}}. You can either continue or address the {recommendationPlural} first - your choice!",
  "header.recommendation_one": "recommendation",
  "header.recommendation_other": "recommendations",
  "header.weSuggestAddressingTheRecommendations": "We suggest addressing the {recommendationPlural} before proceeding.",
  "header.improvement_one": "improvement",
  "header.improvement_other": "improvements",
  "header.recommendationPlural_one": "recommendation",
  "header.recommendationPlural_other": "recommendations"
}

// modified_files
// === file: ../components/student/solution-summary/CommunitySolutions.tsx ===
import React from 'react'
import { GraphicalIcon } from '../../common'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const CommunitySolutions = ({
  link,
  isTutorial,
}: {
  link: string
  isTutorial: boolean
}): JSX.Element => {
  const { t } = useAppTranslation('components/student/solution-summary')
  return (
    <div className="community-solutions">
      <GraphicalIcon
        icon="community-solutions"
        category="graphics"
        className="header-icon"
      />
      <h3>{t('communitySolutions.learnFromOthersSolutions')}</h3>
      {isTutorial ? (
        <p>
          {t('communitySolutions.thisIsWhereWeWouldUsuallyLink')}
        </p>
      ) : (
        <>
          <p>
            {t('communitySolutions.exploreTheirApproaches')}
          </p>
          <a href={link} className="btn-small-discourage">
            {t('communitySolutions.viewCommunitySolutions')}
          </a>
        </>
      )}
    </div>
  )
}

// === end file ===

// === file: ../components/student/solution-summary/LatestIterationLink.tsx ===
import React from 'react'
import IterationSummaryWithWebsockets from '../../track/IterationSummary'
import { Iteration } from '../../types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export default function LatestIterationLink({
  iteration,
}: {
  iteration: Iteration
}): JSX.Element {
  const { t } = useAppTranslation('components/student/solution-summary')
  return (
    <a className="latest-iteration-link" href={iteration.links.self}>
      <IterationSummaryWithWebsockets
        iteration={iteration}
        showSubmissionMethod={true}
        showTestsStatusAsButton={false}
        showFeedbackIndicator={true}
        showTimeStamp={false}
      />
    </a>
  )
}

// === end file ===

// === file: ../components/student/solution-summary/Mentoring.tsx ===
import React from 'react'
import { GraphicalIcon, Icon } from '../../common'
import { MentorDiscussion, SolutionMentoringStatus } from '../../types'
import { MentoringComboButton } from '../MentoringComboButton'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type Links = {
  learnMoreAboutMentoringArticle: string
  shareMentoring: string
  requestMentoring: string
  pendingMentorRequest: string
  inProgressDiscussion?: string
}

export const Mentoring = ({
  mentoringStatus,
  discussions,
  links,
  isTutorial,
  trackTitle,
}: {
  mentoringStatus: SolutionMentoringStatus
  discussions: readonly MentorDiscussion[]
  links: Links
  isTutorial: boolean
  trackTitle: string
}): JSX.Element => {
  const { t } = useAppTranslation('components/student/solution-summary')
  return (
    <div className="mentoring">
      <GraphicalIcon
        icon="mentoring-screen"
        className="header-icon"
        category="graphics"
      />
      <h3>{t('mentoring.getMentoredByAHuman')}</h3>
      {isTutorial ? (
        <p>
          {t('mentoring.youAlsoGetTheOpportunityToBeMentored', { trackTitle })}
        </p>
      ) : (
        <>
          <p>
            {t('mentoring.onAverageStudentsIterate')}
          </p>
          <MentoringComboButton
            mentoringStatus={mentoringStatus}
            discussions={discussions}
            links={links}
          />
          <a href={links.learnMoreAboutMentoringArticle} className="learn-more">
            {t('mentoring.learnMore')}
            <Icon icon="external-link" alt="Opens in new tab" />
          </a>
        </>
      )}
    </div>
  )
}

// === end file ===

// === file: ../components/student/solution-summary/IterationLink.tsx ===
import React from 'react'
import { GraphicalIcon } from '../../common'
import { IterationSummary } from '../../track/IterationSummary'
import { Iteration } from '../../types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const IterationLink = ({
  iteration,
}: {
  iteration: Iteration
}): JSX.Element => {
  const { t } = useAppTranslation('components/student/solution-summary')
  return (
    <a className="iteration" href={iteration.links.self}>
      <IterationSummary
        iteration={iteration}
        showSubmissionMethod={true}
        showTestsStatusAsButton={false}
        showFeedbackIndicator={true}
      />

      <GraphicalIcon icon="chevron-right" className="action-icon" />
    </a>
  )
}

// === end file ===

// === file: ../components/student/solution-summary/Header.tsx ===
import React from 'react'
import pluralize from 'pluralize'
import { GraphicalIcon, Icon } from '../../common'
import { toSentence } from '../../../utils/toSentence'
import { ExerciseType, Iteration, IterationStatus } from '../../types'
import { useAppTranslation } from '@/i18n/useAppTranslation'
import { Trans } from 'react-i18next'

export type SolutionSummaryLinks = {
  testsPassLocallyArticle: string
}

export type Exercise = {
  title: string
  type: ExerciseType
}
const TutorialHeader = ({ exercise }: { exercise: Exercise }) => {
  const { t } = useAppTranslation('components/student/solution-summary')

  return (
    <header>
      <div className="info">
        <h2>{t('header.yourSolutionLooksGood')}</h2>
        <p>
          <Trans
            i18nKey="header.goodJobYourSolutionHasPassedAllTests"
            values={{ exerciseTitle: exercise.title }}
            components={{ strong: <strong /> }}
          />
        </p>
      </div>
      <div className="status passed">{t('header.testsPassed')}</div>
    </header>
  )
}

export const Header = ({
  iteration,
  exercise,
  links,
}: {
  iteration: Iteration
  exercise: Exercise
  links: SolutionSummaryLinks
}): JSX.Element => {
  const { t } = useAppTranslation('components/student/solution-summary')
  switch (iteration.status) {
    case IterationStatus.DELETED:
    case IterationStatus.UNTESTED:
      return <></>
    case IterationStatus.TESTING:
    case IterationStatus.ANALYZING:
      return (
        <header>
          <div className="info">
            <h2>{t('header.yourSolutionIsBeingProcessed')}</h2>
            <p>
              {t('header.yourSolutionIsCurrentlyBeingTested')}
            </p>
          </div>
          <GraphicalIcon icon="spinner" className="spinner" />
        </header>
      )
    case IterationStatus.TESTS_FAILED:
      return (
        <header>
          <div className="info">
            <h2>{t('header.yourSolutionFailedTheTests')}</h2>
            <p>
              <Trans
                i18nKey="header.hmmmItLooksLikeYourSolutionIsntWorking"
                components={{
                  articleLink: (
                    <a
                      href={links.testsPassLocallyArticle}
                      rel="noreferrer"
                      target="_blank"
                    />
                  ),
                  icon: <Icon icon="external-link" alt="Opens in a new tab" />,
                }}
              />
            </p>
          </div>
          <div className="status failed">{t('header.testsFailed')}</div>
        </header>
      )
    case IterationStatus.ESSENTIAL_AUTOMATED_FEEDBACK: {
      if (exercise.type === 'tutorial') {
        return <TutorialHeader exercise={exercise} />
      }

      const comments = [
        `${iteration.numEssentialAutomatedComments} essential ${pluralize(
          'improvement',
          iteration.numEssentialAutomatedComments
        )}`,
        iteration.numActionableAutomatedComments > 0
          ? `${iteration.numActionableAutomatedComments} ${pluralize(
              'recommendation',
              iteration.numActionableAutomatedComments
            )}`
          : '',
        iteration.numNonActionableAutomatedComments > 0
          ? `${
              iteration.numNonActionableAutomatedComments +
              iteration.numCelebratoryAutomatedComments
            } additional ${pluralize(
              'comment',
              iteration.numNonActionableAutomatedComments +
                iteration.numCelebratoryAutomatedComments
            )}`
          : '',
      ].filter((comment) => comment.length > 0)

      return (
        <header>
          <div className="info">
            <h2>{t('header.yourSolutionWorkedButYouCanTakeItFurther')}</h2>
            <p>
              {t('header.weveAnalysedYourSolutionAndHave', { comments })}
            </p>
          </div>
          <div className="status passed">{t('header.testsPassed')}</div>
        </header>
      )
    }
    case IterationStatus.NO_AUTOMATED_FEEDBACK:
      if (exercise.type === 'tutorial') {
        return <TutorialHeader exercise={exercise} />
      }

      return (
        <header>
          <div className="info">
            <h2>{t('header.yourSolutionLooksGreat')}</h2>
            <p>
              {t('header.yourSolutionPassedTheTestsAndWeDontHave', {
                mentorOffer:
                  exercise.type === 'practice'
                    ? t('header.youMightWantToWorkWithAMentor')
                    : null,
              })}
            </p>
          </div>
          <div className="status passed">{t('header.testsPassed')}</div>
        </header>
      )
    case IterationStatus.NON_ACTIONABLE_AUTOMATED_FEEDBACK:
    case IterationStatus.CELEBRATORY_AUTOMATED_FEEDBACK:
      if (exercise.type === 'tutorial') {
        return <TutorialHeader exercise={exercise} />
      }

      return (
        <header>
          <div className="info">
            <h2>{t('header.yourSolutionLooksGreat')}</h2>
            <p>
              <Trans
                i18nKey="header.weveAnalysedYourSolutionAndNotFundAnythingThatNeedsChanging"
                values={{
                  commentCount:
                    iteration.numNonActionableAutomatedComments +
                    iteration.numCelebratoryAutomatedComments,
                  mentorOffer:
                    exercise.type === 'practice'
                      ? t('header.considerWorkingWithAMentor')
                      : ' ',
                }}
                components={{
                  comments: <span className="non-actionable" />,
                }}
                count={
                  iteration.numNonActionableAutomatedComments +
                  iteration.numCelebratoryAutomatedComments
                }
              />
            </p>
          </div>
          <div className="status passed">{t('header.testsPassed')}</div>
        </header>
      )
    case IterationStatus.ACTIONABLE_AUTOMATED_FEEDBACK: {
      if (exercise.type === 'tutorial') {
        return <TutorialHeader exercise={exercise} />
      }

      const comments = [
        `${iteration.numActionableAutomatedComments} ${pluralize(
          'recommendation',
          iteration.numActionableAutomatedComments
        )}`,
        iteration.numNonActionableAutomatedComments > 0
          ? `${
              iteration.numNonActionableAutomatedComments +
              iteration.numCelebratoryAutomatedComments
            } additional ${pluralize(
              'comment',
              iteration.numNonActionableAutomatedComments +
                iteration.numCelebratoryAutomatedComments
            )}`
          : '',
      ].filter((comment) => comment.length > 0)

      switch (exercise.type) {
        case 'concept':
          return (
            <header>
              <div className="info">
                <h2>{t('header.yourSolutionIsGoodEnoughToContinue')}</h2>
                <p>
                  {t('header.weveAnalysedYourSolutionAndHaveComments', {
                    comments,
                    recommendationPlural: pluralize(
                      'recommendation',
                      iteration.numActionableAutomatedComments
                    ),
                  })}
                </p>
              </div>
              <div className="status passed">{t('header.testsPassed')}</div>
            </header>
          )
        case 'practice':
          return (
            <header>
              <div className="info">
                <h2>{t('header.yourSolutionWorkedButYouCanTakeItFurther')}</h2>
                <p>
                  {t('header.weSuggestAddressingTheRecommendations', {
                    recommendationPlural: pluralize(
                      'recommendation',
                      iteration.numActionableAutomatedComments
                    ),
                  })}
                </p>
              </div>
              <div className="status passed">{t('header.testsPassed')}</div>
            </header>
          )
      }
    }
  }
}

// === end file ===
```