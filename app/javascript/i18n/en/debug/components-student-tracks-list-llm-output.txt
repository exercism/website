```ts
// i18n
export default {
  "orderSelect.sortByLastTouched": "Sort by last touched",
  "track.thisTrackIsNew": "This track is new",
  "track.joined": "Joined",
  "track.numberOfExercises": "{{count}} exercise",
  "track.numberOfExercises_one": "{{count}} exercise",
  "track.numberOfExercises_other": "{{count}} exercises",
  "track.numberOfConcepts": "{{count}} concept",
  "track.numberOfConcepts_one": "{{count}} concept",
  "track.numberOfConcepts_other": "{{count}} concepts",
  "track.lastTouched": "Last touched {{time}}",
  "list.noResultsFound": "No results found",
  "list.resetSearchAndFilters": "Reset search and filters",
  "tagsFilter.filterBy": "Filter by",
  "tagsFilter.showingAll": "Showing all",
  "tagsFilter.numberOfTracks": "{{count}} track",
  "tagsFilter.numberOfTracks_one": "{{count}} track",
  "tagsFilter.numberOfTracks_other": "{{count}} tracks",
  "tagsFilter.resetFilters": "Reset filters",
  "tagOptionList.apply": "Apply",
  "tagOptionList.close": "Close"
}

// modified_files
// === file: ../components/student/tracks-list/OrderSelect.tsx ===
// i18n-key-prefix: orderSelect
// i18n-namespace: components/student/tracks-list
import React from 'react'
import { SingleSelect } from '../../common/SingleSelect'
import { Order } from '../TracksList'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const OptionComponent = ({ option: order }: { option: Order }) => {
  const { t } = useAppTranslation('components/student/tracks-list')
  switch (order) {
    case 'last_touched_first':
      return <React.Fragment>{t('orderSelect.sortByLastTouched')}</React.Fragment>
  }
}

export const OrderSelect = ({
  value,
  setValue,
}: {
  value: Order
  setValue: (value: Order) => void
}): JSX.Element => {
  return (
    <SingleSelect<Order>
      options={['last_touched_first']}
      value={value}
      setValue={setValue}
      SelectedComponent={OptionComponent}
      OptionComponent={OptionComponent}
    />
  )
}

// === end file ===
// === file: ../components/student/tracks-list/Track.tsx ===
// i18n-key-prefix: track
// i18n-namespace: components/student/tracks-list
import React from 'react'
import pluralize from 'pluralize'
import { TrackIcon } from '@/components/common/TrackIcon'
import { Icon } from '@/components/common/Icon'
import { GraphicalIcon } from '@/components/common/GraphicalIcon'
import { ProgressBar } from './ProgressBar'
import { fromNow } from '@/utils/time'
import { StudentTrack } from '@/components/types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const Track = ({ track }: { track: StudentTrack }): JSX.Element => {
  const { t } = useAppTranslation('components/student/tracks-list')

  return (
    <a className="--track e-hover-grow" href={track.webUrl}>
      <TrackIcon
        iconUrl={track.iconUrl}
        title={track.title}
        className="hidden lg:block"
      />
      <div className="--info">
        <div className="--heading">
          <TrackIcon
            iconUrl={track.iconUrl}
            title={track.title}
            className="block lg:hidden"
          />
          <h3 className="--title">{track.title}</h3>
          {!track.isJoined && (
            <div className="items-center hidden md:flex">
              {track.course ? (
                <div className="--v3"> Learning Mode </div>
              ) : track.isNew ? (
                <div className="--new">
                  <Icon icon="stars" alt={t('track.thisTrackIsNew')} />
                  {t('track.thisTrackIsNew')}
                </div>
              ) : null}
            </div>
          )}
          {track.hasNotifications && <div className="c-notification-dot" />}
          {track.isJoined && (
            <div className="--joined">
              <GraphicalIcon icon="checkmark" className="lg:mr-8" />
              <span className="hidden lg:block">{t('track.joined')}</span>
            </div>
          )}
        </div>
        <ul className="--counts">
          <li>
            <Icon icon="exercises" alt="Number of exercises" />
            {track.numCompletedExercises == undefined
              ? null
              : `${track.numCompletedExercises}/`}
            {track.numExercises} {t('track.numberOfExercises', { count: track.numExercises })}
          </li>

          {track.course && (
            <li>
              <Icon icon="concepts" alt="Number of concepts" />
              {track.numCompletedConcepts == undefined
                ? null
                : `${track.numCompletedConcepts}/`}
              {track.numConcepts} {t('track.numberOfConcepts', { count: track.numConcepts })}
            </li>
          )}
        </ul>

        {track.isJoined && (
          <ProgressBar
            numExercises={track.numExercises}
            numCompletedExercises={track.numCompletedExercises}
          />
        )}

        {track.isJoined ? null : (
          <ul className="--tags">
            {track.tags.slice(0, 3).map((tag) => {
              return <li key={tag}>{tag}</li>
            })}
          </ul>
        )}

        {track.isJoined && (
          <div className="--last-touched">
            {t('track.lastTouched', { time: fromNow(track.lastTouchedAt) })}
          </div>
        )}
      </div>
    </a>
  )
}

// === end file ===
// === file: ../components/student/tracks-list/List.tsx ===
// i18n-key-prefix: list
// i18n-namespace: components/student/tracks-list
import React from 'react'
import { Track } from './Track'
import { GraphicalIcon } from '@/components/common/GraphicalIcon'
import { StudentTrack } from '@/components/types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const List = ({
  data,
  onReset,
}: {
  data: StudentTrack[]
  onReset: () => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/student/tracks-list')

  if (data.length === 0) {
    return (
      <div className="empty-state">
        <GraphicalIcon icon="sad-exercism" className="mb-20" />
        <h3 className="text-h3 mb-24">{t('list.noResultsFound')}</h3>
        <button type="button" onClick={onReset} className="btn-enhanced btn-s">
          <GraphicalIcon icon="reset" />
          <span>{t('list.resetSearchAndFilters')}</span>
        </button>
      </div>
    )
  }

  const joinedTracks = data.filter((track) => track.isJoined)
  const unjoinedTracks = data.filter((track) => !track.isJoined)

  return (
    <div className="--tracks">
      {joinedTracks.length !== 0 ? (
        <div className="joined-tracks">
          {joinedTracks.map((track) => {
            return <Track key={track.slug} track={track} />
          })}
        </div>
      ) : null}
      {unjoinedTracks.length !== 0 ? (
        <div className="unjoined-tracks">
          {unjoinedTracks.map((track) => {
            return <Track key={track.slug} track={track} />
          })}
        </div>
      ) : null}
    </div>
  )
}

// === end file ===
// === file: ../components/student/tracks-list/ProgressBar.tsx ===
// i18n-key-prefix: progressBar
// i18n-namespace: components/student/tracks-list
import React from 'react'

export const ProgressBar = ({
  numExercises,
  numCompletedExercises,
}: {
  numExercises: number
  numCompletedExercises: number
}): JSX.Element => {
  const completedPercentage = (numCompletedExercises / numExercises) * 100 + '%'

  return (
    <div className="--progress-bar">
      <div className="--fill" style={{ width: completedPercentage }} />
    </div>
  )
}

// === end file ===
// === file: ../components/student/tracks-list/TagsFilter.tsx ===
// i18n-key-prefix: tagsFilter
// i18n-namespace: components/student/tracks-list
import React, { useState, useEffect, useRef, useCallback } from 'react'
import { TagOptionList } from './TagOptionList'
import { GraphicalIcon } from '../../common/GraphicalIcon'
import pluralize from 'pluralize'
import { TagOption } from '../TracksList'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const TagsFilter = ({
  options,
  setTags,
  value,
  numTracks,
}: {
  options: readonly TagOption[]
  setTags: (tags: string[]) => void
  value: string[]
  numTracks: number
}): JSX.Element => {
  const { t } = useAppTranslation('components/student/tracks-list')
  const [expanded, setExpanded] = useState(false)
  const [selectedTags, setSelectedTags] = useState<string[]>(value)
  const [hasExpandedEver, markAsExpanded] = useState(false)

  const dialogRef = useRef<HTMLDivElement>(null)
  const filterButtonRef = useRef<HTMLButtonElement>(null)

  useEffect(() => {
    if (expanded) {
      if (!dialogRef.current) {
        return
      }

      dialogRef.current.focus()
      markAsExpanded(true)
    } else if (hasExpandedEver) {
      if (!filterButtonRef.current) {
        return
      }

      filterButtonRef.current.focus()
    }
  }, [expanded, hasExpandedEver])

  useEffect(() => {
    if (!expanded) {
      return
    }

    const handleEscape = (e: KeyboardEvent) => {
      if (e.key !== 'Escape') {
        return
      }

      e.stopPropagation()
      setExpanded(false)
    }

    document.addEventListener('keyup', handleEscape)
    return () => {
      document.removeEventListener('keyup', handleEscape)
    }
  }, [expanded])

  useEffect(() => {
    setSelectedTags(value)
  }, [value])

  const handleReset = useCallback(
    (e) => {
      e.preventDefault()

      setSelectedTags([])
      setTags([])
      setExpanded(false)
    },
    [setTags]
  )

  return (
    <>
      <button
        ref={filterButtonRef}
        onClick={() => setExpanded(!expanded)}
        className="--filter-btn"
        aria-haspopup="true"
        aria-expanded={expanded}
      >
        <span className="hidden sm:block sm:mr-12">{t('tagsFilter.filterBy')}</span>
        <GraphicalIcon icon="chevron-down" />
      </button>
      <div
        ref={dialogRef}
        tabIndex={-1}
        role="dialog"
        aria-label="A series of checkboxes to filter Exercism tracks"
        className="--tag-option-list"
        {...(expanded ? {} : { hidden: true })}
      >
        <div className="lg-container container">
          <TagOptionList
            selectedTags={selectedTags}
            options={options}
            setSelectedTags={setSelectedTags}
            onSubmit={() => {
              setTags(selectedTags)
              setExpanded(false)
            }}
            onClose={() => setExpanded(false)}
          />
        </div>
      </div>
      <div className="--state">
        <p>
          {t('tagsFilter.showingAll')}
          {value === undefined || value.length == 0 ? '' : ' '}
          {numTracks} {t('tagsFilter.numberOfTracks', { count: numTracks })}
        </p>
        {value !== undefined && value.length > 0 ? (
          <button onClick={handleReset} className="--reset-btn">
            <GraphicalIcon icon="reset" />
            {t('tagsFilter.resetFilters')}
          </button>
        ) : null}
      </div>
    </>
  )
}

// === end file ===
// === file: ../components/student/tracks-list/TagOptionList.tsx ===
// i18n-key-prefix: tagOptionList
// i18n-namespace: components/student/tracks-list
import React, { useCallback } from 'react'
import { TagOption as TagOptionProps } from '../TracksList'
import { TagOption } from './TagOption'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const TagOptionList = ({
  options,
  onSubmit,
  onClose,
  selectedTags,
  setSelectedTags,
}: {
  options: readonly TagOptionProps[]
  onSubmit: () => void
  onClose: () => void
  selectedTags: string[]
  setSelectedTags: (tags: string[]) => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/student/tracks-list')

  function handleChange(
    e: React.ChangeEvent<HTMLInputElement>,
    optionValue: string
  ) {
    if (e.target.checked) {
      setSelectedTags(selectedTags.concat(optionValue))
    } else {
      setSelectedTags(selectedTags.filter((v) => v !== optionValue))
    }
  }

  const handleClose = useCallback(
    (e) => {
      e.preventDefault()
      onClose()
    },
    [onClose]
  )

  const handleSubmit = useCallback(
    (e) => {
      e.preventDefault()

      onSubmit()
    },
    [onSubmit]
  )

  return (
    <form data-turbo="false" onSubmit={handleSubmit}>
      <div className="--categories">
        {options.map((option) => {
          return (
            <div key={option.category} className="--category">
              <h4>{option.category}</h4>
              {option.options.map((option) => (
                <TagOption
                  key={option.value}
                  onChange={handleChange}
                  checked={selectedTags.includes(option.value)}
                  label={option.label}
                  value={option.value}
                />
              ))}
            </div>
          )
        })}
      </div>
      <footer className="--buttons">
        <button className="--apply-btn">{t('tagOptionList.apply')}</button>
        <button className="--close-btn" onClick={handleClose}>
          {t('tagOptionList.close')}
        </button>
      </footer>
    </form>
  )
}

// === end file ===
// === file: ../components/student/tracks-list/TagOption.tsx ===
// i18n-key-prefix: tagOption
// i18n-namespace: components/student/tracks-list
import React from 'react'

export const TagOption = ({
  value,
  label,
  checked,
  onChange,
}: {
  value: string
  label: string
  checked: boolean
  onChange: (e: React.ChangeEvent<HTMLInputElement>, value: string) => void
}): JSX.Element => {
  // TODO: (optional) ids shouldn't have : in them so parse it out
  const id = `tag-option-${value}`
  return (
    <div className="--option">
      <input
        id={id}
        type="checkbox"
        value={value}
        checked={checked}
        onChange={(e) => onChange(e, value)}
      />
      <label htmlFor={id}>{label}</label>
    </div>
  )
}

// === end file ===
```