```ts
// i18n
export default {
  "knowledgeInfo.noExistingKnowledge": "This task requires no existing Exercism knowledge.",
  "knowledgeInfo.perfectForFirstContribution": "This task is perfect for people making their first contribution to Exercism. If you've been around a while, considering leaving this for someone new ðŸ™‚",
  "knowledgeInfo.elementaryKnowledge": "This task requires elementary Exercism knowledge.",
  "knowledgeInfo.littleBitAboutExercism": "You'll need to know a little bit about how Exercism works, but you can work it out during this task. Perfect for first-time contributors.",
  "knowledgeInfo.intermediateKnowledge": "This task requires intermediate Exercism knowledge.",
  "knowledgeInfo.keyPrinciplesOfArea": "You'll need to know the key principles of {{desc}} to work on this task. If you're not familiar, you can learn while doing the task but you might need to put in a couple of hours of reading the docs to get up to speed.",
  "knowledgeInfo.advancedKnowledge": "This task requires advanced Exercism knowledge.",
  "knowledgeInfo.solidUnderstandingOfArea": "You'll need to have a solid understanding of{{desc}} to work on this task. If you don't, you'll probably need to pair up with someone more experienced to work on it.",
  "moduleInfo.analyzers": "For this task, you'll be working on Analyzers..",
  "moduleInfo.analyzersDescription": "Analyzers take code and generating automated suggestions for how to make code more idiomatic.",
  "moduleInfo.concepts": "This task is about Concepts.",
  "moduleInfo.conceptsDescription": "Concepts are comprised of brief introductions and more complex explanations about a programming topic.",
  "moduleInfo.learningExercises": "This task is about Learning Exercises.",
  "moduleInfo.learningExercisesDescription": "Learning Exercises teach one or more Concepts. They are signficiantly more complex to make than Practice Exercises.",
  "moduleInfo.generators": "This task is about Generators.",
  "moduleInfo.generatorsDescription": "Generators are pieces of tooling that Tracks use to keep in sync with our central set of exercises.",
  "moduleInfo.practiceExercises": "This task is about Practice Exercises.",
  "moduleInfo.practiceExercisesDescription": "Most exercises are Practice Exercises - they enable students to practice the Concepts they have learnt in Learning Exercises.",
  "moduleInfo.representers": "This task is about Representers.",
  "moduleInfo.representersDescription": "Representers create normalized versions of students' submissions, which can have mentoring comments attached to them.",
  "moduleInfo.testRunners": "This task is about Test Runners.",
  "moduleInfo.testRunnersDescription": "Test Runners allow Exercism to run students' code and determine whether they pass or fail the tests, and provide useful feedback to the student.",
  "typeInfo.continuousIntegration": "In this task you'll be working on Exercism's Continous Integration.",
  "typeInfo.githubActions": "You'll likely be working with GitHub Actions, or similar.",
  "typeInfo.codingTask": "This is a coding task.",
  "typeInfo.productionLevelCode": "You'll be writing production-level code that's run by Exercism, or by our maintainer team to help automate jobs.",
  "typeInfo.studentFacingContent": "This task involves writing student-facing content.",
  "typeInfo.writingInMarkdown": "You'll be primarily writing content in Markdown, along with some examples of code, and possible test files, in the relevant language.",
  "typeInfo.writingDockerfiles": "This task involves writing Dockerfiles.",
  "typeInfo.improveDockerfiles": "Use your Docker expertise to help improve, optimize and shrink our Dockerfiles.",
  "typeInfo.writingDocs": "This task involves writing docs.",
  "typeInfo.docsImportant": "Docs are one of the most important parts of Exercism - helping both contributors and students. Our docs are written in Markdown.",
  "sizeInfo.tinyTask": "This is a tiny task.",
  "sizeInfo.completeInMinutes": "Depending on your experience, you should be able to complete it in a few minutes.",
  "sizeInfo.smallTask": "This is a small task.",
  "sizeInfo.completeInHour": "Depending on your experience, you should be able to complete it under an hour.",
  "sizeInfo.mediumSizedTask": "This is medium sized task.",
  "sizeInfo.deepenKnowledge": "Depending on your experience, you should be able to complete it in a few hours. This is a great task to deepen your knowledge of working on Exercism and make a sigificant contribution.",
  "sizeInfo.largeTask": "This is a large task.",
  "sizeInfo.bigContribution": "This will take you many hours to complete. It's a great task to get your teeth into and will be a big contribution to Exercism.",
  "sizeInfo.project": "This task is a project.",
  "sizeInfo.daysToComplete": "This will take you days to complete, even if you are experienced with contributing to Exercism.",
  "actionInfo.createNew": "This task requires you to create something new.",
  "actionInfo.buildingFromScratch": "This means you'll be building something from scratch.",
  "actionInfo.fixBroken": "This task requires you to fix something broken.",
  "actionInfo.fixingIt": "This means you'll be taking something that's currently not working and fixing it.",
  "actionInfo.improveSomething": "This task requires you to improve something.",
  "actionInfo.addFeatureOrImprovement": "We often merge things at Exercism that take the project forward and add follow-up issues to improve things. This is an opportunity to add a feature or improvement.",
  "actionInfo.proofread": "This task requires you to proofread.",
  "actionInfo.checkDocsAndContent": "Help checks our docs and content make sense, are grammatical, and are consumable by non-native speakers.",
  "actionInfo.syncContent": "This task requires you to sync content to the latest verisons.",
  "actionInfo.updateTrackImplementation": "Exercism have a central repository of exercises that are updated by a cross-language team. This task involves updating one Track's implementation to the latest version of an Exercise.",
  "summary.task": "Task",
  "summary.creating": "creating",
  "summary.fixing": "fixing",
  "summary.improving": "improving",
  "summary.proofreading": "proofreading",
  "summary.syncing": "syncing",
  "summary.analyzers": "Analyzers",
  "summary.concepts": "Concepts",
  "summary.learningExercises": "Learning Exercises",
  "summary.generators": "Generators",
  "summary.practiceExercises": "Practice Exercises",
  "summary.representers": "Representers",
  "summary.testRunners": "Test Runners",
  "summary.workingOn": "working on"
}

// modified_files
// === file: ../components/tooltips/task-tooltip/KnowledgeInfo.tsx ===
import React from 'react'
import { KnowledgeTag } from '../../contributing/tasks-list/task/KnowledgeTag'
import { TaskKnowledge, TaskModule } from '../../types'
import { descriptionForModule } from './Summary'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const KnowledgeInfo = ({
  knowledge,
  module,
}: {
  knowledge: TaskKnowledge
  module?: TaskModule
}): JSX.Element => {
  return (
    <section>
      <div className="icon">
        <KnowledgeTag knowledge={knowledge} />
      </div>
      <div className="details">
        <KnowledgeDetails knowledge={knowledge} module={module} />
      </div>
    </section>
  )
}

const KnowledgeDetails = ({
  knowledge,
  module,
}: {
  knowledge: TaskKnowledge
  module?: TaskModule
}): JSX.Element => {
  const { t } = useAppTranslation('components/tooltips/task-tooltip')
  const desc = descriptionForModule(module)
  switch (knowledge) {
    case 'none':
      return (
        <>
          <h3>
            {t('knowledgeInfo.noExistingKnowledge')}
          </h3>
          <p>
            {t('knowledgeInfo.perfectForFirstContribution')}
          </p>
        </>
      )
    case 'elementary':
      return (
        <>
          <h3>
            {t('knowledgeInfo.elementaryKnowledge')}
          </h3>
          <p>
            {t('knowledgeInfo.littleBitAboutExercism')}
          </p>
        </>
      )
    case 'intermediate':
      return (
        <>
          <h3>
            {t('knowledgeInfo.intermediateKnowledge')}
          </h3>
          <p>
            {t('knowledgeInfo.keyPrinciplesOfArea', { desc: desc ? desc : t('summary.exercism') })}
          </p>
        </>
      )
    case 'advanced':
      return (
        <>
          <h3>
            {t('knowledgeInfo.advancedKnowledge')}
          </h3>
          <p>
            {t('knowledgeInfo.solidUnderstandingOfArea', { desc: desc ? desc : t('summary.exercism') })}
          </p>
        </>
      )
  }
}

// === end file ===

// === file: ../components/tooltips/task-tooltip/ModuleInfo.tsx ===
import React from 'react'
import { ModuleTag } from '../../contributing/tasks-list/task/ModuleTag'
import { TaskModule } from '../../types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const ModuleInfo = ({ module }: { module: TaskModule }): JSX.Element => {
  return (
    <section>
      <div className="icon">
        <ModuleTag module={module} />
      </div>
      <div className="details">
        <ModuleDetails module={module} />
      </div>
    </section>
  )
}

const ModuleDetails = ({ module }: { module: TaskModule }): JSX.Element => {
  const { t } = useAppTranslation('components/tooltips/task-tooltip')
  switch (module) {
    case 'analyzer':
      return (
        <>
          <h3>
            {t('moduleInfo.analyzers')}
          </h3>
          <p>
            {t('moduleInfo.analyzersDescription')}
          </p>
        </>
      )
    case 'concept':
      return (
        <>
          <h3>
            {t('moduleInfo.concepts')}
          </h3>
          <p>
            {t('moduleInfo.conceptsDescription')}
          </p>
        </>
      )
    case 'concept-exercise':
      return (
        <>
          <h3>
            {t('moduleInfo.learningExercises')}
          </h3>
          <p>
            {t('moduleInfo.learningExercisesDescription')}
          </p>
        </>
      )
    case 'generator':
      return (
        <>
          <h3>
            {t('moduleInfo.generators')}
          </h3>
          <p>
            {t('moduleInfo.generatorsDescription')}
          </p>
        </>
      )
    case 'practice-exercise':
      return (
        <>
          <h3>
            {t('moduleInfo.practiceExercises')}
          </h3>
          <p>
            {t('moduleInfo.practiceExercisesDescription')}
          </p>
        </>
      )
    case 'representer':
      return (
        <>
          <h3>
            {t('moduleInfo.representers')}
            <p>
              {t('moduleInfo.representersDescription')}
            </p>
          </h3>
        </>
      )
    case 'test-runner':
      return (
        <>
          <h3>
            {t('moduleInfo.testRunners')}
          </h3>
          <p>
            {t('moduleInfo.testRunnersDescription')}
          </p>
        </>
      )
  }
}

// === end file ===

// === file: ../components/tooltips/task-tooltip/TypeInfo.tsx ===
import React from 'react'
import { TypeIcon } from '../../contributing/tasks-list/task/TypeIcon'
import { TaskType } from '../../types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const TypeInfo = ({ type }: { type: TaskType }): JSX.Element => {
  return (
    <section>
      <div className="icon">
        <TypeIcon type={type} />
      </div>
      <div className="details">
        <TypeDetails type={type} />
      </div>
    </section>
  )
}

const TypeDetails = ({ type }: { type: TaskType }): JSX.Element => {
  const { t } = useAppTranslation('components/tooltips/task-tooltip')

  switch (type) {
    case 'ci':
      return (
        <>
          <h3>
            {t('typeInfo.continuousIntegration')}
          </h3>
          <p>{t('typeInfo.githubActions')}</p>
        </>
      )
    case 'coding':
      return (
        <>
          <h3>
            {t('typeInfo.codingTask')}
          </h3>
          <p>
            {t('typeInfo.productionLevelCode')}
          </p>
        </>
      )
    case 'content':
      return (
        <>
          <h3>
            {t('typeInfo.studentFacingContent')}
          </h3>
          <p>
            {t('typeInfo.writingInMarkdown')}
          </p>
        </>
      )
    case 'docker':
      return (
        <>
          <h3>
            {t('typeInfo.writingDockerfiles')}
          </h3>
          <p>
            {t('typeInfo.improveDockerfiles')}
          </p>
        </>
      )
    case 'docs':
      return (
        <>
          <h3>
            {t('typeInfo.writingDocs')}
          </h3>
          <p>
            {t('typeInfo.docsImportant')}
          </p>
        </>
      )
  }
}

// === end file ===

// === file: ../components/tooltips/task-tooltip/SizeInfo.tsx ===
import React from 'react'
import { SizeTag } from '../../contributing/tasks-list/task/SizeTag'
import { TaskSize } from '../../types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const SizeInfo = ({ size }: { size: TaskSize }): JSX.Element => {
  return (
    <section>
      <div className="icon">
        <SizeTag size={size} />
      </div>
      <div className="details">
        <SizeDetails size={size} />
      </div>
    </section>
  )
}

const SizeDetails = ({ size }: { size: TaskSize }): JSX.Element => {
  const { t } = useAppTranslation('components/tooltips/task-tooltip')

  switch (size) {
    case 'tiny':
      return (
        <>
          <h3>
            {t('sizeInfo.tinyTask')}
          </h3>
          <p>
            {t('sizeInfo.completeInMinutes')}
          </p>
        </>
      )
    case 'small':
      return (
        <>
          <h3>
            {t('sizeInfo.smallTask')}
          </h3>
          <p>
            {t('sizeInfo.completeInHour')}
          </p>
        </>
      )
    case 'medium':
      return (
        <>
          <h3>
            {t('sizeInfo.mediumSizedTask')}
          </h3>
          <p>
            {t('sizeInfo.deepenKnowledge')}
          </p>
        </>
      )
    case 'large':
      return (
        <>
          <h3>
            {t('sizeInfo.largeTask')}
          </h3>
          <p>
            {t('sizeInfo.bigContribution')}
          </p>
        </>
      )
    case 'massive':
      return (
        <>
          <h3>
            {t('sizeInfo.project')}
          </h3>
          <p>
            {t('sizeInfo.daysToComplete')}
          </p>
        </>
      )
  }
}

// === end file ===

// === file: ../components/tooltips/task-tooltip/ActionInfo.tsx ===
import React from 'react'
import { ActionIcon } from '../../contributing/tasks-list/task/ActionIcon'
import { TaskAction } from '../../types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const ActionInfo = ({ action }: { action: TaskAction }): JSX.Element => {
  return (
    <section>
      <div className="icon">
        <ActionIcon action={action} />
      </div>
      <div className="details">
        <ActionDetails action={action} />
      </div>
    </section>
  )
}

const ActionDetails = ({ action }: { action: TaskAction }): JSX.Element => {
  const { t } = useAppTranslation('components/tooltips/task-tooltip')

  switch (action) {
    case 'create':
      return (
        <>
          <h3>
            {t('actionInfo.createNew')}
          </h3>
          <p>{t('actionInfo.buildingFromScratch')}</p>
        </>
      )
    case 'fix':
      return (
        <>
          <h3>
            {t('actionInfo.fixBroken')}
          </h3>
          <p>
            {t('actionInfo.fixingIt')}
          </p>
        </>
      )
    case 'improve':
      return (
        <>
          <h3>
            {t('actionInfo.improveSomething')}
          </h3>
          <p>
            {t('actionInfo.addFeatureOrImprovement')}
          </p>
        </>
      )
    case 'proofread':
      return (
        <>
          <h3>
            {t('actionInfo.proofread')}
          </h3>
          <p>
            {t('actionInfo.checkDocsAndContent')}
          </p>
        </>
      )
    case 'sync':
      return (
        <>
          <h3>
            {t('actionInfo.syncContent')}
          </h3>
          <p>
            {t('actionInfo.updateTrackImplementation')}
          </p>
        </>
      )
  }
}

// === end file ===

// === file: ../components/tooltips/task-tooltip/Summary.tsx ===
import React from 'react'
import { Task, TaskAction, TaskModule } from '../../types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const Summary = ({ task }: { task: Task }): JSX.Element => {
  return (
    <section className="summary">
      <div className="icon">
        <SummaryTag />
      </div>
      <div className="details">
        <SummaryDetails task={task} />
      </div>
    </section>
  )
}

const SummaryTag = () => {
  const { t } = useAppTranslation('components/tooltips/task-tooltip')
  return <div className="task-icon">{t('summary.task')}</div>
}

export function verbForAction(action?: TaskAction) {
  const { t } = useAppTranslation('components/tooltips/task-tooltip')

  switch (action) {
    case 'create':
      return t('summary.creating')
    case 'fix':
      return t('summary.fixing')
    case 'improve':
      return t('summary.improving')
    case 'proofread':
      return t('summary.proofreading')
    case 'sync':
      return t('summary.syncing')
    default:
      return null
  }
}

export function descriptionForModule(module?: TaskModule) {
  const { t } = useAppTranslation('components/tooltips/task-tooltip')

  switch (module) {
    case 'analyzer':
      return t('summary.analyzers')
    case 'concept':
      return t('summary.concepts')
    case 'concept-exercise':
      return t('summary.learningExercises')
    case 'generator':
      return t('summary.generators')
    case 'practice-exercise':
      return t('summary.practiceExercises')
    case 'representer':
      return t('summary.representers')
    case 'test-runner':
      return t('summary.testRunners')
    default:
      return null
  }
}

export const SummaryDetails = ({ task }: { task: Task }) => {
  const { t } = useAppTranslation('components/tooltips/task-tooltip')

  let module = descriptionForModule(task.tags.module)
  module = module ? module.replace(/s$/, '') : 'Exercism'
  const verb = verbForAction(task.tags.action)

  return (
    <h3>
      {t('summary.workingOn')} {verb ? verb : t('summary.workingOn')} {module}{' '}
      {task.tags.type ? task.tags.type : 'changes'}
      {task.track ? ` for the ${task.track.title} Track` : null}.
    </h3>
  )
}

// === end file ===
```