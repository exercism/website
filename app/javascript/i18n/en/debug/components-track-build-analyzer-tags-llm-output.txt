```ts
// i18n
export default {
  "firstRow.tag": "Tag",
  "firstRow.enabled": "Enabled",
  "firstRow.filterable": "Filterable",
  "firstRow.numSolutions": "Num Solutions",
  "tagTogglerButton.yes": "Yes",
  "tagTogglerButton.no": "No"
}

// modified_files
// === file: ../components/track/build/analyzer-tags/FirstRow.tsx ===
// i18n-key-prefix: firstRow
// i18n-namespace: components/track/build/analyzer-tags
import React from 'react'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function FirstRow(): JSX.Element {
  const { t } = useAppTranslation('components/track/build/analyzer-tags')
  return (
    <div className="record-row sticky z-1 lg:top-0 top-[65px]">
      <div className="record-name" />
      <div className="record-value">
        <div className="record-element">{t('firstRow.tag')}</div>
        <div className="record-element justify-end">{t('firstRow.enabled')}</div>
        <div className="record-element justify-end">{t('firstRow.filterable')}</div>
        <div className="record-element justify-end">{t('firstRow.numSolutions')}</div>
      </div>
    </div>
  )
}

// === end file ===

// === file: ../components/track/build/analyzer-tags/TagTogglerButton.tsx ===
// i18n-key-prefix: tagTogglerButton
// i18n-namespace: components/track/build/analyzer-tags
import React from 'react'
import { assembleClassNames } from '@/utils/assemble-classnames'
import { Tag } from './AnalyzerTags.types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const toggledOnStyle =
  'border-darkGreen text-everyoneLovesAGreen bg-[var(--backgroundColorConceptMastered)]'
const toggledOffStyle =
  'border-red text-red bg-[(var(--backgroundColorExerciseStatusTagLocked)]'
const readOnlyStyle = 'border-transparent text-textColor6 bg-backgroundColorA'

export function TagTogglerButton({
  isActive,
  onClick,
  readOnly,
}: {
  isActive: boolean
  onClick: () => void
  readOnly: boolean
}) {
  const { t } = useAppTranslation('components/track/build/analyzer-tags')
  return (
    <button
      onClick={onClick}
      disabled={readOnly}
      className={assembleClassNames(
        'c-tag px-12 py-4 flex',
        readOnly ? readOnlyStyle : isActive ? toggledOnStyle : toggledOffStyle
      )}
    >
      {isActive ? t('tagTogglerButton.yes') : t('tagTogglerButton.no')}
    </button>
  )
}

// === end file ===

// === file: ../components/track/build/analyzer-tags/RecordRow.tsx ===
// i18n-key-prefix: recordRow
// i18n-namespace: components/track/build/analyzer-tags
import React, { useCallback } from 'react'
import { capitalize } from '@/utils/capitalize'
import { TagTogglerButton } from './TagTogglerButton'
import type { AnalyzerTagsEndpoints, Tag } from './AnalyzerTags.types'
import { useTagToggler } from './useTagToggler'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function RecordRow({
  tag,
  editMode,
  setLocalTags,
  endpoints,
}: {
  tag: Tag
  editMode: boolean
  setLocalTags: React.Dispatch<React.SetStateAction<Tag[]>>
  endpoints: AnalyzerTagsEndpoints
}) {
  const { handleToggle } = useTagToggler({ endpoints, setLocalTags })
  const { t } = useAppTranslation('components/track/build/analyzer-tags')

  return (
    <div className="record-row">
      <div className="record-name">
        {tag.tag
          .split(':')
          .map((part) => capitalize(part))
          .join(' â†’ ')}
      </div>
      <div className="record-value dynamic">
        <div className="record-element">
          <strong>{tag.tag}</strong>
        </div>
        <div className="record-element justify-end">
          <TagTogglerButton
            isActive={tag.enabled}
            onClick={() => handleToggle(tag, 'enabled')}
            readOnly={!editMode}
          />
        </div>
        <div className="record-element justify-end">
          <TagTogglerButton
            isActive={tag.filterable}
            onClick={() => handleToggle(tag, 'filterable')}
            readOnly={!editMode}
          />
        </div>
        <div className="record-element justify-end">
          <strong>{tag.numSolution.toLocaleString()}</strong>
        </div>
      </div>
    </div>
  )
}

// === end file ===
```