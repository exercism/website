```ts
// i18n
export default {
  "orderSelect.sortByMostSubmitted": "Sort by Most Submitted",
  "orderSelect.sortByNewest": "Sort by Newest",
  "orderSelect.sortByOldest": "Sort by Oldest",
  "orderSelect.sortByFewestLines": "Sort by Fewest Lines",
  "orderSelect.sortByHighestRepUser": "Sort by Highest Rep User",
  "layoutSelect.gridLayoutButton": "grid-layout-button",
  "layoutSelect.linesLayoutButton": "lines-layout-button",
  "exerciseTagFilter.exerciseTagFilterGroup.filterBy": "Filter by {{groupName}}",
  "exerciseTagFilter.exerciseTagFilter.filter": "Filter",
  "exerciseTagFilter.exerciseTagFilter.selectedTagsCount": " ({{length}})"
}

// modified_files
// === file: ../components/track/exercise-community-solutions-list/OrderSelect.tsx ===
import React from 'react'
import { SingleSelect } from '../../common/SingleSelect'
import { Order } from '../ExerciseCommunitySolutionsList'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const OptionComponent = ({ option: order }: { option: Order }) => {
  const { t } = useAppTranslation('components/track/exercise-community-solutions-list')
  switch (order) {
    case 'most_popular':
      return <React.Fragment>{t('orderSelect.sortByMostSubmitted')}</React.Fragment>
    case 'newest':
      return <React.Fragment>{t('orderSelect.sortByNewest')}</React.Fragment>
    case 'oldest':
      return <React.Fragment>{t('orderSelect.sortByOldest')}</React.Fragment>
    case 'fewest_loc':
      return <React.Fragment>{t('orderSelect.sortByFewestLines')}</React.Fragment>
    case 'highest_reputation':
      return <React.Fragment>{t('orderSelect.sortByHighestRepUser')}</React.Fragment>
  }
}

export const OrderSelect = ({
  value,
  setValue,
}: {
  value: Order
  setValue: (value: Order) => void
}): JSX.Element => {
  const { t } = useAppTranslation('components/track/exercise-community-solutions-list')
  return (
    <SingleSelect<Order>
      options={[
        'most_popular',
        'newest',
        'oldest',
        'fewest_loc',
        'highest_reputation',
      ]}
      value={value}
      setValue={setValue}
      SelectedComponent={OptionComponent}
      OptionComponent={OptionComponent}
      className="md:w-[290px] w-100"
    />
  )
}

// === end file ===

// === file: ../components/track/exercise-community-solutions-list/LayoutSelect.tsx ===
import React from 'react'
import { assembleClassNames } from '@/utils/assemble-classnames'
import { Icon } from '@/components/common'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function LayoutSelect({ layout, setLayout }) {
  const { t } = useAppTranslation('components/track/exercise-community-solutions-list')
  return (
    <div className="md:flex hidden shrink-0 border-1 border-buttonBorderColor2 rounded-8 overflow-hidden">
      <LayoutButton
        setLayout={setLayout}
        currentLayout={layout}
        layout={'grid-layout'}
      />
      <LayoutButton
        setLayout={setLayout}
        currentLayout={layout}
        layout={'lines-layout'}
      />
    </div>
  )
}

function LayoutButton({ currentLayout, layout, setLayout }) {
  const { t } = useAppTranslation('components/track/exercise-community-solutions-list')
  const selected = currentLayout === layout
  return (
    <button
      onClick={() => setLayout(layout)}
      className={assembleClassNames(
        'p-12',
        selected ? 'bg-purple' : 'bg-backgroundColorA'
      )}
    >
      <Icon
        width={18}
        height={18}
        icon={layout}
        alt={t(`layoutSelect.${layout}Button`)}
        className={assembleClassNames(
          selected ? 'filter-white' : 'filter-textColor1'
        )}
      />
    </button>
  )
}

// === end file ===

// === file: ../components/track/exercise-community-solutions-list/exercise-tag-filter/ExerciseTagFilterGroup.tsx ===
import React from 'react'
import { Checkbox } from '@/components/common'
import { TagArray } from './ExerciseTagFilter.types'
import { capitalize } from '@/utils/capitalize'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function ExerciseTagFilterGroup({
  tagGroup,
  checkedTags,
  handleToggleTag,
  groupName,
}: {
  tagGroup: TagArray
  checkedTags: TagArray
  handleToggleTag: (tagName: string, isChecked: boolean) => void
  groupName: string
}) {
  const { t } = useAppTranslation('components/track/exercise-community-solutions-list')
  return (
    <div className="flex flex-col gap-8">
      <h3 className="text-16 font-semibold mb-2">
        {t('exerciseTagFilter.exerciseTagFilterGroup.filterBy', { groupName })}
      </h3>

      {tagGroup.map((tagName, index) => (
        <Checkbox
          key={`${tagName}_${index}`}
          checked={checkedTags.indexOf(tagName) !== -1}
          setChecked={(isChecked) => {
            handleToggleTag(tagName, isChecked)
          }}
          className="leading-160 text-16"
        >
          {capitalize(tagName.split(':')[1])}
        </Checkbox>
      ))}
    </div>
  )
}

// === end file ===

// === file: ../components/track/exercise-community-solutions-list/exercise-tag-filter/ExerciseTagFilter.tsx ===
import React from 'react'
import { usePanel } from '@/hooks/use-panel'
import { Icon } from '@/components/common'
import { ExerciseTagFilterGroup } from './ExerciseTagFilterGroup'
import { useExerciseTagFilter } from './useExerciseTagFilter'
import type { Tags } from './ExerciseTagFilter.types'
import type { Request } from '@/hooks/request-query'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function ExerciseTagFilter({
  tags,
  setQuery,
  request,
}: {
  tags: Tags
  setQuery: (query: any) => void
  request: Request
}): JSX.Element | null {
  const { t } = useAppTranslation('components/track/exercise-community-solutions-list')
  if (Object.keys(tags).length === 0) return null

  const { buttonAttributes, panelAttributes, setOpen, open } = usePanel({
    placement: 'bottom-start',
    arrow: true,
  })

  const { tagState, handleToggleTag } = useExerciseTagFilter({
    setQuery,
    request,
  })

  return (
    <div className="c-single-select md:w-[150px] w-100">
      <button
        type="button"
        {...buttonAttributes}
        onClick={() => setOpen((o) => !o)}
      >
        <div className="value">
          {t('exerciseTagFilter.exerciseTagFilter.filter')}
          {showSelectedTagCount(tagState)}
        </div>
        <Icon
          icon="chevron-down"
          alt="Click to change"
          className="action-icon"
        />
      </button>
      {open ? (
        <div
          {...panelAttributes}
          className="--options flex flex-wrap gap-24 w-[200%] mt-8 !p-16"
        >
          {Object.keys(tags).map((tagCategory: string, index) => {
            return (
              <ExerciseTagFilterGroup
                groupName={tagCategory}
                tagGroup={tags[tagCategory]}
                key={`${tagCategory}_${index}`}
                handleToggleTag={handleToggleTag}
                checkedTags={request.query?.tags || tagState}
              />
            )
          })}
        </div>
      ) : null}
    </div>
  )
}

function showSelectedTagCount(selectedTags: string[]) {
  const { t } = useAppTranslation('components/track/exercise-community-solutions-list')
  const length = selectedTags.length
  if (length === 0) return null

  return t('exerciseTagFilter.exerciseTagFilter.selectedTagsCount', { length })
}

// === end file ===
```