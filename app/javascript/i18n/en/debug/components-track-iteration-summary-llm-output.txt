```ts
// i18n
export default {
  "submissionMethodIcon.submittedViaCLI": "Submitted via CLI",
  "submissionMethodIcon.submittedViaEditor": "Submitted via Editor",
  "outOfDateNotice.outdated": "Outdated",
  "analysisStatusSummary.automatedComments": "Automated comments",
  "analysisStatusSummary.essential": "Essential",
  "analysisStatusSummary.actionable": "Actionable",
  "analysisStatusSummary.other": "Other"
}

// modified_files
// === file: ../components/track/iteration-summary/SubmissionMethodIcon.tsx ===
// i18n-key-prefix: submissionMethodIcon
// i18n-namespace: components/track/iteration-summary
import React from 'react'
import { SubmissionMethod } from '../../types'
import { Icon } from '../../common/Icon'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function SubmissionMethodIcon({
  submissionMethod,
}: {
  submissionMethod: SubmissionMethod
}) {
  const { t } = useAppTranslation('components/track/iteration-summary')
  switch (submissionMethod) {
    case SubmissionMethod.CLI:
      return (
        <Icon
          icon="cli"
          alt={t('submissionMethodIcon.submittedViaCLI')}
          className="--icon --upload-method-icon"
        />
      )
    case SubmissionMethod.API:
      return (
        <Icon
          icon="editor"
          alt={t('submissionMethodIcon.submittedViaEditor')}
          className="--icon --upload-method-icon"
        />
      )
    default:
      return null
  }
}
// === end file ===

// modified_files
// === file: ../components/track/iteration-summary/ProcessingStatusButton.tsx ===
// i18n-key-prefix: processingStatusButton
// i18n-namespace: components/track/iteration-summary
import React from 'react'
import { Iteration, IterationStatus } from '../../types'
import { ProcessingStatusSummary } from '../../common/ProcessingStatusSummary'
import { TestRunStatusButton } from './TestRunStatusButton'

export const ProcessingStatusButton = ({
  iteration,
}: {
  iteration: Iteration
}): JSX.Element => {
  switch (iteration.status) {
    case IterationStatus.DELETED:
      return <></>
    case IterationStatus.TESTS_FAILED:
    case IterationStatus.ESSENTIAL_AUTOMATED_FEEDBACK:
    case IterationStatus.ACTIONABLE_AUTOMATED_FEEDBACK:
    case IterationStatus.NON_ACTIONABLE_AUTOMATED_FEEDBACK:
    case IterationStatus.CELEBRATORY_AUTOMATED_FEEDBACK:
    case IterationStatus.NO_AUTOMATED_FEEDBACK:
      return (
        <TestRunStatusButton endpoint={iteration.links.testRun}>
          <ProcessingStatusSummary iterationStatus={iteration.status} />
        </TestRunStatusButton>
      )
    default:
      return <ProcessingStatusSummary iterationStatus={iteration.status} />
  }
}
// === end file ===

// modified_files
// === file: ../components/track/iteration-summary/TestRunStatusButton.tsx ===
// i18n-key-prefix: testRunStatusButton
// i18n-namespace: components/track/iteration-summary
import React, { useState } from 'react'
import { TestRunModal } from '../../modals/TestRunModal'

export const TestRunStatusButton = ({
  endpoint,
  children,
  ...props
}: React.ButtonHTMLAttributes<HTMLButtonElement> & {
  endpoint: string
}): JSX.Element => {
  const [open, setOpen] = useState(false)

  return (
    <React.Fragment>
      <button type="button" onClick={() => setOpen(!open)} {...props}>
        {children}
      </button>
      <TestRunModal
        open={open}
        onClose={() => setOpen(false)}
        endpoint={endpoint}
      />
    </React.Fragment>
  )
}
// === end file ===

// modified_files
// === file: ../components/track/iteration-summary/OutOfDateNotice.tsx ===
// i18n-key-prefix: outOfDateNotice
// i18n-namespace: components/track/iteration-summary
import React from 'react'
import { GraphicalIcon } from '../../common'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const OutOfDateNotice = (): JSX.Element => {
  const { t } = useAppTranslation('components/track/iteration-summary')
  return (
    <div className="--out-of-date">
      <GraphicalIcon icon="warning" />
      <div className="--status">{t('outOfDateNotice.outdated')}</div>
    </div>
  )
}
// === end file ===

// modified_files
// === file: ../components/track/iteration-summary/AnalysisStatusSummary.tsx ===
// i18n-key-prefix: analysisStatusSummary
// i18n-namespace: components/track/iteration-summary
import React from 'react'
import { Icon } from '@/components/common'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function AnalysisStatusSummary({
  numEssentialAutomatedComments,
  numActionableAutomatedComments,
  numNonActionableAutomatedComments,
}: {
  numEssentialAutomatedComments: number
  numActionableAutomatedComments: number
  numNonActionableAutomatedComments: number
}): JSX.Element | null {
  const { t } = useAppTranslation('components/track/iteration-summary')
  if (
    numEssentialAutomatedComments === 0 &&
    numActionableAutomatedComments === 0 &&
    numNonActionableAutomatedComments === 0
  ) {
    return null
  }

  return (
    <div className="--feedback" role="status" aria-label="Analysis status">
      <Icon icon="automation" alt={t('analysisStatusSummary.automatedComments')} />

      {numEssentialAutomatedComments > 0 ? (
        <div className="--count --essential" title={t('analysisStatusSummary.essential')}>
          {numEssentialAutomatedComments}
        </div>
      ) : null}

      {numActionableAutomatedComments > 0 ? (
        <div className="--count --actionable" title={t('analysisStatusSummary.actionable')}>
          {numActionableAutomatedComments}
        </div>
      ) : null}

      {numNonActionableAutomatedComments > 0 ? (
        <div className="--count --non-actionable" title={t('analysisStatusSummary.other')}>
          {numNonActionableAutomatedComments}
        </div>
      ) : null}
    </div>
  )
}
// === end file ===
```