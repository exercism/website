```ts
// i18n
export default {
  "dashboardTabs.needsTagging": "Needs tagging",
  "dashboardTabs.needsChecking": "Needs checking",
  "dashboardTabs.needsCheckingAdmin": "Needs checking (admin)",
  "taggableCodeList.noTrainingData": "No training data",
  "taggableCodeList.oopsSomethingWentWrong": "Oops! Something went wrong!",
  "taggableCodeList.retry": "Retry",
  "dashboardHeader.filterExerciseName": "Filter exercise name"
}

// modified_files
// === file: ../components/training-data/dashboard/DashboardTabs.tsx ===
import React from 'react'
import { StatusTab } from '@/components/mentoring/inbox/StatusTab'
import { TrainingDataStatus, TrainingDataStatuses } from './Dashboard.types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const STATUS_MAP = {
  needs_tagging: 'Needs tagging',
  needs_checking: 'Needs checking',
  needs_checking_admin: 'Needs checking (admin)',
}

export function DashboardTabs({
  setStatus,
  currentStatus,
  statuses,
}: {
  setStatus: (status: TrainingDataStatus) => void
  currentStatus: TrainingDataStatus
  statuses: TrainingDataStatuses
}) {
  const { t } = useAppTranslation('components/training-data/dashboard')
  return (
    <div className="tabs">
      {statuses.map((status) => {
        return (
          <StatusTab<TrainingDataStatus>
            key={status}
            status={status}
            currentStatus={currentStatus}
            setStatus={setStatus}
          >
            {t(`dashboardTabs.${status}`)}
          </StatusTab>
        )
      })}
    </div>
  )
}

// === end file ===

// === file: ../components/training-data/dashboard/TaggableCodeList.tsx ===
import React from 'react'
import {
  QueryObserverResult,
  QueryStatus,
  RefetchOptions,
  RefetchQueryFilters,
} from '@tanstack/react-query'
import { Pagination, Loading, GraphicalIcon } from '@/components/common'
import { TaggableCode } from './TaggableCode'
import { scrollToTop } from '@/utils/scroll-to-top'
import { TrainingDataRequestAPIResponse } from './Dashboard.types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const TaggableCodeList = ({
  resolvedData,
  refetch,
  status,
  setPage,
}: {
  resolvedData: TrainingDataRequestAPIResponse | undefined
  status: QueryStatus
  setPage: (page: number) => void
  refetch: <TPageData extends readonly unknown[]>(
    options?: (RefetchOptions & RefetchQueryFilters<TPageData>) | undefined
  ) => Promise<QueryObserverResult<TrainingDataRequestAPIResponse, unknown>>
}): JSX.Element => {
  const { t } = useAppTranslation('components/training-data/dashboard')
  const noResults = resolvedData && resolvedData.results.length === 0

  const SuccessContent = () => {
    if (noResults)
      return (
        <div className="--no-results">
          <GraphicalIcon icon="mentoring" category="graphics" />
          <h3>{t('taggableCodeList.noTrainingData')}</h3>
        </div>
      )
    return (
      <div className="--conversations">
        {resolvedData && (
          <React.Fragment>
            {resolvedData.results.map((code, key) => (
              <TaggableCode key={key} code={code} />
            ))}
            {resolvedData.meta.totalPages > 1 && (
              <footer>
                <Pagination
                  disabled={resolvedData === undefined}
                  current={resolvedData.meta.currentPage}
                  total={resolvedData.meta.totalPages}
                  setPage={(p) => {
                    setPage(p)
                    scrollToTop()
                  }}
                />
              </footer>
            )}
          </React.Fragment>
        )}
      </div>
    )
  }

  switch (status) {
    case 'pending':
      return <Loading />
    case 'error':
      return <SomethingWentWrongWithRefetch refetch={refetch} />
    case 'success':
      return <SuccessContent />
  }
}

// TODO: Turn this into a common/global component
function SomethingWentWrongWithRefetch({ refetch }) {
  const { t } = useAppTranslation('components/training-data/dashboard')
  return (
    <div className="flex flex-col gap-32 p-32 place-items-center">
      <h3 className="text-h3">{t('taggableCodeList.oopsSomethingWentWrong')}</h3>
      <GraphicalIcon icon="error-404" width={50} height={50} />
      <button
        className="btn-m btn-default"
        onClick={refetch}
        aria-label="Retry"
      >
        {t('taggableCodeList.retry')}
      </button>
    </div>
  )
}

// === end file ===

// === file: ../components/training-data/dashboard/TaggableCode.tsx ===
import React from 'react'
import { TrackIcon, ExerciseIcon, GraphicalIcon } from '@/components/common'
import { TrainingData } from './Dashboard.types'

export const TaggableCode = ({ code }: { code: TrainingData }): JSX.Element => {
  return (
    <a className="--code-sample " href={code.links.edit}>
      <TrackIcon title={code.track.title} iconUrl={code.track.iconUrl} />
      <ExerciseIcon
        title={code.exercise.title}
        iconUrl={code.exercise.iconUrl}
      />
      <div className="--info">
        <div className="--handle">{code.exercise.title}</div>
      </div>
      <GraphicalIcon icon="chevron-right" className="action-icon" />
    </a>
  )
}

// === end file ===

// === file: ../components/training-data/dashboard/DashboardHeader.tsx ===
import React from 'react'
import { TextFilter } from '@/components/mentoring/TextFilter'
import { DashboardHeaderProps } from './Dashboard.types'
import { TrackList } from '@/components/mentoring/inbox/TrackList'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export function DashboardHeader({
  tracks,
  request,
  setTrack,
  criteria,
  setCriteria,
}: DashboardHeaderProps) {
  const { t } = useAppTranslation('components/training-data/dashboard')
  return (
    <header className="c-search-bar inbox-header">
      <div className="c-track-filter">
        <TrackList
          tracks={tracks}
          setTrack={setTrack}
          value={request.query.trackSlug || null}
        />
      </div>
      <TextFilter
        filter={criteria}
        setFilter={setCriteria}
        id="discussion-filter"
        placeholder={t('dashboardHeader.filterExerciseName')}
      />
    </header>
  )
}

// === end file ===
```