```ts
// i18n
export default {
  "......components.mentoring.session.iterationView.iterationDeleted": "This iteration has been deleted",
  "......components.mentoring.session.linkButton.conversationLinked": "Your code and mentoring conversation are currently linked.",
  "......components.mentoring.session.linkButton.conversationLinkedDescription": "This means as you navigate to another iteration, the mentoring conversation will follow and vice versa.",
  "......components.mentoring.session.linkButton.clickToUnlink": "Click or tap on the icon to unlink.",
  "......components.mentoring.session.linkButton.conversationUnlinked": "Your code and mentoring conversation are currently unlinked.",
  "......components.mentoring.session.linkButton.conversationUnlinkedDescription": "This means the left and right panes operate independently.",
  "......components.mentoring.session.linkButton.clickToLink": "Click or tap on the icon to link.",
  "......components.mentoring.session.mentoringNote.mentoringDocs": "mentoring docs",
  "......components.mentoring.session.mentoringNote.moreInformation": "for more information.",
  "......components.mentoring.session.mentorNotes.noNotesYet": "This {{guidanceType}} doesn't have any mentoring notes yet. Mentoring notes are written by our community. Please help get them started for this exercise by sending a {{prLink}}.",
  "......components.mentoring.session.mentorNotes.improveNotes": "Improve these notes",
  "......components.mentoring.session.mentorNotes.communityNotes": "These notes are written by our community. Please help improve them by sending a {{prLink}}.",
  "......components.mentoring.session.previousSessionsLink.opensInModal": "Opens in modal",
  "......components.mentoring.session.previousSessionsLink.seePreviousSessions": "See {{numPrevious}} previous {{sessions}}"
}

// modified_files
// === file: ../components/mentoring/session/IterationView.tsx ===
import React from 'react'
import { Iteration, IterationStatus, MentorDiscussion } from '../../types'
import { IterationsList } from './IterationsList'
import { FilePanel } from './FilePanel'
import { IterationHeader } from './iteration-view/IterationHeader'
import { usePaginatedRequestQuery } from '../../../hooks/request-query'
import { FetchingBoundary } from '../../FetchingBoundary'
import { File, TestFile } from '../../types'
import { ResultsZone } from '../../ResultsZone'
import { LinkButton } from './LinkButton'
import { useAppTranslation } from '@/i18n/useAppTranslation'

const DEFAULT_ERROR = new Error('Unable to load files')

export const IterationView = ({
  iterations,
  instructions,
  testFiles,
  currentIteration,
  onClick,
  language,
  indentSize,
  isOutOfDate,
  isLinked,
  setIsLinked,
  discussion,
  downloadCommand,
}: {
  iterations: readonly Iteration[]
  instructions?: string
  testFiles?: readonly TestFile[]
  currentIteration: Iteration
  onClick: (iteration: Iteration) => void
  language: string
  indentSize: number
  isOutOfDate: boolean
  isLinked: boolean
  setIsLinked: (linked: boolean) => void
  discussion?: MentorDiscussion
  downloadCommand: string
}): JSX.Element => {
  const { t } = useAppTranslation('session')
  /* TODO: (required) Don't do this if currentIteration.links.files is null */
  const {
    data: resolvedData,
    error,
    status,
    isFetching,
  } = usePaginatedRequestQuery<{
    files: readonly File[]
  }>([currentIteration.links.files], {
    endpoint: currentIteration.links.files,
    options: {},
  })

  return (
    <React.Fragment>
      <IterationHeader
        iteration={currentIteration}
        isOutOfDate={isOutOfDate}
        downloadCommand={downloadCommand}
        files={resolvedData?.files}
      />
      {currentIteration.status == IterationStatus.DELETED ? (
        <div className="deleted">{t('......components.mentoring.session.iterationView.iterationDeleted')}</div>
      ) : (
        <ResultsZone isFetching={isFetching}>
          <FetchingBoundary
            error={error}
            status={status}
            defaultError={DEFAULT_ERROR}
          >
            {resolvedData ? (
              <FilePanel
                files={resolvedData.files}
                language={language}
                indentSize={indentSize}
                instructions={instructions}
                testFiles={testFiles}
              />
            ) : null}
          </FetchingBoundary>
        </ResultsZone>
      )}
      {iterations.length > 1 ? (
        <footer className="c-iterations-footer">
          <IterationsList
            iterations={iterations}
            onClick={onClick}
            current={currentIteration}
          />
          {discussion ? (
            <LinkButton value={isLinked} setValue={setIsLinked} />
          ) : null}
        </footer>
      ) : null}
    </React.Fragment>
  )
}

// === end file ===
// === file: ../components/mentoring/session/LinkButton.tsx ===
import React from 'react'
import { Icon } from '../../common/Icon'
import { GenericTooltip } from '../../misc/ExercismTippy'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const LinkButton = ({
  value,
  setValue,
}: {
  value: boolean
  setValue: (settings: boolean) => void
}): JSX.Element => {
  const { t } = useAppTranslation('session')
  const classNames = ['link-button btn-enhanced', value ? 'linked' : 'unlinked']

  const content = value ? (
    <div className="c-mentoring-link-tooltip">
      <h3>{t('......components.mentoring.session.linkButton.conversationLinked')}</h3>
      <p>
        {t('......components.mentoring.session.linkButton.conversationLinkedDescription')}
        <strong>{t('......components.mentoring.session.linkButton.clickToUnlink')}</strong>
      </p>
    </div>
  ) : (
    <div className="c-mentoring-link-tooltip">
      <h3>{t('......components.mentoring.session.linkButton.conversationUnlinked')}</h3>
      <p>
        {t('......components.mentoring.session.linkButton.conversationUnlinkedDescription')}
        <strong>{t('......components.mentoring.session.linkButton.clickToLink')}</strong>
      </p>
    </div>
  )

  return (
    <GenericTooltip content={content}>
      <button className={classNames.join(' ')} onClick={() => setValue(!value)}>
        <Icon
          icon={value ? 'mentoring-linked' : 'mentoring-unlinked'}
          alt="Link conversation"
        />
      </button>
    </GenericTooltip>
  )
}

// === end file ===
// === file: ../components/mentoring/session/MentoringNote.tsx ===
import React from 'react'
import { useAppTranslation } from '@/i18n/useAppTranslation'

type Links = {
  mentoringDocs: string
}

export const MentoringNote = ({ links }: { links: Links }): JSX.Element => {
  const { t } = useAppTranslation('session')
  return (
    <div className="note">
      Check out our{' '}
      <a href={links.mentoringDocs} target="_blank" rel="noreferrer">
        {t('......components.mentoring.session.mentoringNote.mentoringDocs')}
      </a>{' '}
      {t('......components.mentoring.session.mentoringNote.moreInformation')}
    </div>
  )
}

// === end file ===
// === file: ../components/mentoring/session/MentorNotes.tsx ===
import React from 'react'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const MentorNotes = ({
  notes,
  improveUrl,
  guidanceType,
}: {
  notes?: string
  improveUrl: string
  guidanceType: 'track' | 'exercise' | 'representer'
}): JSX.Element => {
  const { t } = useAppTranslation('session')
  const prLink = (
    <a href={improveUrl} target="_blank" rel="noreferrer">
      Pull Request on GitHub
    </a>
  )

  if (!notes) {
    return (
      <p className="text-p-base">
        {t('......components.mentoring.session.mentorNotes.noNotesYet', { guidanceType: guidanceType, prLink: prLink })}
      </p>
    )
  }

  return (
    <React.Fragment>
      <div
        className="c-textual-content --small"
        dangerouslySetInnerHTML={{ __html: notes }}
      />
      <hr className="c-divider --small my-16" />
      <h3 className="text-h5 mb-4">{t('......components.mentoring.session.mentorNotes.improveNotes')}</h3>
      <p className="text-p-base">
        {t('......components.mentoring.session.mentorNotes.communityNotes', { prLink: prLink })}
      </p>
    </React.Fragment>
  )
}

// === end file ===
// === file: ../components/mentoring/session/PreviousSessionsLink.tsx ===
import React, { useState } from 'react'
import { Icon } from '../../common/Icon'
import pluralize from 'pluralize'
import { PreviousMentoringSessionsModal } from '../../modals/PreviousMentoringSessionsModal'
import { Student } from '../../types'
import { useAppTranslation } from '@/i18n/useAppTranslation'

export const PreviousSessionsLink = ({
  student,
  setStudent,
}: {
  student: Student
  setStudent: (student: Student) => void
}): JSX.Element | null => {
  const { t } = useAppTranslation('session')
  const [open, setOpen] = useState(false)

  if (student.numDiscussionsWithMentor < 2) {
    return null
  }

  const numPrevious = student.numDiscussionsWithMentor - 1

  return (
    <React.Fragment>
      <button
        type="button"
        className="previous-sessions"
        onClick={() => setOpen(true)}
      >
        {t('......components.mentoring.session.previousSessionsLink.seePreviousSessions', { numPrevious: numPrevious, sessions: pluralize('session', numPrevious) })}
        <Icon icon="modal" alt={t('......components.mentoring.session.previousSessionsLink.opensInModal')} />
      </button>
      {open ? (
        <PreviousMentoringSessionsModal
          open={open}
          student={student}
          setStudent={setStudent}
          onClose={() => setOpen(false)}
        />
      ) : null}
    </React.Fragment>
  )
}

// === end file ===
```