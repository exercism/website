{
  "error": {
    "syntax": {
      "ExceededMaximumNumberOfParameters": "Sorry you can't have more than 255 parameters.",
      "InvalidAssignmentTarget": "Invalid assignment target.",
      "InvalidNumericVariableName": "Invalid variable name \"{{name}}\". Variable names cannot start with a number.",
      "InvalidTemplateLiteral": "Invalid template literal.",
      "MissingBacktickToTerminateTemplateLiteral": "Missing backtick ('`') to terminate template literal.",
      "MissingConditionAfterIf": "Did you forget to add a condition to your if statement?",
      "MissingCommaBetweenParameters": "Did you forget to add a command after the `{{parameter}}` parameter?",
      "MissingColonAfterThenBranchOfTernaryOperator": "Expect ':' after then branch of ternary operator.",
      "MissingConstantName": "Expect constant name.",
      "MissingDoToStartBlock": "Are you missing a `do` to start the {{type}} body?",
      "MissingDoubleQuoteToStartString": "Did you forget the start quote for the \"{{string}}\" string?",
      "MissingDoubleQuoteToTerminateString": "Did you forget the end quote for the \"{{string}}\" string?",
      "MissingEndAfterBlock": "Are you missing an `end` to finish the {{type}} body?",
      "MissingEndOfLine": "We didn't expect `{{current}}` to appear on this line after the `{{previous}}`. {{suggestion}}",
      "MissingExpression": "Expect expression.",
      "MissingFieldNameOrIndexAfterLeftBracket": "Expect field name or index after '['.",
      "MissingFunctionName": "Did you forget to give your function a name?",
      "MissingLeftBraceToStartBody": "Expected '{' to start {{type}} body.",
      "MissingLeftBraceToStartForeachBody": "Expected '{' to start 'foreach' body",
      "MissingLeftParenthesisAfterForeach": "Expected '(' after 'foreach'",
      "MissingLeftParenthesisAfterFunctionCall": "Did you forget the start parenthesis when trying to call the {{function}} function?",
      "MissingLeftParenthesisAfterFunctionName": "Expect '(' after function name.",
      "MissingLeftParenthesisBeforeIfCondition": "Expect '(' before if condition.",
      "MissingLeftParenthesisAfterWhile": "Expected '(' after 'while'",
      "MissingLetInForeachCondition": "Expected 'let' in foreach condition",
      "MissingOfAfterElementNameInForeach": "Expected 'of' after element name in 'foreach'.",
      "MissingParameterName": "Did you forget to add a parameter after `with`?",
      "MissingRightBraceAfterBlock": "Expect '}' after block.",
      "MissingRightBraceAfterMapElements": "Expect '}' after map elements.",
      "MissingRightBraceToTerminatePlaceholder": "Missing right brace ('}') to terminate placeholder.",
      "MissingRightBracketAfterFieldNameOrIndex": "Expect ']' after field name or index",
      "MissingRightBracketAfterListElements": "Expect ']' after list elements.",
      "MissingRightParenthesisAfterFunctionCall": "Did you forget the end parenthesis when trying to call the {{function}} function?",
      "MissingRightParenthesisAfterDoWhileCondition": "Expected ')' after 'do/while' condition",
      "MissingRightParenthesisAfterExpression": "Expect ')' after expression.",
      "MissingRightParenthesisAfterExpressionWithPotentialTypo": "Do you have a typo here? Did you mean `{{potential}}` instead of `{{actual}}`?",
      "MissingRightParenthesisAfterForeachElement": "Expected ')' after 'foreach' element",
      "MissingRightParenthesisAfterIfCondition": "Expect ')' after if condition.",
      "MissingRightParenthesisAfterParameters": "Expect ')' after parameters.",
      "MissingRightParenthesisAfterWhileCondition": "Expected ')' after 'while' condition",
      "MissingWithBeforeParameters": "Did you forget the `with` keyword before your parameters?",
      "MissingStringAsKey": "Expect string as key.",
      "MissingToAfterVariableNameToInitializeValue": "Did you forget to add the `to` after `{{name}}`?",
      "MissingVariableName": "Expect variable name.",
      "MissingTimesInRepeat": "Did you forget to write `times` after the number of times you want to repeat?",
      "DuplicateParameterName": "Did you accidently use the name `{{parameter}}` twice in your function parameters.",
      "MissingWhileBeforeDoWhileCondition": "Expected 'while' to start 'while' condition",
      "NumberContainsAlpha": "A number cannot contain letters. Did you mean `{{suggestion}}`?",
      "NumberEndsWithDecimalPoint": "A number cannot end with a decimal point. Did you mean `{{suggestion}}`?",
      "NumberStartsWithZero": "A number cannot start with a zero. Did you mean `{{suggestion}}`?",
      "NumberWithMultipleDecimalPoints": "A number can only have one decimal point. Did you mean `{{suggestion}}`?",
      "UnknownCharacter": "Unknown character: '{{character}}'.",
      "UnknownCharacterEquals": "We don't use the equals sign ('=') in JikiScript. Use `to` in set statements or `equals` in comparisons",
      "UnexpectedElseWithoutIf": "We can't work out which if statement this `else` belongs to. Did you forget to add an `if` statement before this `else`?",
      "UnexpectedLiteralExpressionAfterIf": "Did you forget to compare to things? In JikiScript the comparison (`is`, `equals`, `>`, etc are always required).",
      "UnexpectedSpaceInIdentifier": "Did you accidently put a space in the middle of a variable name?",
      "UnexpectedVariableExpressionAfterIf": "Did you forget to compare to things? In JikiScript the comparison (`is`, `equals`, `>`, etc are always required).",
      "UnexpectedVariableExpressionAfterIfWithPotentialTypo": "We were expecting some sort of comparison here. Did you mean to type `{{potential}}` instead of `{{actual}}`?"
    },
    "semantic": {
      "CannotAssignToConstant": "Cannot re-assign value of constant.",
      "DuplicateVariableName": "Already a variable with this name in this scope.",
      "InvalidPostfixOperand": "Invalid left-hand side for update expression.",
      "TopLevelReturn": "Can't return from top-level code.",
      "VariableUsedInOwnInitializer": "Can't read local variable in its own initializer"
    },
    "runtime": {
      "CouldNotEvaluateFunction": "Could not evaluate function",
      "CouldNotFindFunctionWithName": "Could not find function with name.",
      "CouldNotFindFunctionWithNameSuggestion": "We don't know what `{{name}}` means. Maybe you meant to use the `{{suggestion}}` function instead?",
      "CouldNotFindValueWithName": "Could not find value with name '{{name}}'.",
      "InfiniteLoop": "Your code ran for too long and we stopped it to prevent an infinite loop.",
      "InvalidBinaryExpression": "Invalid binary expression",
      "InvalidExpression": "Invalid expression",
      "InvalidIndexGetterTarget": "Can't index object, only dictionaries and arrays can be indexed'.",
      "InvalidIndexSetterTarget": "Can only set dictionaries and arrays via indexer.",
      "TooFewArguments": "Did you forget an argument? This function expects to be called with {{arity}} arguments but you called it with {{numberOfArgs}}.",
      "TooManyArguments": "Did you add an extra argument? This function expects to be called with {{arity}} arguments but you called it with {{numberOfArgs}}.",
      "InvalidNumberOfArgumentsWithOptionalArguments": "Expected between {{minArity} and {{maxArity}} arguments but got {{numberOfArgs}}.",
      "InvalidUnaryOperator": "Invalid unary operator",
      "LogicError": "{{message}}",
      "MissingParenthesesForFunctionCall": "Did you forget the parenthesis when trying to call the function?",
      "NonCallableTarget": "Can only call functions.",
      "OperandMustBeBoolean": "Operand must be a boolean.",
      "OperandMustBeNumber": "Operand must be a number.",
      "OperandsMustBeNumber": "Operands must be numbers.",
      "OperandsMustBeTwoNumbersOrTwoStrings": "Operands must be two numbers or two strings.",
      "RepeatCountMustBeGreaterThanZero": "You must repeat things at least once.",
      "RepeatCountMustBeLessThanOneThousand": "The most times you can repeat things is 1000.",
      "RepeatCountMustBeNumber": "repeat can only take a number as its argument.",
      "VariableAlreadyDeclared": "A variable with this name has already been created. Did you mean to use the <code>change</code> keyword?"
    },
    "disabledLanguageFeature": {
      "ExcludeListViolation": "Usage of '{{tokenType}}' is not allowed`.",
      "IncludeListViolation": "Usage of '{{tokenType}}' is not allowed`."
    }
  }
}
