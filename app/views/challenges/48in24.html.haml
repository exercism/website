- week = (([Time.zone.today, Date.new(2024, 12, 15)].min - Date.new(2024, 1, 15)) / 7).ceil
- live_exercises = @exercises.select { |e| e.week <= week }
- tracks = Track.where(slug: live_exercises.flat_map(&:featured_tracks)).pluck(:slug, :title).to_h

- featured_exercise = live_exercises.last
- if featured_exercise
  - generic_exercise = GenericExercise.for(featured_exercise.slug)
  - featured_tracks = featured_exercise.featured_tracks.filter_map { |slug| tracks[slug] ? [slug, tracks[slug]] : nil }.sort
- num_placeholders = @exercises.size - live_exercises.size

#challenge-48in24-page
  %section.top-section
    .lg-container
      .flex.xl:flex-row.flex-col.xl:items-start.items-center
        .xl:mr-auto{ class: 'max-w-[860px]' }
          .font-semibold.leading-150.flex.items-center.mb-4{ style: 'color: var(--colorPurpleToBrightPurple)' }
            %span.emoji.mr-6 ðŸ“†
            - if featured_exercise
              = t('.top_section.week_of_challenge', week: week)
            - else
              = t('.top_section.starts_on')

          - if featured_exercise
            %h1.text-h1.mb-8= t('.top_section.featured_exercise.this_week_featuring', exercise_title: featured_exercise.title)
            %p.text-p-xlarge.mb-12
              = t('.top_section.featured_exercise.exploring_blurb', week: week, exercise_link: link_to(featured_exercise.title, generic_exercise_path(featured_exercise.slug), class: 'underline')).html_safe
            %p.text-p-large.mb-12= featured_exercise.learning_opportunity

            %p.text-p-large.mb-12
              = t('.top_section.featured_exercise.your_task', blurb: generic_exercise.blurb)
            %p.text-p-large.mb-12
              = t('.top_section.featured_exercise.featured_languages', languages: featured_tracks.map { |slug, title| link_to(title, track_exercise_path(slug, featured_exercise.slug), class: 'underline') }.to_sentence).html_safe

            - if generic_exercise.deep_dive_youtube_id
              .shadow-baseZ1.grid.md:grid-cols-2.grid-cols-1.gap-20.py-20.px-20.rounded-8.bg-backgroundColorB
                .flex-shrink
                  %h2.text-h4.mb-4= t('.top_section.featured_exercise.deep_dive.title')
                  %p.text-p-base.mb-8= generic_exercise.deep_dive_blurb
                  %p.text-p-base
                    = t('.top_section.featured_exercise.deep_dive.call_to_action')

                .rhs
                  %div{ class: 'w-[100%] md:max-w-[500px]' }
                    = render ReactComponents::Common::YoutubePlayer.new(generic_exercise.deep_dive_youtube_id, 'challenge#show')

            %h2.text-h3.mt-32.mb-6= t('.top_section.learn_from_others.title')
            %p.text-p-large.mb-12.c-highlight-links
              = t('.top_section.learn_from_others.blurb_1')
              = t('.top_section.learn_from_others.subscribe_channels', twitch_link: link_to("Twitch Channel", 'https://twitch.tv/exercismlive', class: 'underline'), youtube_link: link_to("YouTube Channel", 'https://www.youtube.com/exercism_videos?sub_confirmation=1', class: 'underline')).html_safe
              = t('.top_section.learn_from_others.schedule_info')

            %p.text-p-large
              = t('.top_section.join_conversation.blurb', forums_link: link_to('#48in24 tag on our forums', 'https://forum.exercism.org/c/exercism/48in24', class: 'underline'), discord_link: link_to('Discord Server', 'https://exercism.org/r/discord', class: 'underline'), hashtag: content_tag(:strong, '#48in24', class: 'font-semibold')).html_safe
          - else
            %h1.text-h1.mb-8= t('.top_section.challenge_not_started.title')
            %p.text-p-xlarge.mb-20
              = t('.top_section.challenge_not_started.blurb_1')
              = t('.top_section.challenge_not_started.blurb_2')
            %p.text-p-xlarge.mb-20
              = t('.top_section.challenge_not_started.email_notification')

            %h2.text-h3.mt-32.mb-4= t('.top_section.challenge_not_started.subscribe_call_to_action.title')
            %p.text-p-large.mb-12.c-highlight-links
              = t('.top_section.challenge_not_started.subscribe_call_to_action.blurb_1')
              = t('.top_section.challenge_not_started.subscribe_call_to_action.subscribe_channels', twitch_link: link_to("Twitch Channel", 'https://twitch.tv/exercismlive', class: 'underline'), youtube_link: link_to("YouTube Channel", 'https://www.youtube.com/exercism_videos?sub_confirmation=1', class: 'underline')).html_safe
              = t('.top_section.challenge_not_started.subscribe_call_to_action.schedule_info')

            %p.text-p-large
              = t('.top_section.challenge_not_started.subscribe_call_to_action.blurb', forums_link: link_to('#48in24 tag on our forums', 'https://forum.exercism.org/tag/48in24', class: 'underline'), discord_link: link_to('Discord Server', 'https://exercism.org/r/discord', class: 'underline'), hashtag: content_tag(:strong, '#48in24', class: 'font-semibold')).html_safe

          %h2.text-h3.mt-32.mb-6= t('.top_section.badges.title')
          %p.text-p-large.xl:mb-12.mb-24.c-highlight-links
            = t('.top_section.badges.blurb')

        .xl:ml-80{ class: 'xl:max-w-[450px] max-w-[860px]' }
          .bg-backgroundColorD.rounded-8.py-16.px-24.border-1.border-borderColor7
            .text-h4.mb-4= t('.sidebar.how_it_works.title')
            %p.xl:text-p-base.text-p-large.mb-12= t('.sidebar.how_it_works.explanation_intro')
            %ul.xl:text-p-base.text-p-large.mb-12
              %li
                = t('.sidebar.how_it_works.bronze_status', status_name: content_tag(:strong, t('general.bronze_label'), class: '!text-textColor1')).html_safe
              %li
                = t('.sidebar.how_it_works.silver_status', status_name: content_tag(:strong, t('general.silver_label'), class: '!text-textColor1')).html_safe
              %li
                = t('.sidebar.how_it_works.gold_status', status_name: content_tag(:strong, t('general.gold_label'), class: '!text-textColor1')).html_safe

            %p.text-p-base.mb-12= t('.sidebar.how_it_works.watch_video')
            = render ReactComponents::Common::YoutubePlayer.new('v6fMaOdUxSk', "challenge#show")

            %p.text-p-small.text-center.mt-20.bg-backgroundColorA.rounded-8.py-8.px-12.font-medium
              = t('.sidebar.how_it_works.track_progress_note')

          - if featured_exercise
            .bg-backgroundColorD.rounded-8.py-16.px-24.border-1.border-borderColor7.mt-24
              %h2.text-h4.mb-4= t('.sidebar.donate.title')
              %p.xl:text-p-base.text-p-large.mb-12
                = t('.sidebar.donate.blurb')
              = link_to t('.sidebar.donate.button'), donate_path, class: 'btn btn-primary'

  %article
    .md-container
      .flex.text-center.flex-col.items-center
        %h1.text-h1.mb-16= t('.progress_section.title')
        %p.text-p-xlarge
          = t('.progress_section.blurb_1')
        %p.text-p-large.cta
          = t('.progress_section.blurb_2')

      .grid.grid-cols-1.xl:grid-cols-4.lg:grid-cols-3.sm:grid-cols-2.gap-32.mx-auto.exercises
        - live_exercises.each do |exercise|
          - status = exercise.status.to_s.dasherize
          - num_completed_tracks = exercise.completed_tracks.count { |_, year| year == 2024 }
          .exercise{ class: status }
            = link_to generic_exercise_path(exercise.slug), class: 'info' do
              = image_tag "#{Exercism.config.website_icons_host}/exercises/#{exercise.slug}.svg", alt: "Icon of #{exercise.title}", class: "exercise-icon c-icon"
              .text-h3.mb-16= exercise.title
              %progress.progress-bar{ value: num_completed_tracks, max: 3 }
              - if num_completed_tracks > 2
                .count= t('.progress_section.exercise_card.completed_all_tracks', count: num_completed_tracks)
              - else
                .count= t('.progress_section.exercise_card.completed_some_tracks', count: num_completed_tracks)
            .featured
              .tracks
                - exercise.featured_tracks.map do |track_slug|
                  - completed = exercise.completed_tracks.key?(track_slug)
                  = link_to track_exercise_path(track_slug, exercise.slug), class: "track-icon #{completed ? 'completed' : ''}", title: t('.progress_section.exercise_card.track_icon_title', track_title: tracks[track_slug], completed_text: (completed ? t('general.completed_parenthetical') : '')) do
                    = image_tag "#{Exercism.config.website_icons_host}/tracks/#{track_slug}.svg", alt: "Icon of #{tracks[track_slug]}"

        - if num_placeholders.positive?
          - num_placeholders.times do
            .shadow-base.bg-backgroundColorA.rounded-8.flex.flex-col.items-center.justify-center.opacity-60{ class: 'min-h-[175px]' }
              .text-h0{ class: "opacity-[0.2]" } ?
