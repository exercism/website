#challenge-12in23-page
  %section.top-section
    .lg-container
      .flex
        .mr-auto{ class: 'max-w-[860px]' }
          .text-purple.font-semibold.leading-150.flex.items-center.mb-4
            %span.emoji.mr-6 ðŸ“†
            = t('.month_header')
          %h1.text-h1.mb-8= t('.title')
          %p.text-p-xlarge.mb-20
            = t('.intro_paragraph')

          .shadow-baseZ1.grid.grid-cols-2.gap-20.py-20.px-20.rounded-8.bg-white
            .flex-shrink
              %h2.text-h4.mb-2= t('.overview_video.heading')
              %p.text-p-base.mb-8
                = t('.overview_video.description_part1')
              %p.text-p-base
                = t('.overview_video.description_part2')

            .rhs
              %div{ class: 'w-[100%] max-w-[500px]' }
                = render ReactComponents::Common::YoutubePlayer.new('uIFGx1SDnWI', 'challenge#show')

          %h2.text-h3.mt-32.mb-2= t('.learn_earn.heading')
          %p.text-p-large.mb-20
            = t('.learn_earn.description')

          - tracks = Track.where(slug: %w[elixir fsharp clojure erlang haskell ocaml scala sml gleam])
          .grid.grid-cols-9.gap-12.mb-32
            - tracks.each do |track|
              = link_to track, class: 'rounded-12 shadow-base hover:shadow-baseZ1 bg-white flex flex-col p-12 text-center relative' do
                - if track.course?
                  .rounded-circle.bg-white.p-4.shadow-baseZ1{ class: 'absolute top-[-7px] right-[-7px]' }
                    = graphical_icon "concepts", css_class: 'w-[14px] h-[14px] filter-purple'
                = image_tag track.icon_url, class: 'mb-8'
                .text-h6= track.title.gsub("Standard ML", "SML")

          %p.text-p-large.mb-12
            = t('.recommended_challenges.intro')
          %ul.text-p-large.mb-12
            %li.mb-2
              = image_tag "#{Exercism.config.website_icons_host}/exercises/hamming.svg", class: "w-[25px] inline"
              %strong.font-semibold= t('.recommended_challenges.hamming_title')
              = t('.recommended_challenges.hamming_description')
            %li.mb-2
              = image_tag "#{Exercism.config.website_icons_host}/exercises/collatz-conjecture.svg", class: "w-[25px] inline"
              %strong.font-semibold= t('.recommended_challenges.collatz_conjecture_title')
              = t('.recommended_challenges.collatz_conjecture_description')
            %li.mb-2
              = image_tag "#{Exercism.config.website_icons_host}/exercises/robot-simulator.svg", class: "w-[25px] inline"
              %strong.font-semibold= t('.recommended_challenges.robot_simulator_title')
              = t('.recommended_challenges.robot_simulator_description')
            %li.mb-2
              = image_tag "#{Exercism.config.website_icons_host}/exercises/yacht.svg", class: "w-[25px] inline"
              %strong.font-semibold= t('.recommended_challenges.yacht_title')
              = t('.recommended_challenges.yacht_description')
            %li.mb-2
              = image_tag "#{Exercism.config.website_icons_host}/exercises/protein-translation.svg", class: "w-[25px] inline"
              %strong.font-semibold= t('.recommended_challenges.protein_translation_title')
              = t('.recommended_challenges.protein_translation_description')

          %h2.text-h3.mt-32.mb-4= t('.learn_from_others.heading')
          %p.text-p-large.mb-12
            = t('.learn_from_others.description', twitch_channel: link_to(t('.learn_from_others.twitch_channel_link'), 'https://twitch.tv/exercismlive', class: 'underline'), youtube_channel: link_to(t('.learn_from_others.youtube_channel_link'), 'https://www.youtube.com/exercism_videos?sub_confirmation=1', class: 'underline'))
            = t('.learn_from_others.schedule_note')

          %h2.text-h3.mt-32.mb-4= t('.join_conversation.heading')
          %ul.text-p-large.list-disc.pl-16
            %li.mb-4
              = t('.join_conversation.resource_list', resource_link: link_to(t('.join_conversation.resource_list_link'), "https://forum.exercism.org/t/the-definitive-guide-to-learning-functional-languages/3254"))
            %li.mb-4
              = t('.join_conversation.hashtag_note', tag_link: link_to(t('.join_conversation.hashtag_link'), "https://forum.exercism.org/tag/12in23"), hashtag_bold: t('.join_conversation.hashtag_bold'))
            %li.mb-4
              = t('.join_conversation.swag_note')

        .ml-80{ class: 'max-w-[450px]' }
          .bg-unnamed15.rounded-8.py-16.px-24.mb-24.border-1.border-borderColor7
            %h2.text-h4.mb-4= t('.streaming_schedule.heading')
            %p.text-p-base.mb-12
              = t('.streaming_schedule.description', twitch_channel: link_to(t('.streaming_schedule.twitch_channel_link'), 'https://twitch.tv/exercismlive', class: 'underline'))
              %strong.font-semibold= t('.streaming_schedule.all_times_utc')

            %ul.text-p-base.list-disc.pl-16
              - StreamingEvent.next_5.each do |event|
                %li.mb-4
                  .font-medium.text-textColor6.text-14.leading-100
                    = format_datetime(event.starts_at)
                  %strong.font-semibold.text-textColor2= event.title


          .bg-unnamed15.rounded-8.py-16.px-24.mb-24.border-1.border-borderColor7
            %h2.text-h4.mb-4= t('.how_it_works.heading')
            %p.text-p-base.mb-12
              = t('.how_it_works.description')
            .grid.grid-cols-2.gap-12
              = link_to "https://youtu.be/Svzev-9shKs", class: 'bg-white p-8 shadow-smZ1 rounded-5 relative' do
                = graphical_icon "video-play", css_class: '!absolute top-[40px] w-[30px] left-[50%] ml-[-15px]', style: "filter: var(--white-filter) drop-shadow(0px 0px 6px black)"
                = image_tag "https://assets.exercism.org/images/thumbnails/yt-introducing-12in23.jpg", alt: 'A video thumbnail', class: 'mb-8 block block w-fill rounded-5'
                .text-center.text-h6= t('.how_it_works.video1_title')

              = link_to "https://youtu.be/2refhxXqePI", class: 'bg-white p-8 shadow-smZ1 rounded-5 relative' do
                = graphical_icon "video-play", css_class: '!absolute top-[40px] w-[30px] left-[50%] ml-[-15px]', style: "filter: var(--white-filter) drop-shadow(0px 0px 6px black)"
                = image_tag "https://assets.exercism.org/images/thumbnails/yt-official-12in23-calendar.jpg", alt: 'A video thumbnail', class: 'mb-8 block w-fill rounded-5'
                .text-center.text-h6= t('.how_it_works.video2_title')

            %p.text-p-small.text-center.mt-20.bg-veryLightBlue.rounded-8.py-8.px-12.font-medium
              = t('.how_it_works.track_progress_note')

          .bg-unnamed15.rounded-8.py-16.px-24.border-1.border-borderColor7
            %h2.text-h4.mb-4= t('.donate.heading')
            %p.text-p-base.mb-12
              = t('.donate.description')
            = link_to t('.donate.button'), donate_path, class: 'btn btn-primary'

  %article
    .md-container
      .flex.text-center.flex-col.items-center
        %h1.text-h1.mb-16= t('.progress.heading')
        %p.text-p-xlarge
          = t('.progress.description_part1')
        %p.text-p-large.cta
          = t('.progress.description_part2')

      .grid.grid-cols-4.gap-32.mx-auto
        - @track_counts.each do |track_id, count|
          - track = @tracks[track_id]
          = link_to track_path(track), class: "relative text-center shadow-baseZ1 bg-white py-16 px-24 rounded-8 flex flex-col items-center border-2 #{count > 5 ? 'border-successColor' : 'border-transparent'}" do
            = image_tag track.icon_url, alt: '', class: "c-icon c-track-icon h-[48px] w-[48px] mb-8"
            .text-h4.mb-20= track.title
            - if count >= 5
              = icon "completed-check-circle", t('.progress.completed_badge'), width: 24, height: 24, css_class: "!absolute top-[-12px] right-[-12px]"
              .progress
              .count= t('.progress.exercises_completed', count: count)
            - else
              %progress.progress-bar{ value: count, max: 5 }
              .count= t('.progress.exercises_count', count: count)

        - num_placeholders = 12 - @track_counts.size
        - if num_placeholders.positive?
          - num_placeholders.times do
            .shadow-base.bg-white.rounded-8.flex.flex-col.items-center.justify-center{ class: 'min-h-[175px]' }
              .text-h0{ class: "opacity-[0.2]" } ?
