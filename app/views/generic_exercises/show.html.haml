- content_for :meta_title, t('.meta_title', ps_data_title: @ps_data.title)
- content_for :meta_description, t('.meta_description', ps_data_title: @ps_data.title)
- content_for :canonical_url, generic_exercise_url(@ps_data.slug)
- require_stylesheet "track"

#page-generic-exercise
  .header.mb-8.py-8
    .lg-container.flex.items-center.relative
      = exercise_icon @exercise, css_class: "self-start md:self-center w-[80px] h-[80px] md:w-[118px] md:h-[118px] mr-12 md:mr-24"
      .flex-grow
        %h1.text-h1.md:mb-2= @exercise.title
        .text-p-xlarge= @ps_data.blurb

  .lg-container
    .flex.flex-col.md:flex-row.gap-48
      .lhs.flex-grow
        - if @exercise.deep_dive_youtube_id.present?
          .mb-32.bg-backgroundColorA.shadow-lg.rounded-8.px-20.lg:px-32.py-20.lg:py-24
            .text-h3.mb-8= t('.deep_dive_section.title', exercise_title: @exercise.title)
            %p.text-p-large.mb-16= @exercise.deep_dive_blurb
            %div{ class: 'w-[100%]' }
              = render ReactComponents::Common::YoutubePlayer.new(@exercise.deep_dive_youtube_id, 'generic_exercise')

        %section.instructions.px-20.lg:px-32.py-20.lg:py-24
          .text-h3.mb-12= t('.instructions_section.title')
          .c-textual-content.--large
            .border-b-1.border-borderColor5{ class: "!pb-8 !mb-32" }
              = raw @ps_data.description_html

            - if @exercise.tutorial?
              %p.mb-20
                = t('.instructions_section.intro_video_text')
                = vimeo_embed("853440496?h=6abbdfc68f")

            - source = @ps_data.source
            - source_url = @ps_data.source_url
            - if source.present? || source_url.present?
              .source
                %hr.c-divider.--small
                %h3= t('.source_section.title')
                - if source.present? && source_url.present?
                  = external_link_to source, source_url
                - elsif source.present?
                  = source
                - else
                  = t('.source_section.explore_source', source_link: external_link_to(t('.source_section.source_link_text'), source_url))

      .flex-shrink-0{ class: "md:w-[33%]" }
        - if @featured_in_2024_languages
          .shadow-lg.bg-backgroundColorA.px-20.py-16.mb-24.rounded-8
            .flex.items-center.gap-16
              .lhs
                .text-h4.mb-2= t('.featured_in_2024_section.challenge_title')
                %p.xl:text-p-base.text-p-large
                  = t('.featured_in_2024_section.challenge_text_html', exercise_title: @exercise.title, challenge_link: link_to(t('.featured_in_2024_section.challenge_link_text'), challenge_path("48in24")), languages: @featured_in_2024_languages.map { |track| link_to track.title, track_exercise_path(track.slug, @exercise.slug) }.to_sentence.html_safe)
              = graphical_icon "challenge-48in24-gold-circle", width: 80, height: 80

        .text-h4.mb-2= t('.track_variants_section.title', exercise_title: @exercise.title, size: @track_variants.size)
        %p.xl:text-p-base.text-p-large.mb-20
          - if @num_completed_solutions.positive?
            = t('.track_variants_section.completed_languages', count: @num_completed_solutions)
          - else
            = t('.track_variants_section.not_yet_completed')

        %section.tracks.grid.grid-cols-1.lg:grid-cols-3.xl:grid-cols-4.gap-16
          - @track_variants.each do |exercise|
            - track = exercise.track
            - solution = @solutions[exercise.track_id]
            - if solution
              - css_class = solution.completed? ? "completed" : "in-progress"
            - else
              - css_class = 'not-started'
            = link_to track_exercise_path(track, exercise), class: css_class do
              = image_tag exercise.track.icon_url, class: 'track-icon'
              .font-medium.text-textColor1.text-16= track.title
