-# TODO: This can be cached against track.updated_at and track.num_contributors

%a{ name: "mentoring" }
%article.mentoring-article
  - unless user_track.mentoring_unlocked?
    .mentoring-locked-overlay
      .content
        = icon "lock-circle", t('.mentoring_locked_icon_alt')
        %h3= t('.unlock_mentoring', track_title: track.title)

  .lg-container
    %header.mentoring-header
      .lhs
        = graphical_icon(:mentoring, hex: true, css_class: "graphical-icon")
        .info
          %h2= t('.your_mentoring_slots.title')
          %p= t('.your_mentoring_slots.filled', count: user_track.num_used_mentoring_slots)
      .rhs
        %h3
          = t('.current_reputation.title')
          = render ViewComponents::Reputation.new(number_with_delimiter(current_user.reputation), size: :small, flashy: true)

        - if user_track.rep_for_next_mentoring_slot.nil?
          .max= t('.max_mentoring_slots')
        - else
          .c-progress
            .bar{ style: "width: #{user_track.percentage_to_next_mentoring_slot}%" }
            .unlock-icon
              = icon "unlock", t('.unlocked_icon_alt')

        - unless user_track.rep_for_next_mentoring_slot.nil?
          .info
            .next-slot
              = t('.next_slot_unlocks_at_html', reputation_amount: number_with_delimiter(user_track.rep_for_next_mentoring_slot))

          .info
            .next-slot
              = t('.or_text')
              = link_to t('.donate_to_exercism_link'), insiders_path, class: 'text-prominentLinkColor font-semibold'
              = t('.to_unlock_all_slots')

              = link_to t('.learn_more_link'), doc_path(:using, "product/reputation"), class: 'font-semibold'

  .lg-container.container
    .slots
      - user_track.active_mentoring_discussions.each do |discussion|
        = link_to track_exercise_mentor_discussion_path(track, discussion.exercise, discussion), class: "discussion c-mentor-discussion-widget" do
          = exercise_icon discussion.exercise
          .exercise-title= discussion.exercise.title
          .mentor
            = t('.mentor_discussion_with')
            = avatar(discussion.mentor)
            .name= discussion.mentor.name

          - if discussion.awaiting_student?
            .--turn= t('.your_turn_to_respond')

          - if discussion.mentor_finished? || discussion.timed_out?
            .--turn= t('.review_your_mentor')

          .--comments
            = graphical_icon :comment
            = t('.comments_count', count: discussion.posts.count)

      - user_track.pending_mentoring_requests.each do |request|
        = link_to track_exercise_mentor_request_path(track, request.exercise), class: "request" do
          = exercise_icon request.exercise
          .exercise-title= request.exercise.title
          %h4= t('.waiting_on_mentor')

      - user_track.num_available_mentoring_slots.times do
        = render ReactComponents::Student::RequestMentoringButton.new(track)

      - user_track.num_locked_mentoring_slots.times do
        .locked-slot
          = graphical_icon "lock"
          %h4= t('.mentoring_slot_locked')

    = render ViewComponents::ProminentLink.new(t('.learn_more_about_mentored_link'), doc_path(:using, "feedback/guide-to-being-mentored"))
