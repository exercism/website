{
  "title": "Triangle",
  "description": "Determine if a triangle is valid and, if so, its type based on side lengths.",
  "level": 4,
  "idx": 7,
  "tests_type": "io",
  "tasks": [
    {
      "name": "Invalid triangles",
      "tests": [
        {
          "slug": "invalid-equilateral-all-zero",
          "name": "Equilateral with all sides zero (0, 0, 0)",
          "description_html": "A triangle with all sides zero should return \"invalid\".",
          "function": "determine_triangle_type",
          "params": [0, 0, 0],
          "expected": "invalid"
        },
        {
          "slug": "isosceles-first-inequality",
          "name": "Isosceles with invalid side lengths (1, 1, 3)",
          "description_html": "A triangle with too short sides should return \"invalid\".",
          "function": "determine_triangle_type",
          "params": [1, 1, 3],
          "expected": "invalid"
        },
        {
          "slug": "isosceles-second-inequality",
          "name": "Isosceles with invalid side lengths (1, 3, 1)",
          "description_html": "A triangle with too short sides should return \"invalid\".",
          "function": "determine_triangle_type",
          "params": [1, 3, 1],
          "expected": "invalid"
        },
        {
          "slug": "isosceles-third-inequality",
          "name": "Isosceles with invalid side lengths (3, 1, 1)",
          "description_html": "A triangle with too short sides should return \"invalid\".",
          "function": "determine_triangle_type",
          "params": [3, 1, 1],
          "expected": "invalid"
        },
        {
          "slug": "scalene-triangle-inequality",
          "name": "Scalene with invalid side lengths (7, 3, 2)",
          "description_html": "A triangle with too short sides should return \"invalid\".",
          "function": "determine_triangle_type",
          "params": [7, 3, 2],
          "expected": "invalid"
        }
      ]
    },
    {
      "name": "Equilateral triangles",
      "tests": [
        {
          "slug": "valid-equilateral",
          "name": "Equilateral triangle (2, 2, 2)",
          "description_html": "A triangle with all sides equal should return \"equilateral\".",
          "function": "determine_triangle_type",
          "params": [2, 2, 2],
          "expected": "equilateral"
        }
      ]
    },
    {
      "name": "Isosceles triangles",
      "tests": [
        {
          "slug": "valid-isosceles-first-two-equal",
          "name": "Isosceles triangle (4, 4 ,3)",
          "description_html": "A triangle with the first two sides equal should return \"isosceles\".",
          "function": "determine_triangle_type",
          "params": [4, 4, 3],
          "expected": "isosceles"
        },
        {
          "slug": "valid-isosceles-last-two-equal",
          "name": "Isosceles triangle (3, 4, 4)",
          "description_html": "A triangle with the last two sides equal should return \"isosceles\".",
          "function": "determine_triangle_type",
          "params": [3, 4, 4],
          "expected": "isosceles"
        },
        {
          "slug": "valid-isosceles-first-and-last-equal",
          "name": "Isosceles triangle (4, 3, 4)",
          "description_html": "A triangle with teh same first and last sides should return \"isosceles\".",
          "function": "determine_triangle_type",
          "params": [4, 3, 4],
          "expected": "isosceles"
        }
      ]
    },
    {
      "name": "Scalene triangles",
      "tests": [
        {
          "slug": "valid-scalene",
          "name": "Scalene triangle (5, 4, 6)",
          "description_html": "A triangle with all sides different should return \"scalene\".",
          "function": "determine_triangle_type",
          "params": [5, 4, 6],
          "expected": "scalene"
        }
      ]
    }
  ]
}
