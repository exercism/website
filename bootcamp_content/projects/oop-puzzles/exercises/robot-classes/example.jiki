class Robot do
  public property name
  public property age

  constructor with name, age do
    set this.name to name
    set this.age to age
  end

  public method say with utterance do
    vibrate_air(this.name, utterance)
  end
end

class FormalConversation do
  private property robot_1
  private property robot_2

  constructor with robot_1, robot_2 do
    set this.robot_1 to robot_1
    set this.robot_2 to robot_2
  end

  public method exchange_salutations do
    this.robot_1.say("Hello ⚡☂♞✿☯.")
    this.robot_2.say("Hello ✦☀♻❄☘.")
  end
  public method exchange_valedictions do
    this.robot_1.say("Goodbye ★⚔♠✧❀.")
    this.robot_2.say("Goodbye ♜⚙❖☾✺.")
  end
  public method get_participant_name with idx do
    if idx == 1 do
      return this.robot_1.name
    else do
      return this.robot_2.name
    end
  end
end

function hold_conversation with name_1, age_1, name_2, age_2, name_3, age_3 do
  set r1 to new Robot(name_1, age_1)
  set r2 to new Robot(name_2, age_2)
  set conversation_1 to new FormalConversation(r1, r2)

  conversation_1.exchange_salutations()
  r1.say(concatenate("I am ", number_to_string(r1.age), " years old. How old are you?"))
  r2.say(concatenate("I am ", number_to_string(r2.age), ". Together we are ", number_to_string(r1.age + r2.age), " years old. Wow."))
  r1.say("Wow.")
  conversation_1.exchange_valedictions()

  set r3 to new Robot(name_3, age_3)
  set conversation_2 to new FormalConversation(r3, r1)
  conversation_2.exchange_salutations()
  r3.say("Who was that?")
  r1.say(concatenate("That was ", conversation_1.get_participant_name(2), "."))
  conversation_2.exchange_valedictions()
end